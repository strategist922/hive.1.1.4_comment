/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.hive.service;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class TQueryInfo implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("TQueryInfo");
  private static final TField TASK_INFOS_FIELD_DESC = new TField("taskInfos", TType.MAP, (short)1);
  private static final TField QUERY_INFOS_FIELD_DESC = new TField("queryInfos", TType.MAP, (short)2);

  private Map<String,TTaskInfo> taskInfos;
  public static final int TASKINFOS = 1;
  private Map<String,String> queryInfos;
  public static final int QUERYINFOS = 2;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(TASKINFOS, new FieldMetaData("taskInfos", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new StructMetaData(TType.STRUCT, TTaskInfo.class))));
    put(QUERYINFOS, new FieldMetaData("queryInfos", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.STRING))));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(TQueryInfo.class, metaDataMap);
  }

  public TQueryInfo() {
  }

  public TQueryInfo(
    Map<String,TTaskInfo> taskInfos,
    Map<String,String> queryInfos)
  {
    this();
    this.taskInfos = taskInfos;
    this.queryInfos = queryInfos;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQueryInfo(TQueryInfo other) {
    if (other.isSetTaskInfos()) {
      Map<String,TTaskInfo> __this__taskInfos = new HashMap<String,TTaskInfo>();
      for (Map.Entry<String, TTaskInfo> other_element : other.taskInfos.entrySet()) {

        String other_element_key = other_element.getKey();
        TTaskInfo other_element_value = other_element.getValue();

        String __this__taskInfos_copy_key = other_element_key;

        TTaskInfo __this__taskInfos_copy_value = new TTaskInfo(other_element_value);

        __this__taskInfos.put(__this__taskInfos_copy_key, __this__taskInfos_copy_value);
      }
      this.taskInfos = __this__taskInfos;
    }
    if (other.isSetQueryInfos()) {
      Map<String,String> __this__queryInfos = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.queryInfos.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__queryInfos_copy_key = other_element_key;

        String __this__queryInfos_copy_value = other_element_value;

        __this__queryInfos.put(__this__queryInfos_copy_key, __this__queryInfos_copy_value);
      }
      this.queryInfos = __this__queryInfos;
    }
  }

  @Override
  public TQueryInfo clone() {
    return new TQueryInfo(this);
  }

  public int getTaskInfosSize() {
    return (this.taskInfos == null) ? 0 : this.taskInfos.size();
  }

  public void putToTaskInfos(String key, TTaskInfo val) {
    if (this.taskInfos == null) {
      this.taskInfos = new HashMap<String,TTaskInfo>();
    }
    this.taskInfos.put(key, val);
  }

  public Map<String,TTaskInfo> getTaskInfos() {
    return this.taskInfos;
  }

  public void setTaskInfos(Map<String,TTaskInfo> taskInfos) {
    this.taskInfos = taskInfos;
  }

  public void unsetTaskInfos() {
    this.taskInfos = null;
  }

  // Returns true if field taskInfos is set (has been asigned a value) and false otherwise
  public boolean isSetTaskInfos() {
    return this.taskInfos != null;
  }

  public int getQueryInfosSize() {
    return (this.queryInfos == null) ? 0 : this.queryInfos.size();
  }

  public void putToQueryInfos(String key, String val) {
    if (this.queryInfos == null) {
      this.queryInfos = new HashMap<String,String>();
    }
    this.queryInfos.put(key, val);
  }

  public Map<String,String> getQueryInfos() {
    return this.queryInfos;
  }

  public void setQueryInfos(Map<String,String> queryInfos) {
    this.queryInfos = queryInfos;
  }

  public void unsetQueryInfos() {
    this.queryInfos = null;
  }

  // Returns true if field queryInfos is set (has been asigned a value) and false otherwise
  public boolean isSetQueryInfos() {
    return this.queryInfos != null;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case TASKINFOS:
      if (value == null) {
        unsetTaskInfos();
      } else {
        setTaskInfos((Map<String,TTaskInfo>)value);
      }
      break;

    case QUERYINFOS:
      if (value == null) {
        unsetQueryInfos();
      } else {
        setQueryInfos((Map<String,String>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case TASKINFOS:
      return getTaskInfos();

    case QUERYINFOS:
      return getQueryInfos();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case TASKINFOS:
      return isSetTaskInfos();
    case QUERYINFOS:
      return isSetQueryInfos();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TQueryInfo)
      return this.equals((TQueryInfo)that);
    return false;
  }

  public boolean equals(TQueryInfo that) {
    if (that == null)
      return false;

    boolean this_present_taskInfos = true && this.isSetTaskInfos();
    boolean that_present_taskInfos = true && that.isSetTaskInfos();
    if (this_present_taskInfos || that_present_taskInfos) {
      if (!(this_present_taskInfos && that_present_taskInfos))
        return false;
      if (!this.taskInfos.equals(that.taskInfos))
        return false;
    }

    boolean this_present_queryInfos = true && this.isSetQueryInfos();
    boolean that_present_queryInfos = true && that.isSetQueryInfos();
    if (this_present_queryInfos || that_present_queryInfos) {
      if (!(this_present_queryInfos && that_present_queryInfos))
        return false;
      if (!this.queryInfos.equals(that.queryInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case TASKINFOS:
          if (field.type == TType.MAP) {
            {
              TMap _map5 = iprot.readMapBegin();
              this.taskInfos = new HashMap<String,TTaskInfo>(2*_map5.size);
              for (int _i6 = 0; _i6 < _map5.size; ++_i6)
              {
                String _key7;
                TTaskInfo _val8;
                _key7 = iprot.readString();
                _val8 = new TTaskInfo();
                _val8.read(iprot);
                this.taskInfos.put(_key7, _val8);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case QUERYINFOS:
          if (field.type == TType.MAP) {
            {
              TMap _map9 = iprot.readMapBegin();
              this.queryInfos = new HashMap<String,String>(2*_map9.size);
              for (int _i10 = 0; _i10 < _map9.size; ++_i10)
              {
                String _key11;
                String _val12;
                _key11 = iprot.readString();
                _val12 = iprot.readString();
                this.queryInfos.put(_key11, _val12);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.taskInfos != null) {
      oprot.writeFieldBegin(TASK_INFOS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.taskInfos.size()));
        for (Map.Entry<String, TTaskInfo> _iter13 : this.taskInfos.entrySet())        {
          oprot.writeString(_iter13.getKey());
          _iter13.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.queryInfos != null) {
      oprot.writeFieldBegin(QUERY_INFOS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.queryInfos.size()));
        for (Map.Entry<String, String> _iter14 : this.queryInfos.entrySet())        {
          oprot.writeString(_iter14.getKey());
          oprot.writeString(_iter14.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TQueryInfo(");
    boolean first = true;

    sb.append("taskInfos:");
    if (this.taskInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.taskInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("queryInfos:");
    if (this.queryInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.queryInfos);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

