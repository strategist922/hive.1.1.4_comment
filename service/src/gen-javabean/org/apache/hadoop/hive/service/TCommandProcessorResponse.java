/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.hive.service;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import org.apache.log4j.Logger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class TCommandProcessorResponse implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("TCommandProcessorResponse");
  private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRING, (short)1);
  private static final TField RESPONSE_CODE_FIELD_DESC = new TField("responseCode", TType.I32, (short)2);
  private static final TField SQLSTATE_FIELD_DESC = new TField("SQLState", TType.STRING, (short)3);
  private static final TField READY_FIELD_DESC = new TField("ready", TType.BOOL, (short)4);

  private String message;
  public static final int MESSAGE = 1;
  private int responseCode;
  public static final int RESPONSECODE = 2;
  private String SQLState;
  public static final int SQLSTATE = 3;
  private boolean ready;
  public static final int READY = 4;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean responseCode = false;
    public boolean ready = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(MESSAGE, new FieldMetaData("message", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(RESPONSECODE, new FieldMetaData("responseCode", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(SQLSTATE, new FieldMetaData("SQLState", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(READY, new FieldMetaData("ready", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(TCommandProcessorResponse.class, metaDataMap);
  }

  public TCommandProcessorResponse() {
  }

  public TCommandProcessorResponse(
    String message,
    int responseCode,
    String SQLState,
    boolean ready)
  {
    this();
    this.message = message;
    this.responseCode = responseCode;
    this.__isset.responseCode = true;
    this.SQLState = SQLState;
    this.ready = ready;
    this.__isset.ready = true;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCommandProcessorResponse(TCommandProcessorResponse other) {
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    __isset.responseCode = other.__isset.responseCode;
    this.responseCode = other.responseCode;
    if (other.isSetSQLState()) {
      this.SQLState = other.SQLState;
    }
    __isset.ready = other.__isset.ready;
    this.ready = other.ready;
  }

  @Override
  public TCommandProcessorResponse clone() {
    return new TCommandProcessorResponse(this);
  }

  public String getMessage() {
    return this.message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public void unsetMessage() {
    this.message = null;
  }

  // Returns true if field message is set (has been asigned a value) and false otherwise
  public boolean isSetMessage() {
    return this.message != null;
  }

  public int getResponseCode() {
    return this.responseCode;
  }

  public void setResponseCode(int responseCode) {
    this.responseCode = responseCode;
    this.__isset.responseCode = true;
  }

  public void unsetResponseCode() {
    this.__isset.responseCode = false;
  }

  // Returns true if field responseCode is set (has been asigned a value) and false otherwise
  public boolean isSetResponseCode() {
    return this.__isset.responseCode;
  }

  public String getSQLState() {
    return this.SQLState;
  }

  public void setSQLState(String SQLState) {
    this.SQLState = SQLState;
  }

  public void unsetSQLState() {
    this.SQLState = null;
  }

  // Returns true if field SQLState is set (has been asigned a value) and false otherwise
  public boolean isSetSQLState() {
    return this.SQLState != null;
  }

  public boolean isReady() {
    return this.ready;
  }

  public void setReady(boolean ready) {
    this.ready = ready;
    this.__isset.ready = true;
  }

  public void unsetReady() {
    this.__isset.ready = false;
  }

  // Returns true if field ready is set (has been asigned a value) and false otherwise
  public boolean isSetReady() {
    return this.__isset.ready;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((String)value);
      }
      break;

    case RESPONSECODE:
      if (value == null) {
        unsetResponseCode();
      } else {
        setResponseCode((Integer)value);
      }
      break;

    case SQLSTATE:
      if (value == null) {
        unsetSQLState();
      } else {
        setSQLState((String)value);
      }
      break;

    case READY:
      if (value == null) {
        unsetReady();
      } else {
        setReady((Boolean)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case MESSAGE:
      return getMessage();

    case RESPONSECODE:
      return new Integer(getResponseCode());

    case SQLSTATE:
      return getSQLState();

    case READY:
      return new Boolean(isReady());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case MESSAGE:
      return isSetMessage();
    case RESPONSECODE:
      return isSetResponseCode();
    case SQLSTATE:
      return isSetSQLState();
    case READY:
      return isSetReady();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCommandProcessorResponse)
      return this.equals((TCommandProcessorResponse)that);
    return false;
  }

  public boolean equals(TCommandProcessorResponse that) {
    if (that == null)
      return false;

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_responseCode = true;
    boolean that_present_responseCode = true;
    if (this_present_responseCode || that_present_responseCode) {
      if (!(this_present_responseCode && that_present_responseCode))
        return false;
      if (this.responseCode != that.responseCode)
        return false;
    }

    boolean this_present_SQLState = true && this.isSetSQLState();
    boolean that_present_SQLState = true && that.isSetSQLState();
    if (this_present_SQLState || that_present_SQLState) {
      if (!(this_present_SQLState && that_present_SQLState))
        return false;
      if (!this.SQLState.equals(that.SQLState))
        return false;
    }

    boolean this_present_ready = true;
    boolean that_present_ready = true;
    if (this_present_ready || that_present_ready) {
      if (!(this_present_ready && that_present_ready))
        return false;
      if (this.ready != that.ready)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case MESSAGE:
          if (field.type == TType.STRING) {
            this.message = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RESPONSECODE:
          if (field.type == TType.I32) {
            this.responseCode = iprot.readI32();
            this.__isset.responseCode = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SQLSTATE:
          if (field.type == TType.STRING) {
            this.SQLState = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case READY:
          if (field.type == TType.BOOL) {
            this.ready = iprot.readBool();
            this.__isset.ready = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.message != null) {
      oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
      oprot.writeString(this.message);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(RESPONSE_CODE_FIELD_DESC);
    oprot.writeI32(this.responseCode);
    oprot.writeFieldEnd();
    if (this.SQLState != null) {
      oprot.writeFieldBegin(SQLSTATE_FIELD_DESC);
      oprot.writeString(this.SQLState);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(READY_FIELD_DESC);
    oprot.writeBool(this.ready);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCommandProcessorResponse(");
    boolean first = true;

    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseCode:");
    sb.append(this.responseCode);
    first = false;
    if (!first) sb.append(", ");
    sb.append("SQLState:");
    if (this.SQLState == null) {
      sb.append("null");
    } else {
      sb.append(this.SQLState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ready:");
    sb.append(this.ready);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

