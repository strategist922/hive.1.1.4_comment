// $ANTLR 3.0.1 /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g 2013-07-11 12:43:25

package org.apache.hadoop.hive.ql.parse;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;


import org.antlr.runtime.tree.*;

public class HiveParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "TOK_INSERT", "TOK_QUERY", "TOK_SELECT", "TOK_SELECTDI", "TOK_SELEXPR", "TOK_FROM", "TOK_TAB", "TOK_PARTSPEC", "TOK_PARTVAL", "TOK_DIR", "TOK_LOCAL_DIR", "TOK_TABREF", "TOK_SUBQUERY", "TOK_DESTINATION", "TOK_ALLCOLREF", "TOK_TABLE_OR_COL", "TOK_FUNCTION", "TOK_FUNCTIONDI", "TOK_FUNCTIONSTAR", "TOK_WHERE", "TOK_OP_EQ", "TOK_OP_NE", "TOK_OP_LE", "TOK_OP_LT", "TOK_OP_GE", "TOK_OP_GT", "TOK_OP_DIV", "TOK_OP_ADD", "TOK_OP_SUB", "TOK_OP_MUL", "TOK_OP_MOD", "TOK_OP_BITAND", "TOK_OP_BITNOT", "TOK_OP_BITOR", "TOK_OP_BITXOR", "TOK_OP_AND", "TOK_OP_OR", "TOK_OP_NOT", "TOK_OP_LIKE", "TOK_TRUE", "TOK_FALSE", "TOK_TRANSFORM", "TOK_SERDE", "TOK_SERDENAME", "TOK_SERDEPROPS", "TOK_EXPLIST", "TOK_ALIASLIST", "TOK_GROUPBY", "TOK_HAVING", "TOK_ORDERBY", "TOK_CLUSTERBY", "TOK_DISTRIBUTEBY", "TOK_SORTBY", "TOK_UNION", "TOK_JOIN", "TOK_LEFTOUTERJOIN", "TOK_RIGHTOUTERJOIN", "TOK_FULLOUTERJOIN", "TOK_UNIQUEJOIN", "TOK_LOAD", "TOK_NULL", "TOK_ISNULL", "TOK_ISNOTNULL", "TOK_TINYINT", "TOK_SMALLINT", "TOK_INT", "TOK_BIGINT", "TOK_BOOLEAN", "TOK_FLOAT", "TOK_DOUBLE", "TOK_DATE", "TOK_DATETIME", "TOK_TIMESTAMP", "TOK_STRING", "TOK_LIST", "TOK_STRUCT", "TOK_MAP", "TOK_UNIONTYPE", "TOK_COLTYPELIST", "TOK_CREATEDATABASE", "TOK_CREATETABLE", "TOK_LIKETABLE", "TOK_DESCTABLE", "TOK_DESCFUNCTION", "TOK_ALTERTABLE_PARTITION", "TOK_ALTERTABLE_RENAME", "TOK_ALTERTABLE_ADDCOLS", "TOK_ALTERTABLE_RENAMECOL", "TOK_ALTERTABLE_REPLACECOLS", "TOK_ALTERTABLE_ADDPARTS", "TOK_ALTERTABLE_DROPPARTS", "TOK_ALTERTABLE_TOUCH", "TOK_ALTERTABLE_ARCHIVE", "TOK_ALTERTABLE_UNARCHIVE", "TOK_ALTERTABLE_SERDEPROPERTIES", "TOK_ALTERTABLE_SERIALIZER", "TOK_TABLE_PARTITION", "TOK_ALTERTABLE_FILEFORMAT", "TOK_ALTERTABLE_LOCATION", "TOK_ALTERTABLE_PROPERTIES", "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION", "TOK_MSCK", "TOK_SHOWDATABASES", "TOK_SHOWTABLES", "TOK_SHOWFUNCTIONS", "TOK_SHOWGRANTS", "TOK_SHOWPARTITIONS", "TOK_SHOW_TABLESTATUS", "TOK_SWITCHDATABASE", "TOK_DROPDATABASE", "TOK_DATABASECOMMENT", "TOK_DROPTABLE", "TOK_TABCOLLIST", "TOK_TABCOL", "TOK_TABLECOMMENT", "TOK_TABLEPARTCOLS", "TOK_TABLEBUCKETS", "TOK_TABLEROWFORMAT", "TOK_TABLEROWFORMATFIELD", "TOK_TABLEROWFORMATCOLLITEMS", "TOK_TABLEROWFORMATMAPKEYS", "TOK_TABLEROWFORMATLINES", "TOK_TBLSEQUENCEFILE", "TOK_TBLTEXTFILE", "TOK_TBLRCFILE", "TOK_TABLEFILEFORMAT", "TOK_STORAGEHANDLER", "TOK_ALTERTABLE_CLUSTER_SORT", "TOK_TABCOLNAME", "TOK_TABLELOCATION", "TOK_PARTITIONLOCATION", "TOK_TABLESAMPLE", "TOK_TMP_FILE", "TOK_TABSORTCOLNAMEASC", "TOK_TABSORTCOLNAMEDESC", "TOK_CHARSETLITERAL", "TOK_CREATEFUNCTION", "TOK_DROPFUNCTION", "TOK_CREATEVIEW", "TOK_DROPVIEW", "TOK_ALTERVIEW_PROPERTIES", "TOK_EXPLAIN", "TOK_TABLESERIALIZER", "TOK_TABLEPROPERTIES", "TOK_TABLEPROPLIST", "TOK_TABTYPE", "TOK_LIMIT", "TOK_TABLEPROPERTY", "TOK_IFNOTEXISTS", "TOK_IFEXISTS", "TOK_HINTLIST", "TOK_HINT", "TOK_MAPJOIN", "TOK_STREAMTABLE", "TOK_HINTARGLIST", "TOK_USERSCRIPTCOLNAMES", "TOK_USERSCRIPTCOLSCHEMA", "TOK_CREATEUSER", "TOK_DROPUSER", "TOK_USER", "TOK_USRLIST", "TOK_ALLTABLEREF", "TOK_PRIV_GLOBAL", "TOK_PRIV_DB", "TOK_PRIV_TABLE", "TOK_GRANT", "TOK_REVOKE", "TOK_PRIVLIST", "TOK_PRIVALL", "TOK_PRIVSEL", "TOK_PRIVINS", "TOK_PRIVCRT", "TOK_PRIVALT", "TOK_PRIVDROP", "TOK_PRIVCREATEUSER", "TOK_PRIVGRANT", "TOK_PRIVSUPER", "TOK_WITHOPTS", "TOK_SETPASSWORD", "TOK_RECORDREADER", "TOK_RECORDWRITER", "TOK_LEFTSEMIJOIN", "TOK_LATERAL_VIEW", "TOK_TABALIAS", "KW_EXPLAIN", "KW_EXTENDED", "KW_LOAD", "KW_DATA", "KW_LOCAL", "KW_INPATH", "StringLiteral", "KW_OVERWRITE", "KW_INTO", "KW_TABLE", "KW_IF", "KW_EXISTS", "KW_NOT", "KW_CREATE", "KW_DATABASE", "KW_SCHEMA", "Identifier", "KW_USE", "KW_DROP", "KW_COMMENT", "KW_EXTERNAL", "KW_LIKE", "LPAREN", "RPAREN", "KW_AS", "KW_ALTER", "KW_VIEW", "KW_RENAME", "KW_TO", "KW_ADD", "KW_REPLACE", "KW_COLUMNS", "KW_CHANGE", "KW_COLUMN", "KW_FIRST", "KW_AFTER", "KW_TOUCH", "KW_ARCHIVE", "KW_UNARCHIVE", "KW_LOCATION", "COMMA", "KW_SET", "KW_TBLPROPERTIES", "KW_SERDE", "KW_WITH", "KW_SERDEPROPERTIES", "KW_FILEFORMAT", "KW_SEQUENCEFILE", "KW_TEXTFILE", "KW_RCFILE", "KW_INPUTFORMAT", "KW_OUTPUTFORMAT", "DOT", "KW_ELEM_TYPE", "KW_KEY_TYPE", "KW_VALUE_TYPE", "KW_DESCRIBE", "KW_DESC", "KW_FORMATTED", "KW_FUNCTION", "KW_SHOW", "KW_DATABASES", "KW_SCHEMAS", "KW_TABLES", "KW_FUNCTIONS", "KW_PARTITIONS", "KW_FROM", "KW_IN", "KW_MSCK", "KW_REPAIR", "KW_TEMPORARY", "KW_IDENTIFIED", "KW_BY", "KW_PARTITIONED", "KW_CLUSTERED", "KW_SORTED", "Number", "KW_BUCKETS", "KW_RECORDREADER", "KW_RECORDWRITER", "KW_ROW", "KW_FORMAT", "KW_DELIMITED", "EQUAL", "KW_FIELDS", "KW_TERMINATED", "KW_ESCAPED", "KW_COLLECTION", "KW_ITEMS", "KW_MAP", "KW_KEYS", "KW_LINES", "KW_STORED", "KW_ASC", "COLON", "KW_TINYINT", "KW_SMALLINT", "KW_INT", "KW_BIGINT", "KW_BOOLEAN", "KW_FLOAT", "KW_DOUBLE", "KW_DATE", "KW_DATETIME", "KW_TIMESTAMP", "KW_STRING", "KW_ARRAY", "LESSTHAN", "GREATERTHAN", "KW_STRUCT", "KW_UNIONTYPE", "KW_UNION", "KW_ALL", "KW_INSERT", "KW_DIRECTORY", "KW_LIMIT", "KW_SELECT", "KW_DISTINCT", "KW_TRANSFORM", "KW_USING", "DIVIDE", "STAR", "PLUS", "KW_MAPJOIN", "KW_STREAMTABLE", "KW_REDUCE", "KW_ON", "KW_PRESERVE", "KW_UNIQUEJOIN", "KW_JOIN", "KW_LEFT", "KW_OUTER", "KW_RIGHT", "KW_FULL", "KW_SEMI", "KW_LATERAL", "KW_TABLESAMPLE", "KW_BUCKET", "KW_OUT", "KW_OF", "KW_WHERE", "KW_GROUP", "KW_HAVING", "KW_ORDER", "KW_CLUSTER", "KW_DISTRIBUTE", "KW_SORT", "KW_CAST", "KW_CASE", "KW_WHEN", "KW_THEN", "KW_ELSE", "KW_END", "CharSetName", "CharSetLiteral", "KW_NULL", "LSQUARE", "RSQUARE", "MINUS", "TILDE", "KW_IS", "BITWISEXOR", "MOD", "DIV", "AMPERSAND", "BITWISEOR", "NOTEQUAL", "LESSTHANOREQUALTO", "GREATERTHANOREQUALTO", "KW_RLIKE", "KW_REGEXP", "KW_AND", "KW_OR", "KW_TRUE", "KW_FALSE", "KW_PARTITION", "KW_GRANT", "KW_OPTION", "KW_REVOKE", "KW_FOR", "KW_CLUSTERSTATUS", "KW_UTC", "KW_UTCTIMESTAMP", "KW_LONG", "KW_DELETE", "KW_PLUS", "KW_MINUS", "KW_FETCH", "KW_INTERSECT", "KW_MATERIALIZED", "KW_SSL", "KW_UNDO", "KW_LOCK", "KW_UNLOCK", "KW_PROCEDURE", "KW_UNSIGNED", "KW_WHILE", "KW_READ", "KW_READS", "KW_PURGE", "KW_RANGE", "KW_ANALYZE", "KW_BEFORE", "KW_BETWEEN", "KW_BOTH", "KW_BINARY", "KW_CROSS", "KW_CONTINUE", "KW_CURSOR", "KW_TRIGGER", "SEMICOLON", "LCURLY", "RCURLY", "QUESTION", "DOLLAR", "Letter", "HexDigit", "Digit", "Exponent", "IDLetter", "IDDigit", "RegexComponent", "WS", "COMMENT"
    };
    public static final int TOK_FUNCTIONDI=21;
    public static final int LSQUARE=344;
    public static final int KW_REPAIR=257;
    public static final int KW_FORMAT=269;
    public static final int KW_FIRST=222;
    public static final int TOK_OP_GT=29;
    public static final int TOK_ALTERTABLE_SERDEPROPERTIES=98;
    public static final int KW_DROP=206;
    public static final int IDLetter=407;
    public static final int KW_EXPLAIN=188;
    public static final int TOK_OP_GE=28;
    public static final int RPAREN=211;
    public static final int TOK_OP_ADD=31;
    public static final int TOK_TABCOLNAME=132;
    public static final int TOK_FUNCTIONSTAR=22;
    public static final int KW_THEN=338;
    public static final int TOK_FROM=9;
    public static final int TOK_TINYINT=67;
    public static final int DIVIDE=308;
    public static final int TOK_ALTERTABLE_LOCATION=102;
    public static final int TOK_ALTERTABLE_SERIALIZER=99;
    public static final int TOK_DESCFUNCTION=87;
    public static final int KW_FILEFORMAT=234;
    public static final int KW_FETCH=375;
    public static final int KW_TRANSFORM=306;
    public static final int KW_MATERIALIZED=377;
    public static final int TOK_PRIVCREATEUSER=178;
    public static final int TOK_LEFTSEMIJOIN=185;
    public static final int TOK_TBLSEQUENCEFILE=126;
    public static final int KW_UNIQUEJOIN=316;
    public static final int TOK_SELEXPR=8;
    public static final int KW_SELECT=304;
    public static final int TOK_UNIQUEJOIN=62;
    public static final int TOK_MAP=80;
    public static final int KW_BUCKET=325;
    public static final int KW_LOAD=190;
    public static final int KW_GROUP=329;
    public static final int KW_TO=216;
    public static final int KW_CHANGE=220;
    public static final int KW_DISTRIBUTE=333;
    public static final int KW_NOT=200;
    public static final int TOK_TMP_FILE=136;
    public static final int KW_ELSE=339;
    public static final int KW_INPATH=193;
    public static final int KW_OUT=326;
    public static final int TOK_STRUCT=79;
    public static final int KW_BOOLEAN=287;
    public static final int TOK_DOUBLE=73;
    public static final int KW_REGEXP=358;
    public static final int TOK_DATETIME=75;
    public static final int TOK_STORAGEHANDLER=130;
    public static final int HexDigit=404;
    public static final int KW_SORT=334;
    public static final int KW_FROM=254;
    public static final int TOK_MAPJOIN=156;
    public static final int TOK_TIMESTAMP=76;
    public static final int KW_REDUCE=313;
    public static final int TOK_IFNOTEXISTS=152;
    public static final int TOK_TBLTEXTFILE=127;
    public static final int KW_FOR=367;
    public static final int TOK_ALTERTABLE_FILEFORMAT=101;
    public static final int KW_READS=386;
    public static final int KW_SET=229;
    public static final int TOK_DROPUSER=162;
    public static final int PLUS=310;
    public static final int TOK_TABSORTCOLNAMEDESC=138;
    public static final int KW_EXTENDED=189;
    public static final int TOK_LOAD=63;
    public static final int TOK_TABALIAS=187;
    public static final int TOK_IFEXISTS=153;
    public static final int TOK_PRIV_GLOBAL=166;
    public static final int KW_LOCATION=227;
    public static final int TOK_PRIVALL=172;
    public static final int TOK_ALTERTABLE_TOUCH=95;
    public static final int KW_MSCK=256;
    public static final int TOK_TRANSFORM=45;
    public static final int LESSTHAN=295;
    public static final int KW_DELIMITED=270;
    public static final int TOK_PRIVALT=176;
    public static final int TOK_FUNCTION=20;
    public static final int KW_WHEN=337;
    public static final int TOK_TABLEROWFORMATLINES=125;
    public static final int TOK_CREATEFUNCTION=140;
    public static final int AMPERSAND=352;
    public static final int TOK_SHOWTABLES=107;
    public static final int MINUS=346;
    public static final int KW_FIELDS=272;
    public static final int KW_SEQUENCEFILE=235;
    public static final int TOK_FALSE=44;
    public static final int COLON=282;
    public static final int TOK_TABLECOMMENT=118;
    public static final int TOK_LIKETABLE=85;
    public static final int TOK_SMALLINT=68;
    public static final int TOK_OP_LT=27;
    public static final int KW_TABLESAMPLE=324;
    public static final int RCURLY=400;
    public static final int TOK_TABLEPROPERTY=151;
    public static final int TOK_FULLOUTERJOIN=61;
    public static final int TOK_OP_LE=26;
    public static final int KW_USING=307;
    public static final int KW_NULL=343;
    public static final int TOK_OP_AND=39;
    public static final int TOK_OP_MOD=34;
    public static final int TOK_HINTARGLIST=158;
    public static final int KW_SERDE=231;
    public static final int KW_TINYINT=283;
    public static final int TOK_GROUPBY=51;
    public static final int KW_CROSS=394;
    public static final int TOK_CHARSETLITERAL=139;
    public static final int TOK_TABLEPARTCOLS=119;
    public static final int KW_COLLECTION=275;
    public static final int TOK_ALTERTABLE_DROPPARTS=94;
    public static final int TOK_SERDEPROPS=48;
    public static final int KW_INSERT=301;
    public static final int BITWISEXOR=349;
    public static final int TOK_DROPTABLE=115;
    public static final int TOK_OP_OR=40;
    public static final int TOK_TABLEROWFORMATMAPKEYS=124;
    public static final int Identifier=204;
    public static final int TOK_PARTVAL=12;
    public static final int TOK_OP_NE=25;
    public static final int TOK_TABLEBUCKETS=120;
    public static final int KW_RLIKE=357;
    public static final int TOK_OP_NOT=41;
    public static final int KW_SCHEMAS=250;
    public static final int COMMENT=411;
    public static final int IDDigit=408;
    public static final int TOK_PRIV_DB=167;
    public static final int TOK_ALIASLIST=50;
    public static final int KW_ESCAPED=274;
    public static final int TOK_INSERT=4;
    public static final int KW_SMALLINT=284;
    public static final int KW_INT=285;
    public static final int KW_IDENTIFIED=259;
    public static final int KW_TEXTFILE=236;
    public static final int TOK_USERSCRIPTCOLNAMES=159;
    public static final int KW_RENAME=215;
    public static final int TOK_ALTERTABLE_REPLACECOLS=92;
    public static final int TOK_UNIONTYPE=81;
    public static final int TOK_LATERAL_VIEW=186;
    public static final int KW_BINARY=393;
    public static final int TOK_STRING=77;
    public static final int KW_END=340;
    public static final int TOK_CLUSTERBY=54;
    public static final int TOK_FLOAT=72;
    public static final int TOK_SORTBY=56;
    public static final int KW_TABLES=251;
    public static final int TOK_USRLIST=164;
    public static final int Letter=403;
    public static final int KW_CURSOR=396;
    public static final int KW_TIMESTAMP=292;
    public static final int TOK_SELECTDI=7;
    public static final int KW_COLUMNS=219;
    public static final int KW_UNLOCK=381;
    public static final int KW_DESCRIBE=244;
    public static final int KW_UNIONTYPE=298;
    public static final int TOK_CREATETABLE=84;
    public static final int TOK_DROPDATABASE=113;
    public static final int KW_RCFILE=237;
    public static final int KW_CREATE=201;
    public static final int KW_MAPJOIN=311;
    public static final int TOK_DROPVIEW=143;
    public static final int TOK_PRIVGRANT=179;
    public static final int KW_WITH=232;
    public static final int TOK_ALTERTABLE_RENAMECOL=91;
    public static final int KW_GRANT=364;
    public static final int Number=264;
    public static final int COMMA=228;
    public static final int KW_WHILE=384;
    public static final int EQUAL=271;
    public static final int KW_UNARCHIVE=226;
    public static final int TOK_ALLTABLEREF=165;
    public static final int KW_RECORDREADER=266;
    public static final int TOK_DESTINATION=17;
    public static final int TOK_PRIVCRT=175;
    public static final int TOK_OP_BITAND=35;
    public static final int TOK_PRIVINS=174;
    public static final int TOK_HAVING=52;
    public static final int KW_UNION=299;
    public static final int KW_TEMPORARY=258;
    public static final int KW_CAST=335;
    public static final int KW_FALSE=362;
    public static final int TOK_EXPLAIN=145;
    public static final int KW_INTERSECT=376;
    public static final int TOK_ALTERTABLE_PARTITION=88;
    public static final int KW_STORED=280;
    public static final int KW_CASE=336;
    public static final int TOK_OP_BITNOT=36;
    public static final int TOK_TABCOLLIST=116;
    public static final int TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION=104;
    public static final int TOK_TABTYPE=149;
    public static final int QUESTION=401;
    public static final int TOK_HINTLIST=154;
    public static final int TOK_SHOWGRANTS=109;
    public static final int KW_AS=212;
    public static final int KW_BEFORE=390;
    public static final int KW_KEY_TYPE=242;
    public static final int TOK_TABLELOCATION=133;
    public static final int TOK_RECORDREADER=183;
    public static final int KW_ALTER=213;
    public static final int TOK_PRIVSEL=173;
    public static final int TOK_TABREF=15;
    public static final int KW_LIKE=209;
    public static final int KW_PARTITIONED=261;
    public static final int STAR=309;
    public static final int KW_JOIN=317;
    public static final int TOK_ALTERTABLE_ARCHIVE=96;
    public static final int TOK_PRIV_TABLE=168;
    public static final int KW_PLUS=373;
    public static final int KW_ITEMS=276;
    public static final int MOD=350;
    public static final int TOK_OP_EQ=24;
    public static final int KW_ROW=268;
    public static final int KW_REVOKE=366;
    public static final int KW_FLOAT=288;
    public static final int KW_BOTH=392;
    public static final int EOF=-1;
    public static final int TOK_SHOWDATABASES=106;
    public static final int KW_ASC=281;
    public static final int TOK_DATABASECOMMENT=114;
    public static final int RegexComponent=409;
    public static final int KW_PARTITIONS=253;
    public static final int KW_RANGE=388;
    public static final int TOK_GRANT=169;
    public static final int TOK_TABLESAMPLE=135;
    public static final int TOK_PRIVDROP=177;
    public static final int TOK_QUERY=5;
    public static final int TOK_RIGHTOUTERJOIN=60;
    public static final int KW_TABLE=197;
    public static final int TOK_CREATEUSER=161;
    public static final int TOK_RECORDWRITER=184;
    public static final int KW_SCHEMA=203;
    public static final int KW_OPTION=365;
    public static final int TOK_WITHOPTS=181;
    public static final int TOK_COLTYPELIST=82;
    public static final int TOK_BIGINT=70;
    public static final int KW_ADD=217;
    public static final int TOK_ALTERTABLE_RENAME=89;
    public static final int KW_LATERAL=323;
    public static final int LCURLY=399;
    public static final int SEMICOLON=398;
    public static final int TOK_TABCOL=117;
    public static final int TOK_SETPASSWORD=182;
    public static final int KW_DELETE=372;
    public static final int TOK_WHERE=23;
    public static final int KW_TBLPROPERTIES=230;
    public static final int WS=410;
    public static final int TOK_TABLEROWFORMATFIELD=122;
    public static final int KW_REPLACE=218;
    public static final int KW_LOCK=380;
    public static final int KW_BY=260;
    public static final int TOK_UNION=57;
    public static final int TOK_SELECT=6;
    public static final int TOK_OP_LIKE=42;
    public static final int TOK_PRIVSUPER=180;
    public static final int KW_LOCAL=192;
    public static final int KW_SEMI=322;
    public static final int TOK_TABLEPROPLIST=148;
    public static final int KW_UTC=369;
    public static final int KW_LINES=279;
    public static final int TOK_SHOW_TABLESTATUS=111;
    public static final int KW_AND=359;
    public static final int TOK_SUBQUERY=16;
    public static final int CharSetName=341;
    public static final int KW_CLUSTERSTATUS=368;
    public static final int TOK_DROPFUNCTION=141;
    public static final int TOK_DESCTABLE=86;
    public static final int KW_DIRECTORY=302;
    public static final int LPAREN=210;
    public static final int KW_PARTITION=363;
    public static final int GREATERTHANOREQUALTO=356;
    public static final int KW_FORMATTED=246;
    public static final int KW_USE=205;
    public static final int KW_STRUCT=297;
    public static final int TOK_TRUE=43;
    public static final int KW_TERMINATED=273;
    public static final int TOK_CREATEVIEW=142;
    public static final int TOK_LOCAL_DIR=14;
    public static final int KW_IN=255;
    public static final int KW_INPUTFORMAT=238;
    public static final int KW_SSL=378;
    public static final int KW_OUTER=319;
    public static final int KW_IS=348;
    public static final int KW_IF=198;
    public static final int KW_DATABASES=249;
    public static final int TOK_ALTERVIEW_PROPERTIES=144;
    public static final int KW_ORDER=331;
    public static final int KW_ALL=300;
    public static final int KW_HAVING=330;
    public static final int TOK_ISNULL=65;
    public static final int TOK_ALLCOLREF=18;
    public static final int KW_FUNCTIONS=252;
    public static final int TOK_DIR=13;
    public static final int TOK_PRIVLIST=171;
    public static final int BITWISEOR=353;
    public static final int KW_SERDEPROPERTIES=233;
    public static final int StringLiteral=194;
    public static final int KW_ANALYZE=389;
    public static final int CharSetLiteral=342;
    public static final int TOK_TABLE_OR_COL=19;
    public static final int KW_PROCEDURE=382;
    public static final int TOK_ALTERTABLE_ADDPARTS=93;
    public static final int KW_CLUSTERED=262;
    public static final int KW_PURGE=387;
    public static final int KW_COMMENT=207;
    public static final int DIV=351;
    public static final int TOK_CREATEDATABASE=83;
    public static final int TOK_MSCK=105;
    public static final int KW_DATABASE=202;
    public static final int KW_RECORDWRITER=267;
    public static final int TOK_OP_BITXOR=38;
    public static final int KW_TOUCH=224;
    public static final int TOK_ALTERTABLE_ADDCOLS=90;
    public static final int KW_DATETIME=291;
    public static final int KW_STRING=293;
    public static final int KW_OUTPUTFORMAT=239;
    public static final int KW_LONG=371;
    public static final int TOK_NULL=64;
    public static final int KW_WHERE=328;
    public static final int KW_EXISTS=199;
    public static final int TOK_OP_DIV=30;
    public static final int NOTEQUAL=354;
    public static final int TOK_TABLE_PARTITION=100;
    public static final int TOK_DATE=74;
    public static final int TOK_TABLEROWFORMAT=121;
    public static final int KW_OVERWRITE=195;
    public static final int KW_DISTINCT=305;
    public static final int GREATERTHAN=296;
    public static final int TOK_SHOWPARTITIONS=110;
    public static final int TOK_ISNOTNULL=66;
    public static final int KW_FUNCTION=247;
    public static final int KW_PRESERVE=315;
    public static final int KW_CLUSTER=332;
    public static final int TOK_EXPLIST=49;
    public static final int TOK_USER=163;
    public static final int TOK_DISTRIBUTEBY=55;
    public static final int TOK_LIST=78;
    public static final int TOK_TBLRCFILE=128;
    public static final int TOK_ALTERTABLE_UNARCHIVE=97;
    public static final int TOK_HINT=155;
    public static final int TOK_TABLEPROPERTIES=147;
    public static final int KW_ARCHIVE=225;
    public static final int TOK_SERDE=46;
    public static final int KW_KEYS=278;
    public static final int KW_LEFT=318;
    public static final int TOK_SHOWFUNCTIONS=108;
    public static final int KW_VIEW=214;
    public static final int KW_DOUBLE=289;
    public static final int TOK_TABLESERIALIZER=146;
    public static final int TOK_LEFTOUTERJOIN=59;
    public static final int KW_SORTED=263;
    public static final int KW_MAP=277;
    public static final int KW_ELEM_TYPE=241;
    public static final int KW_FULL=321;
    public static final int TOK_SERDENAME=47;
    public static final int TOK_PARTITIONLOCATION=134;
    public static final int LESSTHANOREQUALTO=355;
    public static final int KW_ARRAY=294;
    public static final int KW_BUCKETS=265;
    public static final int DOLLAR=402;
    public static final int KW_UTCTIMESTAMP=370;
    public static final int KW_READ=385;
    public static final int TOK_OP_MUL=33;
    public static final int TOK_ALTERTABLE_CLUSTER_SORT=131;
    public static final int KW_DESC=245;
    public static final int Exponent=406;
    public static final int TOK_REVOKE=170;
    public static final int KW_TRUE=361;
    public static final int TOK_ALTERTABLE_PROPERTIES=103;
    public static final int KW_LIMIT=303;
    public static final int TOK_STREAMTABLE=157;
    public static final int KW_BIGINT=286;
    public static final int TOK_INT=69;
    public static final int KW_MINUS=374;
    public static final int TOK_TABLEFILEFORMAT=129;
    public static final int KW_RIGHT=320;
    public static final int TOK_ORDERBY=53;
    public static final int KW_EXTERNAL=208;
    public static final int KW_AFTER=223;
    public static final int TOK_JOIN=58;
    public static final int TILDE=347;
    public static final int KW_COLUMN=221;
    public static final int DOT=240;
    public static final int KW_UNDO=379;
    public static final int KW_STREAMTABLE=312;
    public static final int TOK_TAB=10;
    public static final int KW_TRIGGER=397;
    public static final int KW_CONTINUE=395;
    public static final int TOK_USERSCRIPTCOLSCHEMA=160;
    public static final int TOK_OP_BITOR=37;
    public static final int RSQUARE=345;
    public static final int Digit=405;
    public static final int TOK_SWITCHDATABASE=112;
    public static final int TOK_PARTSPEC=11;
    public static final int TOK_BOOLEAN=71;
    public static final int KW_UNSIGNED=383;
    public static final int KW_DATA=191;
    public static final int TOK_LIMIT=150;
    public static final int TOK_TABSORTCOLNAMEASC=137;
    public static final int KW_SHOW=248;
    public static final int KW_DATE=290;
    public static final int KW_INTO=196;
    public static final int KW_OR=360;
    public static final int TOK_TABLEROWFORMATCOLLITEMS=123;
    public static final int KW_VALUE_TYPE=243;
    public static final int KW_ON=314;
    public static final int KW_OF=327;
    public static final int KW_BETWEEN=391;
    public static final int TOK_OP_SUB=32;

        public HiveParser(TokenStream input) {
            super(input);
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return tokenNames; }
    public String getGrammarFileName() { return "/home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g"; }


      Stack msgs = new Stack<String>();


    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start statement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:218:1: statement : ( explainStatement EOF | execStatement EOF );
    public final statement_return statement() throws RecognitionException {
        statement_return retval = new statement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF2=null;
        Token EOF4=null;
        explainStatement_return explainStatement1 = null;

        execStatement_return execStatement3 = null;


        CommonTree EOF2_tree=null;
        CommonTree EOF4_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:219:2: ( explainStatement EOF | execStatement EOF )
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==KW_EXPLAIN) ) {
                alt1=1;
            }
            else if ( (LA1_0==KW_LOAD||LA1_0==KW_CREATE||(LA1_0>=KW_USE && LA1_0<=KW_DROP)||LA1_0==KW_ALTER||(LA1_0>=KW_DESCRIBE && LA1_0<=KW_DESC)||LA1_0==KW_SHOW||LA1_0==KW_FROM||LA1_0==KW_MSCK||LA1_0==KW_MAP||LA1_0==KW_INSERT||LA1_0==KW_SELECT||LA1_0==KW_REDUCE||LA1_0==KW_GRANT||LA1_0==KW_REVOKE) ) {
                alt1=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("218:1: statement : ( explainStatement EOF | execStatement EOF );", 1, 0, input);

                throw nvae;
            }
            switch (alt1) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:219:4: explainStatement EOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_explainStatement_in_statement623);
                    explainStatement1=explainStatement();
                    _fsp--;

                    adaptor.addChild(root_0, explainStatement1.getTree());
                    EOF2=(Token)input.LT(1);
                    match(input,EOF,FOLLOW_EOF_in_statement625); 
                    EOF2_tree = (CommonTree)adaptor.create(EOF2);
                    adaptor.addChild(root_0, EOF2_tree);


                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:220:4: execStatement EOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_execStatement_in_statement630);
                    execStatement3=execStatement();
                    _fsp--;

                    adaptor.addChild(root_0, execStatement3.getTree());
                    EOF4=(Token)input.LT(1);
                    match(input,EOF,FOLLOW_EOF_in_statement632); 
                    EOF4_tree = (CommonTree)adaptor.create(EOF4);
                    adaptor.addChild(root_0, EOF4_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end statement

    public static class explainStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start explainStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:223:1: explainStatement : KW_EXPLAIN (isExtended= KW_EXTENDED )? execStatement -> ^( TOK_EXPLAIN execStatement ( $isExtended)? ) ;
    public final explainStatement_return explainStatement() throws RecognitionException {
        explainStatement_return retval = new explainStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token isExtended=null;
        Token KW_EXPLAIN5=null;
        execStatement_return execStatement6 = null;


        CommonTree isExtended_tree=null;
        CommonTree KW_EXPLAIN5_tree=null;
        RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
        RewriteRuleTokenStream stream_KW_EXPLAIN=new RewriteRuleTokenStream(adaptor,"token KW_EXPLAIN");
        RewriteRuleSubtreeStream stream_execStatement=new RewriteRuleSubtreeStream(adaptor,"rule execStatement");
         msgs.push("explain statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:226:2: ( KW_EXPLAIN (isExtended= KW_EXTENDED )? execStatement -> ^( TOK_EXPLAIN execStatement ( $isExtended)? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:226:4: KW_EXPLAIN (isExtended= KW_EXTENDED )? execStatement
            {
            KW_EXPLAIN5=(Token)input.LT(1);
            match(input,KW_EXPLAIN,FOLLOW_KW_EXPLAIN_in_explainStatement653); 
            stream_KW_EXPLAIN.add(KW_EXPLAIN5);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:226:15: (isExtended= KW_EXTENDED )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==KW_EXTENDED) ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:226:16: isExtended= KW_EXTENDED
                    {
                    isExtended=(Token)input.LT(1);
                    match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_explainStatement658); 
                    stream_KW_EXTENDED.add(isExtended);


                    }
                    break;

            }

            pushFollow(FOLLOW_execStatement_in_explainStatement662);
            execStatement6=execStatement();
            _fsp--;

            stream_execStatement.add(execStatement6.getTree());

            // AST REWRITE
            // elements: isExtended, execStatement
            // token labels: isExtended
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_isExtended=new RewriteRuleTokenStream(adaptor,"token isExtended",isExtended);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 226:55: -> ^( TOK_EXPLAIN execStatement ( $isExtended)? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:226:58: ^( TOK_EXPLAIN execStatement ( $isExtended)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_EXPLAIN, "TOK_EXPLAIN"), root_1);

                adaptor.addChild(root_1, stream_execStatement.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:226:86: ( $isExtended)?
                if ( stream_isExtended.hasNext() ) {
                    adaptor.addChild(root_1, stream_isExtended.next());

                }
                stream_isExtended.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end explainStatement

    public static class execStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start execStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:229:1: execStatement : ( queryStatementExpression | loadStatement | ddlStatement | dclStatement );
    public final execStatement_return execStatement() throws RecognitionException {
        execStatement_return retval = new execStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        queryStatementExpression_return queryStatementExpression7 = null;

        loadStatement_return loadStatement8 = null;

        ddlStatement_return ddlStatement9 = null;

        dclStatement_return dclStatement10 = null;



         msgs.push("statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:232:5: ( queryStatementExpression | loadStatement | ddlStatement | dclStatement )
            int alt3=4;
            switch ( input.LA(1) ) {
            case KW_FROM:
            case KW_MAP:
            case KW_INSERT:
            case KW_SELECT:
            case KW_REDUCE:
                {
                alt3=1;
                }
                break;
            case KW_LOAD:
                {
                alt3=2;
                }
                break;
            case KW_CREATE:
            case KW_USE:
            case KW_DROP:
            case KW_ALTER:
            case KW_DESCRIBE:
            case KW_DESC:
            case KW_MSCK:
                {
                alt3=3;
                }
                break;
            case KW_SHOW:
                {
                int LA3_13 = input.LA(2);

                if ( (LA3_13==KW_TABLE||(LA3_13>=KW_DATABASES && LA3_13<=KW_PARTITIONS)) ) {
                    alt3=3;
                }
                else if ( (LA3_13==Identifier) ) {
                    alt3=4;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("229:1: execStatement : ( queryStatementExpression | loadStatement | ddlStatement | dclStatement );", 3, 13, input);

                    throw nvae;
                }
                }
                break;
            case KW_GRANT:
            case KW_REVOKE:
                {
                alt3=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("229:1: execStatement : ( queryStatementExpression | loadStatement | ddlStatement | dclStatement );", 3, 0, input);

                throw nvae;
            }

            switch (alt3) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:232:7: queryStatementExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_queryStatementExpression_in_execStatement698);
                    queryStatementExpression7=queryStatementExpression();
                    _fsp--;

                    adaptor.addChild(root_0, queryStatementExpression7.getTree());

                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:233:7: loadStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_loadStatement_in_execStatement706);
                    loadStatement8=loadStatement();
                    _fsp--;

                    adaptor.addChild(root_0, loadStatement8.getTree());

                    }
                    break;
                case 3 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:234:7: ddlStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ddlStatement_in_execStatement714);
                    ddlStatement9=ddlStatement();
                    _fsp--;

                    adaptor.addChild(root_0, ddlStatement9.getTree());

                    }
                    break;
                case 4 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:235:7: dclStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dclStatement_in_execStatement722);
                    dclStatement10=dclStatement();
                    _fsp--;

                    adaptor.addChild(root_0, dclStatement10.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end execStatement

    public static class loadStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start loadStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:238:1: loadStatement : KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tabName ) -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ) ;
    public final loadStatement_return loadStatement() throws RecognitionException {
        loadStatement_return retval = new loadStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token islocal=null;
        Token path=null;
        Token isoverwrite=null;
        Token KW_LOAD11=null;
        Token KW_DATA12=null;
        Token KW_INPATH13=null;
        Token KW_INTO14=null;
        Token KW_TABLE15=null;
        tabName_return tab = null;


        CommonTree islocal_tree=null;
        CommonTree path_tree=null;
        CommonTree isoverwrite_tree=null;
        CommonTree KW_LOAD11_tree=null;
        CommonTree KW_DATA12_tree=null;
        CommonTree KW_INPATH13_tree=null;
        CommonTree KW_INTO14_tree=null;
        CommonTree KW_TABLE15_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_INPATH=new RewriteRuleTokenStream(adaptor,"token KW_INPATH");
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
        RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_LOAD=new RewriteRuleTokenStream(adaptor,"token KW_LOAD");
        RewriteRuleTokenStream stream_KW_DATA=new RewriteRuleTokenStream(adaptor,"token KW_DATA");
        RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName");
         msgs.push("load statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:241:5: ( KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tabName ) -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:241:7: KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tabName )
            {
            KW_LOAD11=(Token)input.LT(1);
            match(input,KW_LOAD,FOLLOW_KW_LOAD_in_loadStatement749); 
            stream_KW_LOAD.add(KW_LOAD11);

            KW_DATA12=(Token)input.LT(1);
            match(input,KW_DATA,FOLLOW_KW_DATA_in_loadStatement751); 
            stream_KW_DATA.add(KW_DATA12);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:241:23: (islocal= KW_LOCAL )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==KW_LOCAL) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:241:24: islocal= KW_LOCAL
                    {
                    islocal=(Token)input.LT(1);
                    match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_loadStatement756); 
                    stream_KW_LOCAL.add(islocal);


                    }
                    break;

            }

            KW_INPATH13=(Token)input.LT(1);
            match(input,KW_INPATH,FOLLOW_KW_INPATH_in_loadStatement760); 
            stream_KW_INPATH.add(KW_INPATH13);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:241:53: (path= StringLiteral )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:241:54: path= StringLiteral
            {
            path=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_loadStatement765); 
            stream_StringLiteral.add(path);


            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:241:74: (isoverwrite= KW_OVERWRITE )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==KW_OVERWRITE) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:241:75: isoverwrite= KW_OVERWRITE
                    {
                    isoverwrite=(Token)input.LT(1);
                    match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_loadStatement771); 
                    stream_KW_OVERWRITE.add(isoverwrite);


                    }
                    break;

            }

            KW_INTO14=(Token)input.LT(1);
            match(input,KW_INTO,FOLLOW_KW_INTO_in_loadStatement775); 
            stream_KW_INTO.add(KW_INTO14);

            KW_TABLE15=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_loadStatement777); 
            stream_KW_TABLE.add(KW_TABLE15);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:241:119: (tab= tabName )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:241:120: tab= tabName
            {
            pushFollow(FOLLOW_tabName_in_loadStatement782);
            tab=tabName();
            _fsp--;

            stream_tabName.add(tab.getTree());

            }


            // AST REWRITE
            // elements: isoverwrite, tab, islocal, path
            // token labels: islocal, isoverwrite, path
            // rule labels: retval, tab
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_islocal=new RewriteRuleTokenStream(adaptor,"token islocal",islocal);
            RewriteRuleTokenStream stream_isoverwrite=new RewriteRuleTokenStream(adaptor,"token isoverwrite",isoverwrite);
            RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"token tab",tab!=null?tab.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 242:5: -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:242:8: ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LOAD, "TOK_LOAD"), root_1);

                adaptor.addChild(root_1, stream_path.next());
                adaptor.addChild(root_1, stream_tab.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:242:30: ( $islocal)?
                if ( stream_islocal.hasNext() ) {
                    adaptor.addChild(root_1, stream_islocal.next());

                }
                stream_islocal.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:242:40: ( $isoverwrite)?
                if ( stream_isoverwrite.hasNext() ) {
                    adaptor.addChild(root_1, stream_isoverwrite.next());

                }
                stream_isoverwrite.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end loadStatement

    public static class ddlStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ddlStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:245:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | dropFunctionStatement | createUserStatement | dropUserStatement | alterUserStatement );
    public final ddlStatement_return ddlStatement() throws RecognitionException {
        ddlStatement_return retval = new ddlStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        createDatabaseStatement_return createDatabaseStatement16 = null;

        switchDatabaseStatement_return switchDatabaseStatement17 = null;

        dropDatabaseStatement_return dropDatabaseStatement18 = null;

        createTableStatement_return createTableStatement19 = null;

        dropTableStatement_return dropTableStatement20 = null;

        alterStatement_return alterStatement21 = null;

        descStatement_return descStatement22 = null;

        showStatement_return showStatement23 = null;

        metastoreCheck_return metastoreCheck24 = null;

        createViewStatement_return createViewStatement25 = null;

        dropViewStatement_return dropViewStatement26 = null;

        createFunctionStatement_return createFunctionStatement27 = null;

        dropFunctionStatement_return dropFunctionStatement28 = null;

        createUserStatement_return createUserStatement29 = null;

        dropUserStatement_return dropUserStatement30 = null;

        alterUserStatement_return alterUserStatement31 = null;



         msgs.push("ddl statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:248:5: ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | dropFunctionStatement | createUserStatement | dropUserStatement | alterUserStatement )
            int alt6=16;
            switch ( input.LA(1) ) {
            case KW_CREATE:
                {
                switch ( input.LA(2) ) {
                case KW_VIEW:
                    {
                    alt6=10;
                    }
                    break;
                case KW_TEMPORARY:
                    {
                    alt6=12;
                    }
                    break;
                case KW_TABLE:
                case KW_EXTERNAL:
                    {
                    alt6=4;
                    }
                    break;
                case KW_DATABASE:
                case KW_SCHEMA:
                    {
                    alt6=1;
                    }
                    break;
                case Identifier:
                    {
                    alt6=14;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("245:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | dropFunctionStatement | createUserStatement | dropUserStatement | alterUserStatement );", 6, 1, input);

                    throw nvae;
                }

                }
                break;
            case KW_USE:
                {
                alt6=2;
                }
                break;
            case KW_DROP:
                {
                switch ( input.LA(2) ) {
                case KW_TABLE:
                    {
                    alt6=5;
                    }
                    break;
                case KW_TEMPORARY:
                    {
                    alt6=13;
                    }
                    break;
                case KW_VIEW:
                    {
                    alt6=11;
                    }
                    break;
                case Identifier:
                    {
                    alt6=15;
                    }
                    break;
                case KW_DATABASE:
                case KW_SCHEMA:
                    {
                    alt6=3;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("245:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | dropFunctionStatement | createUserStatement | dropUserStatement | alterUserStatement );", 6, 3, input);

                    throw nvae;
                }

                }
                break;
            case KW_ALTER:
                {
                int LA6_4 = input.LA(2);

                if ( (LA6_4==Identifier) ) {
                    alt6=16;
                }
                else if ( (LA6_4==KW_TABLE||LA6_4==KW_VIEW) ) {
                    alt6=6;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("245:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | dropFunctionStatement | createUserStatement | dropUserStatement | alterUserStatement );", 6, 4, input);

                    throw nvae;
                }
                }
                break;
            case KW_DESCRIBE:
            case KW_DESC:
                {
                alt6=7;
                }
                break;
            case KW_SHOW:
                {
                alt6=8;
                }
                break;
            case KW_MSCK:
                {
                alt6=9;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("245:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | dropFunctionStatement | createUserStatement | dropUserStatement | alterUserStatement );", 6, 0, input);

                throw nvae;
            }

            switch (alt6) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:248:7: createDatabaseStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createDatabaseStatement_in_ddlStatement834);
                    createDatabaseStatement16=createDatabaseStatement();
                    _fsp--;

                    adaptor.addChild(root_0, createDatabaseStatement16.getTree());

                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:249:7: switchDatabaseStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_switchDatabaseStatement_in_ddlStatement842);
                    switchDatabaseStatement17=switchDatabaseStatement();
                    _fsp--;

                    adaptor.addChild(root_0, switchDatabaseStatement17.getTree());

                    }
                    break;
                case 3 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:250:7: dropDatabaseStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dropDatabaseStatement_in_ddlStatement850);
                    dropDatabaseStatement18=dropDatabaseStatement();
                    _fsp--;

                    adaptor.addChild(root_0, dropDatabaseStatement18.getTree());

                    }
                    break;
                case 4 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:251:7: createTableStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createTableStatement_in_ddlStatement858);
                    createTableStatement19=createTableStatement();
                    _fsp--;

                    adaptor.addChild(root_0, createTableStatement19.getTree());

                    }
                    break;
                case 5 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:252:7: dropTableStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dropTableStatement_in_ddlStatement866);
                    dropTableStatement20=dropTableStatement();
                    _fsp--;

                    adaptor.addChild(root_0, dropTableStatement20.getTree());

                    }
                    break;
                case 6 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:253:7: alterStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatement_in_ddlStatement874);
                    alterStatement21=alterStatement();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatement21.getTree());

                    }
                    break;
                case 7 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:254:7: descStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_descStatement_in_ddlStatement882);
                    descStatement22=descStatement();
                    _fsp--;

                    adaptor.addChild(root_0, descStatement22.getTree());

                    }
                    break;
                case 8 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:255:7: showStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_showStatement_in_ddlStatement890);
                    showStatement23=showStatement();
                    _fsp--;

                    adaptor.addChild(root_0, showStatement23.getTree());

                    }
                    break;
                case 9 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:256:7: metastoreCheck
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_metastoreCheck_in_ddlStatement898);
                    metastoreCheck24=metastoreCheck();
                    _fsp--;

                    adaptor.addChild(root_0, metastoreCheck24.getTree());

                    }
                    break;
                case 10 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:257:7: createViewStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createViewStatement_in_ddlStatement906);
                    createViewStatement25=createViewStatement();
                    _fsp--;

                    adaptor.addChild(root_0, createViewStatement25.getTree());

                    }
                    break;
                case 11 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:258:7: dropViewStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dropViewStatement_in_ddlStatement914);
                    dropViewStatement26=dropViewStatement();
                    _fsp--;

                    adaptor.addChild(root_0, dropViewStatement26.getTree());

                    }
                    break;
                case 12 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:259:7: createFunctionStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createFunctionStatement_in_ddlStatement922);
                    createFunctionStatement27=createFunctionStatement();
                    _fsp--;

                    adaptor.addChild(root_0, createFunctionStatement27.getTree());

                    }
                    break;
                case 13 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:260:7: dropFunctionStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dropFunctionStatement_in_ddlStatement930);
                    dropFunctionStatement28=dropFunctionStatement();
                    _fsp--;

                    adaptor.addChild(root_0, dropFunctionStatement28.getTree());

                    }
                    break;
                case 14 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:261:7: createUserStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createUserStatement_in_ddlStatement938);
                    createUserStatement29=createUserStatement();
                    _fsp--;

                    adaptor.addChild(root_0, createUserStatement29.getTree());

                    }
                    break;
                case 15 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:262:7: dropUserStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dropUserStatement_in_ddlStatement946);
                    dropUserStatement30=dropUserStatement();
                    _fsp--;

                    adaptor.addChild(root_0, dropUserStatement30.getTree());

                    }
                    break;
                case 16 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:263:7: alterUserStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterUserStatement_in_ddlStatement954);
                    alterUserStatement31=alterUserStatement();
                    _fsp--;

                    adaptor.addChild(root_0, alterUserStatement31.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end ddlStatement

    public static class dclStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dclStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:266:1: dclStatement : ( grantStatement | revokeStatement | showGrantsStatement );
    public final dclStatement_return dclStatement() throws RecognitionException {
        dclStatement_return retval = new dclStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        grantStatement_return grantStatement32 = null;

        revokeStatement_return revokeStatement33 = null;

        showGrantsStatement_return showGrantsStatement34 = null;



         msgs.push("dcl statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:269:5: ( grantStatement | revokeStatement | showGrantsStatement )
            int alt7=3;
            switch ( input.LA(1) ) {
            case KW_GRANT:
                {
                alt7=1;
                }
                break;
            case KW_REVOKE:
                {
                alt7=2;
                }
                break;
            case KW_SHOW:
                {
                alt7=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("266:1: dclStatement : ( grantStatement | revokeStatement | showGrantsStatement );", 7, 0, input);

                throw nvae;
            }

            switch (alt7) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:269:7: grantStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_grantStatement_in_dclStatement981);
                    grantStatement32=grantStatement();
                    _fsp--;

                    adaptor.addChild(root_0, grantStatement32.getTree());

                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:270:7: revokeStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_revokeStatement_in_dclStatement989);
                    revokeStatement33=revokeStatement();
                    _fsp--;

                    adaptor.addChild(root_0, revokeStatement33.getTree());

                    }
                    break;
                case 3 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:271:7: showGrantsStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_showGrantsStatement_in_dclStatement997);
                    showGrantsStatement34=showGrantsStatement();
                    _fsp--;

                    adaptor.addChild(root_0, showGrantsStatement34.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dclStatement

    public static class ifExists_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ifExists
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:274:1: ifExists : KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) ;
    public final ifExists_return ifExists() throws RecognitionException {
        ifExists_return retval = new ifExists_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_IF35=null;
        Token KW_EXISTS36=null;

        CommonTree KW_IF35_tree=null;
        CommonTree KW_EXISTS36_tree=null;
        RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");
        RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");

         msgs.push("if exists clause"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:277:5: ( KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:277:7: KW_IF KW_EXISTS
            {
            KW_IF35=(Token)input.LT(1);
            match(input,KW_IF,FOLLOW_KW_IF_in_ifExists1024); 
            stream_KW_IF.add(KW_IF35);

            KW_EXISTS36=(Token)input.LT(1);
            match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifExists1026); 
            stream_KW_EXISTS.add(KW_EXISTS36);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 278:5: -> ^( TOK_IFEXISTS )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:278:8: ^( TOK_IFEXISTS )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_IFEXISTS, "TOK_IFEXISTS"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end ifExists

    public static class ifNotExists_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ifNotExists
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:281:1: ifNotExists : KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) ;
    public final ifNotExists_return ifNotExists() throws RecognitionException {
        ifNotExists_return retval = new ifNotExists_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_IF37=null;
        Token KW_NOT38=null;
        Token KW_EXISTS39=null;

        CommonTree KW_IF37_tree=null;
        CommonTree KW_NOT38_tree=null;
        CommonTree KW_EXISTS39_tree=null;
        RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
        RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");

         msgs.push("if not exists clause"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:284:5: ( KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:284:7: KW_IF KW_NOT KW_EXISTS
            {
            KW_IF37=(Token)input.LT(1);
            match(input,KW_IF,FOLLOW_KW_IF_in_ifNotExists1063); 
            stream_KW_IF.add(KW_IF37);

            KW_NOT38=(Token)input.LT(1);
            match(input,KW_NOT,FOLLOW_KW_NOT_in_ifNotExists1065); 
            stream_KW_NOT.add(KW_NOT38);

            KW_EXISTS39=(Token)input.LT(1);
            match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifNotExists1067); 
            stream_KW_EXISTS.add(KW_EXISTS39);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 285:5: -> ^( TOK_IFNOTEXISTS )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:285:8: ^( TOK_IFNOTEXISTS )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_IFNOTEXISTS, "TOK_IFNOTEXISTS"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end ifNotExists

    public static class createDatabaseStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start createDatabaseStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:288:1: createDatabaseStatement : KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= Identifier ( databaseComment )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( databaseComment )? ) ;
    public final createDatabaseStatement_return createDatabaseStatement() throws RecognitionException {
        createDatabaseStatement_return retval = new createDatabaseStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token KW_CREATE40=null;
        Token KW_DATABASE41=null;
        Token KW_SCHEMA42=null;
        ifNotExists_return ifNotExists43 = null;

        databaseComment_return databaseComment44 = null;


        CommonTree name_tree=null;
        CommonTree KW_CREATE40_tree=null;
        CommonTree KW_DATABASE41_tree=null;
        CommonTree KW_SCHEMA42_tree=null;
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
        RewriteRuleSubtreeStream stream_databaseComment=new RewriteRuleSubtreeStream(adaptor,"rule databaseComment");
         msgs.push("create database statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:291:5: ( KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= Identifier ( databaseComment )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( databaseComment )? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:291:7: KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= Identifier ( databaseComment )?
            {
            KW_CREATE40=(Token)input.LT(1);
            match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createDatabaseStatement1104); 
            stream_KW_CREATE.add(KW_CREATE40);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:291:17: ( KW_DATABASE | KW_SCHEMA )
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==KW_DATABASE) ) {
                alt8=1;
            }
            else if ( (LA8_0==KW_SCHEMA) ) {
                alt8=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("291:17: ( KW_DATABASE | KW_SCHEMA )", 8, 0, input);

                throw nvae;
            }
            switch (alt8) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:291:18: KW_DATABASE
                    {
                    KW_DATABASE41=(Token)input.LT(1);
                    match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_createDatabaseStatement1107); 
                    stream_KW_DATABASE.add(KW_DATABASE41);


                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:291:30: KW_SCHEMA
                    {
                    KW_SCHEMA42=(Token)input.LT(1);
                    match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_createDatabaseStatement1109); 
                    stream_KW_SCHEMA.add(KW_SCHEMA42);


                    }
                    break;

            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:292:9: ( ifNotExists )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==KW_IF) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:292:9: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_createDatabaseStatement1120);
                    ifNotExists43=ifNotExists();
                    _fsp--;

                    stream_ifNotExists.add(ifNotExists43.getTree());

                    }
                    break;

            }

            name=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_createDatabaseStatement1133); 
            stream_Identifier.add(name);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:294:9: ( databaseComment )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==KW_COMMENT) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:294:9: databaseComment
                    {
                    pushFollow(FOLLOW_databaseComment_in_createDatabaseStatement1143);
                    databaseComment44=databaseComment();
                    _fsp--;

                    stream_databaseComment.add(databaseComment44.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: databaseComment, ifNotExists, name
            // token labels: name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 295:5: -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( databaseComment )? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:295:8: ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( databaseComment )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CREATEDATABASE, "TOK_CREATEDATABASE"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:295:35: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.next());

                }
                stream_ifNotExists.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:295:48: ( databaseComment )?
                if ( stream_databaseComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseComment.next());

                }
                stream_databaseComment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end createDatabaseStatement

    public static class switchDatabaseStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start switchDatabaseStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:298:1: switchDatabaseStatement : KW_USE Identifier -> ^( TOK_SWITCHDATABASE Identifier ) ;
    public final switchDatabaseStatement_return switchDatabaseStatement() throws RecognitionException {
        switchDatabaseStatement_return retval = new switchDatabaseStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_USE45=null;
        Token Identifier46=null;

        CommonTree KW_USE45_tree=null;
        CommonTree Identifier46_tree=null;
        RewriteRuleTokenStream stream_KW_USE=new RewriteRuleTokenStream(adaptor,"token KW_USE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("switch database statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:301:5: ( KW_USE Identifier -> ^( TOK_SWITCHDATABASE Identifier ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:301:7: KW_USE Identifier
            {
            KW_USE45=(Token)input.LT(1);
            match(input,KW_USE,FOLLOW_KW_USE_in_switchDatabaseStatement1190); 
            stream_KW_USE.add(KW_USE45);

            Identifier46=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_switchDatabaseStatement1192); 
            stream_Identifier.add(Identifier46);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 302:5: -> ^( TOK_SWITCHDATABASE Identifier )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:302:8: ^( TOK_SWITCHDATABASE Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SWITCHDATABASE, "TOK_SWITCHDATABASE"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end switchDatabaseStatement

    public static class dropDatabaseStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropDatabaseStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:305:1: dropDatabaseStatement : KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? Identifier -> ^( TOK_DROPDATABASE Identifier ( ifExists )? ) ;
    public final dropDatabaseStatement_return dropDatabaseStatement() throws RecognitionException {
        dropDatabaseStatement_return retval = new dropDatabaseStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_DROP47=null;
        Token KW_DATABASE48=null;
        Token KW_SCHEMA49=null;
        Token Identifier51=null;
        ifExists_return ifExists50 = null;


        CommonTree KW_DROP47_tree=null;
        CommonTree KW_DATABASE48_tree=null;
        CommonTree KW_SCHEMA49_tree=null;
        CommonTree Identifier51_tree=null;
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("drop database statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:308:5: ( KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? Identifier -> ^( TOK_DROPDATABASE Identifier ( ifExists )? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:308:7: KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? Identifier
            {
            KW_DROP47=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_dropDatabaseStatement1231); 
            stream_KW_DROP.add(KW_DROP47);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:308:15: ( KW_DATABASE | KW_SCHEMA )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==KW_DATABASE) ) {
                alt11=1;
            }
            else if ( (LA11_0==KW_SCHEMA) ) {
                alt11=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("308:15: ( KW_DATABASE | KW_SCHEMA )", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:308:16: KW_DATABASE
                    {
                    KW_DATABASE48=(Token)input.LT(1);
                    match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_dropDatabaseStatement1234); 
                    stream_KW_DATABASE.add(KW_DATABASE48);


                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:308:28: KW_SCHEMA
                    {
                    KW_SCHEMA49=(Token)input.LT(1);
                    match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_dropDatabaseStatement1236); 
                    stream_KW_SCHEMA.add(KW_SCHEMA49);


                    }
                    break;

            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:308:39: ( ifExists )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==KW_IF) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:308:39: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropDatabaseStatement1239);
                    ifExists50=ifExists();
                    _fsp--;

                    stream_ifExists.add(ifExists50.getTree());

                    }
                    break;

            }

            Identifier51=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_dropDatabaseStatement1242); 
            stream_Identifier.add(Identifier51);


            // AST REWRITE
            // elements: ifExists, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 309:5: -> ^( TOK_DROPDATABASE Identifier ( ifExists )? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:309:8: ^( TOK_DROPDATABASE Identifier ( ifExists )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DROPDATABASE, "TOK_DROPDATABASE"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:309:38: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.next());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropDatabaseStatement

    public static class databaseComment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start databaseComment
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:312:1: databaseComment : KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) ;
    public final databaseComment_return databaseComment() throws RecognitionException {
        databaseComment_return retval = new databaseComment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token comment=null;
        Token KW_COMMENT52=null;

        CommonTree comment_tree=null;
        CommonTree KW_COMMENT52_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

         msgs.push("database's comment"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:315:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:315:7: KW_COMMENT comment= StringLiteral
            {
            KW_COMMENT52=(Token)input.LT(1);
            match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_databaseComment1284); 
            stream_KW_COMMENT.add(KW_COMMENT52);

            comment=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_databaseComment1288); 
            stream_StringLiteral.add(comment);


            // AST REWRITE
            // elements: comment
            // token labels: comment
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 316:5: -> ^( TOK_DATABASECOMMENT $comment)
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:316:8: ^( TOK_DATABASECOMMENT $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DATABASECOMMENT, "TOK_DATABASECOMMENT"), root_1);

                adaptor.addChild(root_1, stream_comment.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end databaseComment

    public static class createTableStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start createTableStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:319:1: createTableStatement : KW_CREATE (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= Identifier (like= KW_LIKE likeName= Identifier ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? ) -> ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? ) ;
    public final createTableStatement_return createTableStatement() throws RecognitionException {
        createTableStatement_return retval = new createTableStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ext=null;
        Token name=null;
        Token like=null;
        Token likeName=null;
        Token KW_CREATE53=null;
        Token KW_TABLE54=null;
        Token LPAREN57=null;
        Token RPAREN59=null;
        Token KW_AS67=null;
        ifNotExists_return ifNotExists55 = null;

        tableLocation_return tableLocation56 = null;

        columnNameTypeList_return columnNameTypeList58 = null;

        tableComment_return tableComment60 = null;

        tablePartition_return tablePartition61 = null;

        tableBuckets_return tableBuckets62 = null;

        tableRowFormat_return tableRowFormat63 = null;

        tableFileFormat_return tableFileFormat64 = null;

        tableLocation_return tableLocation65 = null;

        tablePropertiesPrefixed_return tablePropertiesPrefixed66 = null;

        selectStatement_return selectStatement68 = null;


        CommonTree ext_tree=null;
        CommonTree name_tree=null;
        CommonTree like_tree=null;
        CommonTree likeName_tree=null;
        CommonTree KW_CREATE53_tree=null;
        CommonTree KW_TABLE54_tree=null;
        CommonTree LPAREN57_tree=null;
        CommonTree RPAREN59_tree=null;
        CommonTree KW_AS67_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
        RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
        RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");
        RewriteRuleSubtreeStream stream_tablePartition=new RewriteRuleSubtreeStream(adaptor,"rule tablePartition");
        RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
        RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
        RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
        RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
        RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
         msgs.push("create table statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:322:5: ( KW_CREATE (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= Identifier (like= KW_LIKE likeName= Identifier ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? ) -> ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:322:7: KW_CREATE (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= Identifier (like= KW_LIKE likeName= Identifier ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? )
            {
            KW_CREATE53=(Token)input.LT(1);
            match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createTableStatement1328); 
            stream_KW_CREATE.add(KW_CREATE53);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:322:17: (ext= KW_EXTERNAL )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==KW_EXTERNAL) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:322:18: ext= KW_EXTERNAL
                    {
                    ext=(Token)input.LT(1);
                    match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_createTableStatement1333); 
                    stream_KW_EXTERNAL.add(ext);


                    }
                    break;

            }

            KW_TABLE54=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_createTableStatement1337); 
            stream_KW_TABLE.add(KW_TABLE54);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:322:45: ( ifNotExists )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==KW_IF) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:322:45: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_createTableStatement1339);
                    ifNotExists55=ifNotExists();
                    _fsp--;

                    stream_ifNotExists.add(ifNotExists55.getTree());

                    }
                    break;

            }

            name=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_createTableStatement1344); 
            stream_Identifier.add(name);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:323:7: (like= KW_LIKE likeName= Identifier ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? )
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==KW_LIKE) ) {
                alt25=1;
            }
            else if ( (LA25_0==EOF||LA25_0==KW_COMMENT||LA25_0==LPAREN||LA25_0==KW_AS||LA25_0==KW_LOCATION||LA25_0==KW_TBLPROPERTIES||(LA25_0>=KW_PARTITIONED && LA25_0<=KW_CLUSTERED)||LA25_0==KW_ROW||LA25_0==KW_STORED) ) {
                alt25=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("323:7: (like= KW_LIKE likeName= Identifier ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? )", 25, 0, input);

                throw nvae;
            }
            switch (alt25) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:323:10: like= KW_LIKE likeName= Identifier ( tableLocation )?
                    {
                    like=(Token)input.LT(1);
                    match(input,KW_LIKE,FOLLOW_KW_LIKE_in_createTableStatement1357); 
                    stream_KW_LIKE.add(like);

                    likeName=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_createTableStatement1361); 
                    stream_Identifier.add(likeName);

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:324:10: ( tableLocation )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( (LA15_0==KW_LOCATION) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:324:10: tableLocation
                            {
                            pushFollow(FOLLOW_tableLocation_in_createTableStatement1372);
                            tableLocation56=tableLocation();
                            _fsp--;

                            stream_tableLocation.add(tableLocation56.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:325:10: ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )?
                    {
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:325:10: ( LPAREN columnNameTypeList RPAREN )?
                    int alt16=2;
                    int LA16_0 = input.LA(1);

                    if ( (LA16_0==LPAREN) ) {
                        alt16=1;
                    }
                    switch (alt16) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:325:11: LPAREN columnNameTypeList RPAREN
                            {
                            LPAREN57=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_createTableStatement1385); 
                            stream_LPAREN.add(LPAREN57);

                            pushFollow(FOLLOW_columnNameTypeList_in_createTableStatement1387);
                            columnNameTypeList58=columnNameTypeList();
                            _fsp--;

                            stream_columnNameTypeList.add(columnNameTypeList58.getTree());
                            RPAREN59=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_createTableStatement1389); 
                            stream_RPAREN.add(RPAREN59);


                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:326:10: ( tableComment )?
                    int alt17=2;
                    int LA17_0 = input.LA(1);

                    if ( (LA17_0==KW_COMMENT) ) {
                        alt17=1;
                    }
                    switch (alt17) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:326:10: tableComment
                            {
                            pushFollow(FOLLOW_tableComment_in_createTableStatement1402);
                            tableComment60=tableComment();
                            _fsp--;

                            stream_tableComment.add(tableComment60.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:327:10: ( tablePartition )?
                    int alt18=2;
                    int LA18_0 = input.LA(1);

                    if ( (LA18_0==KW_PARTITIONED) ) {
                        alt18=1;
                    }
                    switch (alt18) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:327:10: tablePartition
                            {
                            pushFollow(FOLLOW_tablePartition_in_createTableStatement1414);
                            tablePartition61=tablePartition();
                            _fsp--;

                            stream_tablePartition.add(tablePartition61.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:328:10: ( tableBuckets )?
                    int alt19=2;
                    int LA19_0 = input.LA(1);

                    if ( (LA19_0==KW_CLUSTERED) ) {
                        alt19=1;
                    }
                    switch (alt19) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:328:10: tableBuckets
                            {
                            pushFollow(FOLLOW_tableBuckets_in_createTableStatement1426);
                            tableBuckets62=tableBuckets();
                            _fsp--;

                            stream_tableBuckets.add(tableBuckets62.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:329:10: ( tableRowFormat )?
                    int alt20=2;
                    int LA20_0 = input.LA(1);

                    if ( (LA20_0==KW_ROW) ) {
                        alt20=1;
                    }
                    switch (alt20) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:329:10: tableRowFormat
                            {
                            pushFollow(FOLLOW_tableRowFormat_in_createTableStatement1438);
                            tableRowFormat63=tableRowFormat();
                            _fsp--;

                            stream_tableRowFormat.add(tableRowFormat63.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:330:10: ( tableFileFormat )?
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==KW_STORED) ) {
                        alt21=1;
                    }
                    switch (alt21) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:330:10: tableFileFormat
                            {
                            pushFollow(FOLLOW_tableFileFormat_in_createTableStatement1450);
                            tableFileFormat64=tableFileFormat();
                            _fsp--;

                            stream_tableFileFormat.add(tableFileFormat64.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:331:10: ( tableLocation )?
                    int alt22=2;
                    int LA22_0 = input.LA(1);

                    if ( (LA22_0==KW_LOCATION) ) {
                        alt22=1;
                    }
                    switch (alt22) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:331:10: tableLocation
                            {
                            pushFollow(FOLLOW_tableLocation_in_createTableStatement1462);
                            tableLocation65=tableLocation();
                            _fsp--;

                            stream_tableLocation.add(tableLocation65.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:332:10: ( tablePropertiesPrefixed )?
                    int alt23=2;
                    int LA23_0 = input.LA(1);

                    if ( (LA23_0==KW_TBLPROPERTIES) ) {
                        alt23=1;
                    }
                    switch (alt23) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:332:10: tablePropertiesPrefixed
                            {
                            pushFollow(FOLLOW_tablePropertiesPrefixed_in_createTableStatement1474);
                            tablePropertiesPrefixed66=tablePropertiesPrefixed();
                            _fsp--;

                            stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed66.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:333:10: ( KW_AS selectStatement )?
                    int alt24=2;
                    int LA24_0 = input.LA(1);

                    if ( (LA24_0==KW_AS) ) {
                        alt24=1;
                    }
                    switch (alt24) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:333:11: KW_AS selectStatement
                            {
                            KW_AS67=(Token)input.LT(1);
                            match(input,KW_AS,FOLLOW_KW_AS_in_createTableStatement1487); 
                            stream_KW_AS.add(KW_AS67);

                            pushFollow(FOLLOW_selectStatement_in_createTableStatement1489);
                            selectStatement68=selectStatement();
                            _fsp--;

                            stream_selectStatement.add(selectStatement68.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: ext, columnNameTypeList, likeName, tableRowFormat, tableComment, name, tableLocation, tablePartition, selectStatement, tableFileFormat, tablePropertiesPrefixed, ifNotExists, tableBuckets
            // token labels: name, likeName, ext
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_likeName=new RewriteRuleTokenStream(adaptor,"token likeName",likeName);
            RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 335:5: -> ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:335:8: ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CREATETABLE, "TOK_CREATETABLE"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:335:32: ( $ext)?
                if ( stream_ext.hasNext() ) {
                    adaptor.addChild(root_1, stream_ext.next());

                }
                stream_ext.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:335:38: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.next());

                }
                stream_ifNotExists.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:336:10: ^( TOK_LIKETABLE ( $likeName)? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LIKETABLE, "TOK_LIKETABLE"), root_2);

                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:336:26: ( $likeName)?
                if ( stream_likeName.hasNext() ) {
                    adaptor.addChild(root_2, stream_likeName.next());

                }
                stream_likeName.reset();

                adaptor.addChild(root_1, root_2);
                }
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:337:10: ( columnNameTypeList )?
                if ( stream_columnNameTypeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameTypeList.next());

                }
                stream_columnNameTypeList.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:338:10: ( tableComment )?
                if ( stream_tableComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableComment.next());

                }
                stream_tableComment.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:339:10: ( tablePartition )?
                if ( stream_tablePartition.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePartition.next());

                }
                stream_tablePartition.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:340:10: ( tableBuckets )?
                if ( stream_tableBuckets.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableBuckets.next());

                }
                stream_tableBuckets.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:341:10: ( tableRowFormat )?
                if ( stream_tableRowFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormat.next());

                }
                stream_tableRowFormat.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:342:10: ( tableFileFormat )?
                if ( stream_tableFileFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableFileFormat.next());

                }
                stream_tableFileFormat.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:343:10: ( tableLocation )?
                if ( stream_tableLocation.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableLocation.next());

                }
                stream_tableLocation.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:344:10: ( tablePropertiesPrefixed )?
                if ( stream_tablePropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePropertiesPrefixed.next());

                }
                stream_tablePropertiesPrefixed.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:345:10: ( selectStatement )?
                if ( stream_selectStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_selectStatement.next());

                }
                stream_selectStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end createTableStatement

    public static class dropTableStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropTableStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:349:1: dropTableStatement : KW_DROP KW_TABLE Identifier -> ^( TOK_DROPTABLE Identifier ) ;
    public final dropTableStatement_return dropTableStatement() throws RecognitionException {
        dropTableStatement_return retval = new dropTableStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_DROP69=null;
        Token KW_TABLE70=null;
        Token Identifier71=null;

        CommonTree KW_DROP69_tree=null;
        CommonTree KW_TABLE70_tree=null;
        CommonTree Identifier71_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("drop statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:352:5: ( KW_DROP KW_TABLE Identifier -> ^( TOK_DROPTABLE Identifier ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:352:7: KW_DROP KW_TABLE Identifier
            {
            KW_DROP69=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_dropTableStatement1680); 
            stream_KW_DROP.add(KW_DROP69);

            KW_TABLE70=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_dropTableStatement1682); 
            stream_KW_TABLE.add(KW_TABLE70);

            Identifier71=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_dropTableStatement1684); 
            stream_Identifier.add(Identifier71);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 352:36: -> ^( TOK_DROPTABLE Identifier )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:352:39: ^( TOK_DROPTABLE Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DROPTABLE, "TOK_DROPTABLE"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropTableStatement

    public static class alterStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:355:1: alterStatement : KW_ALTER ( KW_TABLE alterTableStatementSuffix | KW_VIEW alterViewStatementSuffix ) ;
    public final alterStatement_return alterStatement() throws RecognitionException {
        alterStatement_return retval = new alterStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ALTER72=null;
        Token KW_TABLE73=null;
        Token KW_VIEW75=null;
        alterTableStatementSuffix_return alterTableStatementSuffix74 = null;

        alterViewStatementSuffix_return alterViewStatementSuffix76 = null;


        CommonTree KW_ALTER72_tree=null;
        CommonTree KW_TABLE73_tree=null;
        CommonTree KW_VIEW75_tree=null;

         msgs.push("alter statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:358:5: ( KW_ALTER ( KW_TABLE alterTableStatementSuffix | KW_VIEW alterViewStatementSuffix ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:358:7: KW_ALTER ( KW_TABLE alterTableStatementSuffix | KW_VIEW alterViewStatementSuffix )
            {
            root_0 = (CommonTree)adaptor.nil();

            KW_ALTER72=(Token)input.LT(1);
            match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement1720); 
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:359:9: ( KW_TABLE alterTableStatementSuffix | KW_VIEW alterViewStatementSuffix )
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==KW_TABLE) ) {
                alt26=1;
            }
            else if ( (LA26_0==KW_VIEW) ) {
                alt26=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("359:9: ( KW_TABLE alterTableStatementSuffix | KW_VIEW alterViewStatementSuffix )", 26, 0, input);

                throw nvae;
            }
            switch (alt26) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:360:13: KW_TABLE alterTableStatementSuffix
                    {
                    KW_TABLE73=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_alterStatement1745); 
                    pushFollow(FOLLOW_alterTableStatementSuffix_in_alterStatement1748);
                    alterTableStatementSuffix74=alterTableStatementSuffix();
                    _fsp--;

                    adaptor.addChild(root_0, alterTableStatementSuffix74.getTree());

                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:362:13: KW_VIEW alterViewStatementSuffix
                    {
                    KW_VIEW75=(Token)input.LT(1);
                    match(input,KW_VIEW,FOLLOW_KW_VIEW_in_alterStatement1772); 
                    pushFollow(FOLLOW_alterViewStatementSuffix_in_alterStatement1775);
                    alterViewStatementSuffix76=alterViewStatementSuffix();
                    _fsp--;

                    adaptor.addChild(root_0, alterViewStatementSuffix76.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatement

    public static class alterTableStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterTableStatementSuffix
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:366:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterStatementSuffixSerdeProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby );
    public final alterTableStatementSuffix_return alterTableStatementSuffix() throws RecognitionException {
        alterTableStatementSuffix_return retval = new alterTableStatementSuffix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        alterStatementSuffixRename_return alterStatementSuffixRename77 = null;

        alterStatementSuffixAddCol_return alterStatementSuffixAddCol78 = null;

        alterStatementSuffixRenameCol_return alterStatementSuffixRenameCol79 = null;

        alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions80 = null;

        alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions81 = null;

        alterStatementSuffixTouch_return alterStatementSuffixTouch82 = null;

        alterStatementSuffixArchive_return alterStatementSuffixArchive83 = null;

        alterStatementSuffixUnArchive_return alterStatementSuffixUnArchive84 = null;

        alterStatementSuffixProperties_return alterStatementSuffixProperties85 = null;

        alterStatementSuffixSerdeProperties_return alterStatementSuffixSerdeProperties86 = null;

        alterTblPartitionStatement_return alterTblPartitionStatement87 = null;

        alterStatementSuffixClusterbySortby_return alterStatementSuffixClusterbySortby88 = null;



         msgs.push("alter table statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:369:5: ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterStatementSuffixSerdeProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby )
            int alt27=12;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==Identifier) ) {
                switch ( input.LA(2) ) {
                case KW_RENAME:
                    {
                    alt27=1;
                    }
                    break;
                case KW_ARCHIVE:
                    {
                    alt27=7;
                    }
                    break;
                case KW_TOUCH:
                    {
                    alt27=6;
                    }
                    break;
                case KW_DROP:
                    {
                    alt27=4;
                    }
                    break;
                case KW_UNARCHIVE:
                    {
                    alt27=8;
                    }
                    break;
                case KW_SET:
                    {
                    switch ( input.LA(3) ) {
                    case KW_SERDE:
                    case KW_SERDEPROPERTIES:
                        {
                        alt27=10;
                        }
                        break;
                    case KW_LOCATION:
                    case KW_FILEFORMAT:
                        {
                        alt27=11;
                        }
                        break;
                    case KW_TBLPROPERTIES:
                        {
                        alt27=9;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("366:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterStatementSuffixSerdeProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby );", 27, 7, input);

                        throw nvae;
                    }

                    }
                    break;
                case KW_CHANGE:
                    {
                    alt27=3;
                    }
                    break;
                case KW_ADD:
                    {
                    int LA27_9 = input.LA(3);

                    if ( (LA27_9==KW_COLUMNS) ) {
                        alt27=2;
                    }
                    else if ( (LA27_9==KW_IF||LA27_9==KW_PARTITION) ) {
                        alt27=5;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("366:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterStatementSuffixSerdeProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby );", 27, 9, input);

                        throw nvae;
                    }
                    }
                    break;
                case KW_PARTITION:
                    {
                    alt27=11;
                    }
                    break;
                case KW_REPLACE:
                    {
                    alt27=2;
                    }
                    break;
                case KW_CLUSTERED:
                    {
                    alt27=12;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("366:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterStatementSuffixSerdeProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby );", 27, 1, input);

                    throw nvae;
                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("366:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterStatementSuffixSerdeProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby );", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:369:7: alterStatementSuffixRename
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix1812);
                    alterStatementSuffixRename77=alterStatementSuffixRename();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixRename77.getTree());

                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:370:7: alterStatementSuffixAddCol
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixAddCol_in_alterTableStatementSuffix1820);
                    alterStatementSuffixAddCol78=alterStatementSuffixAddCol();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixAddCol78.getTree());

                    }
                    break;
                case 3 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:371:7: alterStatementSuffixRenameCol
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixRenameCol_in_alterTableStatementSuffix1828);
                    alterStatementSuffixRenameCol79=alterStatementSuffixRenameCol();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixRenameCol79.getTree());

                    }
                    break;
                case 4 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:372:7: alterStatementSuffixDropPartitions
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix1836);
                    alterStatementSuffixDropPartitions80=alterStatementSuffixDropPartitions();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixDropPartitions80.getTree());

                    }
                    break;
                case 5 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:373:7: alterStatementSuffixAddPartitions
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix1844);
                    alterStatementSuffixAddPartitions81=alterStatementSuffixAddPartitions();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixAddPartitions81.getTree());

                    }
                    break;
                case 6 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:374:7: alterStatementSuffixTouch
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix1852);
                    alterStatementSuffixTouch82=alterStatementSuffixTouch();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixTouch82.getTree());

                    }
                    break;
                case 7 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:375:7: alterStatementSuffixArchive
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix1860);
                    alterStatementSuffixArchive83=alterStatementSuffixArchive();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixArchive83.getTree());

                    }
                    break;
                case 8 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:376:7: alterStatementSuffixUnArchive
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix1868);
                    alterStatementSuffixUnArchive84=alterStatementSuffixUnArchive();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixUnArchive84.getTree());

                    }
                    break;
                case 9 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:377:7: alterStatementSuffixProperties
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix1876);
                    alterStatementSuffixProperties85=alterStatementSuffixProperties();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixProperties85.getTree());

                    }
                    break;
                case 10 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:378:7: alterStatementSuffixSerdeProperties
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixSerdeProperties_in_alterTableStatementSuffix1884);
                    alterStatementSuffixSerdeProperties86=alterStatementSuffixSerdeProperties();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixSerdeProperties86.getTree());

                    }
                    break;
                case 11 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:379:7: alterTblPartitionStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterTblPartitionStatement_in_alterTableStatementSuffix1892);
                    alterTblPartitionStatement87=alterTblPartitionStatement();
                    _fsp--;

                    adaptor.addChild(root_0, alterTblPartitionStatement87.getTree());

                    }
                    break;
                case 12 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:380:7: alterStatementSuffixClusterbySortby
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixClusterbySortby_in_alterTableStatementSuffix1900);
                    alterStatementSuffixClusterbySortby88=alterStatementSuffixClusterbySortby();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixClusterbySortby88.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterTableStatementSuffix

    public static class alterViewStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterViewStatementSuffix
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:383:1: alterViewStatementSuffix : alterViewSuffixProperties ;
    public final alterViewStatementSuffix_return alterViewStatementSuffix() throws RecognitionException {
        alterViewStatementSuffix_return retval = new alterViewStatementSuffix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        alterViewSuffixProperties_return alterViewSuffixProperties89 = null;



         msgs.push("alter view statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:386:5: ( alterViewSuffixProperties )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:386:7: alterViewSuffixProperties
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix1927);
            alterViewSuffixProperties89=alterViewSuffixProperties();
            _fsp--;

            adaptor.addChild(root_0, alterViewSuffixProperties89.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterViewStatementSuffix

    public static class alterStatementSuffixRename_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixRename
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:389:1: alterStatementSuffixRename : oldName= Identifier KW_RENAME KW_TO newName= Identifier -> ^( TOK_ALTERTABLE_RENAME $oldName $newName) ;
    public final alterStatementSuffixRename_return alterStatementSuffixRename() throws RecognitionException {
        alterStatementSuffixRename_return retval = new alterStatementSuffixRename_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token oldName=null;
        Token newName=null;
        Token KW_RENAME90=null;
        Token KW_TO91=null;

        CommonTree oldName_tree=null;
        CommonTree newName_tree=null;
        CommonTree KW_RENAME90_tree=null;
        CommonTree KW_TO91_tree=null;
        RewriteRuleTokenStream stream_KW_RENAME=new RewriteRuleTokenStream(adaptor,"token KW_RENAME");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");

         msgs.push("rename statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:392:5: (oldName= Identifier KW_RENAME KW_TO newName= Identifier -> ^( TOK_ALTERTABLE_RENAME $oldName $newName) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:392:7: oldName= Identifier KW_RENAME KW_TO newName= Identifier
            {
            oldName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRename1956); 
            stream_Identifier.add(oldName);

            KW_RENAME90=(Token)input.LT(1);
            match(input,KW_RENAME,FOLLOW_KW_RENAME_in_alterStatementSuffixRename1958); 
            stream_KW_RENAME.add(KW_RENAME90);

            KW_TO91=(Token)input.LT(1);
            match(input,KW_TO,FOLLOW_KW_TO_in_alterStatementSuffixRename1960); 
            stream_KW_TO.add(KW_TO91);

            newName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRename1964); 
            stream_Identifier.add(newName);


            // AST REWRITE
            // elements: oldName, newName
            // token labels: newName, oldName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_newName=new RewriteRuleTokenStream(adaptor,"token newName",newName);
            RewriteRuleTokenStream stream_oldName=new RewriteRuleTokenStream(adaptor,"token oldName",oldName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 393:5: -> ^( TOK_ALTERTABLE_RENAME $oldName $newName)
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:393:8: ^( TOK_ALTERTABLE_RENAME $oldName $newName)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_RENAME, "TOK_ALTERTABLE_RENAME"), root_1);

                adaptor.addChild(root_1, stream_oldName.next());
                adaptor.addChild(root_1, stream_newName.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixRename

    public static class alterStatementSuffixAddCol_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixAddCol
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:396:1: alterStatementSuffixAddCol : Identifier (add= KW_ADD | replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList ) -> ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList ) ;
    public final alterStatementSuffixAddCol_return alterStatementSuffixAddCol() throws RecognitionException {
        alterStatementSuffixAddCol_return retval = new alterStatementSuffixAddCol_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token add=null;
        Token replace=null;
        Token Identifier92=null;
        Token KW_COLUMNS93=null;
        Token LPAREN94=null;
        Token RPAREN96=null;
        columnNameTypeList_return columnNameTypeList95 = null;


        CommonTree add_tree=null;
        CommonTree replace_tree=null;
        CommonTree Identifier92_tree=null;
        CommonTree KW_COLUMNS93_tree=null;
        CommonTree LPAREN94_tree=null;
        CommonTree RPAREN96_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
        RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
         msgs.push("add column statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:399:5: ( Identifier (add= KW_ADD | replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList ) -> ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:399:7: Identifier (add= KW_ADD | replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN
            {
            Identifier92=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixAddCol2007); 
            stream_Identifier.add(Identifier92);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:399:18: (add= KW_ADD | replace= KW_REPLACE )
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==KW_ADD) ) {
                alt28=1;
            }
            else if ( (LA28_0==KW_REPLACE) ) {
                alt28=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("399:18: (add= KW_ADD | replace= KW_REPLACE )", 28, 0, input);

                throw nvae;
            }
            switch (alt28) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:399:19: add= KW_ADD
                    {
                    add=(Token)input.LT(1);
                    match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddCol2012); 
                    stream_KW_ADD.add(add);


                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:399:32: replace= KW_REPLACE
                    {
                    replace=(Token)input.LT(1);
                    match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol2018); 
                    stream_KW_REPLACE.add(replace);


                    }
                    break;

            }

            KW_COLUMNS93=(Token)input.LT(1);
            match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol2021); 
            stream_KW_COLUMNS.add(KW_COLUMNS93);

            LPAREN94=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_alterStatementSuffixAddCol2023); 
            stream_LPAREN.add(LPAREN94);

            pushFollow(FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol2025);
            columnNameTypeList95=columnNameTypeList();
            _fsp--;

            stream_columnNameTypeList.add(columnNameTypeList95.getTree());
            RPAREN96=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_alterStatementSuffixAddCol2027); 
            stream_RPAREN.add(RPAREN96);


            // AST REWRITE
            // elements: columnNameTypeList, columnNameTypeList, Identifier, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 400:5: -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList )
            if (add != null) {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:400:24: ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_ADDCOLS, "TOK_ALTERTABLE_ADDCOLS"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                adaptor.addChild(root_1, stream_columnNameTypeList.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 401:5: -> ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:401:24: ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_REPLACECOLS, "TOK_ALTERTABLE_REPLACECOLS"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                adaptor.addChild(root_1, stream_columnNameTypeList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixAddCol

    public static class alterStatementSuffixRenameCol_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixRenameCol
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:404:1: alterStatementSuffixRenameCol : Identifier KW_CHANGE ( KW_COLUMN )? oldName= Identifier newName= Identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? -> ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ) ;
    public final alterStatementSuffixRenameCol_return alterStatementSuffixRenameCol() throws RecognitionException {
        alterStatementSuffixRenameCol_return retval = new alterStatementSuffixRenameCol_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token oldName=null;
        Token newName=null;
        Token comment=null;
        Token Identifier97=null;
        Token KW_CHANGE98=null;
        Token KW_COLUMN99=null;
        Token KW_COMMENT101=null;
        colType_return colType100 = null;

        alterStatementChangeColPosition_return alterStatementChangeColPosition102 = null;


        CommonTree oldName_tree=null;
        CommonTree newName_tree=null;
        CommonTree comment_tree=null;
        CommonTree Identifier97_tree=null;
        CommonTree KW_CHANGE98_tree=null;
        CommonTree KW_COLUMN99_tree=null;
        CommonTree KW_COMMENT101_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
        RewriteRuleTokenStream stream_KW_CHANGE=new RewriteRuleTokenStream(adaptor,"token KW_CHANGE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_alterStatementChangeColPosition=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementChangeColPosition");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         msgs.push("rename column name"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:407:5: ( Identifier KW_CHANGE ( KW_COLUMN )? oldName= Identifier newName= Identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? -> ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:407:7: Identifier KW_CHANGE ( KW_COLUMN )? oldName= Identifier newName= Identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )?
            {
            Identifier97=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRenameCol2100); 
            stream_Identifier.add(Identifier97);

            KW_CHANGE98=(Token)input.LT(1);
            match(input,KW_CHANGE,FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol2102); 
            stream_KW_CHANGE.add(KW_CHANGE98);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:407:28: ( KW_COLUMN )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==KW_COLUMN) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:407:28: KW_COLUMN
                    {
                    KW_COLUMN99=(Token)input.LT(1);
                    match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol2104); 
                    stream_KW_COLUMN.add(KW_COLUMN99);


                    }
                    break;

            }

            oldName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRenameCol2109); 
            stream_Identifier.add(oldName);

            newName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRenameCol2113); 
            stream_Identifier.add(newName);

            pushFollow(FOLLOW_colType_in_alterStatementSuffixRenameCol2115);
            colType100=colType();
            _fsp--;

            stream_colType.add(colType100.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:407:85: ( KW_COMMENT comment= StringLiteral )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==KW_COMMENT) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:407:86: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT101=(Token)input.LT(1);
                    match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol2118); 
                    stream_KW_COMMENT.add(KW_COMMENT101);

                    comment=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol2122); 
                    stream_StringLiteral.add(comment);


                    }
                    break;

            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:407:121: ( alterStatementChangeColPosition )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( ((LA31_0>=KW_FIRST && LA31_0<=KW_AFTER)) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:407:121: alterStatementChangeColPosition
                    {
                    pushFollow(FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol2126);
                    alterStatementChangeColPosition102=alterStatementChangeColPosition();
                    _fsp--;

                    stream_alterStatementChangeColPosition.add(alterStatementChangeColPosition102.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: colType, newName, alterStatementChangeColPosition, oldName, comment, Identifier
            // token labels: newName, comment, oldName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_newName=new RewriteRuleTokenStream(adaptor,"token newName",newName);
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleTokenStream stream_oldName=new RewriteRuleTokenStream(adaptor,"token oldName",oldName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 408:5: -> ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:408:7: ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_RENAMECOL, "TOK_ALTERTABLE_RENAMECOL"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                adaptor.addChild(root_1, stream_oldName.next());
                adaptor.addChild(root_1, stream_newName.next());
                adaptor.addChild(root_1, stream_colType.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:408:71: ( $comment)?
                if ( stream_comment.hasNext() ) {
                    adaptor.addChild(root_1, stream_comment.next());

                }
                stream_comment.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:408:81: ( alterStatementChangeColPosition )?
                if ( stream_alterStatementChangeColPosition.hasNext() ) {
                    adaptor.addChild(root_1, stream_alterStatementChangeColPosition.next());

                }
                stream_alterStatementChangeColPosition.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixRenameCol

    public static class alterStatementChangeColPosition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementChangeColPosition
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:411:1: alterStatementChangeColPosition : (first= KW_FIRST | KW_AFTER afterCol= Identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) );
    public final alterStatementChangeColPosition_return alterStatementChangeColPosition() throws RecognitionException {
        alterStatementChangeColPosition_return retval = new alterStatementChangeColPosition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token first=null;
        Token afterCol=null;
        Token KW_AFTER103=null;

        CommonTree first_tree=null;
        CommonTree afterCol_tree=null;
        CommonTree KW_AFTER103_tree=null;
        RewriteRuleTokenStream stream_KW_AFTER=new RewriteRuleTokenStream(adaptor,"token KW_AFTER");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:412:5: (first= KW_FIRST | KW_AFTER afterCol= Identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==KW_FIRST) ) {
                alt32=1;
            }
            else if ( (LA32_0==KW_AFTER) ) {
                alt32=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("411:1: alterStatementChangeColPosition : (first= KW_FIRST | KW_AFTER afterCol= Identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) );", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:412:7: first= KW_FIRST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    first=(Token)input.LT(1);
                    match(input,KW_FIRST,FOLLOW_KW_FIRST_in_alterStatementChangeColPosition2172); 
                    first_tree = (CommonTree)adaptor.create(first);
                    adaptor.addChild(root_0, first_tree);


                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:412:22: KW_AFTER afterCol= Identifier
                    {
                    KW_AFTER103=(Token)input.LT(1);
                    match(input,KW_AFTER,FOLLOW_KW_AFTER_in_alterStatementChangeColPosition2174); 
                    stream_KW_AFTER.add(KW_AFTER103);

                    afterCol=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_alterStatementChangeColPosition2178); 
                    stream_Identifier.add(afterCol);


                    // AST REWRITE
                    // elements: afterCol
                    // token labels: afterCol
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_afterCol=new RewriteRuleTokenStream(adaptor,"token afterCol",afterCol);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 413:5: -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
                    if (first != null) {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:413:25: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 414:5: -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:414:8: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION"), root_1);

                        adaptor.addChild(root_1, stream_afterCol.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementChangeColPosition

    public static class alterStatementSuffixAddPartitions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixAddPartitions
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:417:1: alterStatementSuffixAddPartitions : Identifier KW_ADD ( ifNotExists )? partitionSpec ( partitionLocation )? ( partitionSpec ( partitionLocation )? )* -> ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ ) ;
    public final alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions() throws RecognitionException {
        alterStatementSuffixAddPartitions_return retval = new alterStatementSuffixAddPartitions_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier104=null;
        Token KW_ADD105=null;
        ifNotExists_return ifNotExists106 = null;

        partitionSpec_return partitionSpec107 = null;

        partitionLocation_return partitionLocation108 = null;

        partitionSpec_return partitionSpec109 = null;

        partitionLocation_return partitionLocation110 = null;


        CommonTree Identifier104_tree=null;
        CommonTree KW_ADD105_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_partitionLocation=new RewriteRuleSubtreeStream(adaptor,"rule partitionLocation");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
         msgs.push("add partition statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:420:5: ( Identifier KW_ADD ( ifNotExists )? partitionSpec ( partitionLocation )? ( partitionSpec ( partitionLocation )? )* -> ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:420:7: Identifier KW_ADD ( ifNotExists )? partitionSpec ( partitionLocation )? ( partitionSpec ( partitionLocation )? )*
            {
            Identifier104=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixAddPartitions2230); 
            stream_Identifier.add(Identifier104);

            KW_ADD105=(Token)input.LT(1);
            match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions2232); 
            stream_KW_ADD.add(KW_ADD105);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:420:25: ( ifNotExists )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==KW_IF) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:420:25: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions2234);
                    ifNotExists106=ifNotExists();
                    _fsp--;

                    stream_ifNotExists.add(ifNotExists106.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions2237);
            partitionSpec107=partitionSpec();
            _fsp--;

            stream_partitionSpec.add(partitionSpec107.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:420:52: ( partitionLocation )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==KW_LOCATION) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:420:52: partitionLocation
                    {
                    pushFollow(FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions2239);
                    partitionLocation108=partitionLocation();
                    _fsp--;

                    stream_partitionLocation.add(partitionLocation108.getTree());

                    }
                    break;

            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:420:71: ( partitionSpec ( partitionLocation )? )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==KW_PARTITION) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:420:72: partitionSpec ( partitionLocation )?
            	    {
            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions2243);
            	    partitionSpec109=partitionSpec();
            	    _fsp--;

            	    stream_partitionSpec.add(partitionSpec109.getTree());
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:420:86: ( partitionLocation )?
            	    int alt35=2;
            	    int LA35_0 = input.LA(1);

            	    if ( (LA35_0==KW_LOCATION) ) {
            	        alt35=1;
            	    }
            	    switch (alt35) {
            	        case 1 :
            	            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:420:86: partitionLocation
            	            {
            	            pushFollow(FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions2245);
            	            partitionLocation110=partitionLocation();
            	            _fsp--;

            	            stream_partitionLocation.add(partitionLocation110.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            // AST REWRITE
            // elements: partitionLocation, partitionSpec, Identifier, ifNotExists
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 421:5: -> ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:421:8: ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_ADDPARTS, "TOK_ALTERTABLE_ADDPARTS"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:421:45: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.next());

                }
                stream_ifNotExists.reset();
                if ( !(stream_partitionSpec.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:421:73: ( partitionLocation )?
                    if ( stream_partitionLocation.hasNext() ) {
                        adaptor.addChild(root_1, stream_partitionLocation.next());

                    }
                    stream_partitionLocation.reset();

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixAddPartitions

    public static class alterStatementSuffixTouch_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixTouch
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:424:1: alterStatementSuffixTouch : Identifier KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* ) ;
    public final alterStatementSuffixTouch_return alterStatementSuffixTouch() throws RecognitionException {
        alterStatementSuffixTouch_return retval = new alterStatementSuffixTouch_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier111=null;
        Token KW_TOUCH112=null;
        partitionSpec_return partitionSpec113 = null;


        CommonTree Identifier111_tree=null;
        CommonTree KW_TOUCH112_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_TOUCH=new RewriteRuleTokenStream(adaptor,"token KW_TOUCH");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("touch statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:427:5: ( Identifier KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:427:7: Identifier KW_TOUCH ( partitionSpec )*
            {
            Identifier111=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixTouch2298); 
            stream_Identifier.add(Identifier111);

            KW_TOUCH112=(Token)input.LT(1);
            match(input,KW_TOUCH,FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch2300); 
            stream_KW_TOUCH.add(KW_TOUCH112);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:427:27: ( partitionSpec )*
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==KW_PARTITION) ) {
                    alt37=1;
                }


                switch (alt37) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:427:28: partitionSpec
            	    {
            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixTouch2303);
            	    partitionSpec113=partitionSpec();
            	    _fsp--;

            	    stream_partitionSpec.add(partitionSpec113.getTree());

            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);


            // AST REWRITE
            // elements: Identifier, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 428:5: -> ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:428:8: ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_TOUCH, "TOK_ALTERTABLE_TOUCH"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:428:42: ( partitionSpec )*
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixTouch

    public static class alterStatementSuffixArchive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixArchive
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:431:1: alterStatementSuffixArchive : Identifier KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* ) ;
    public final alterStatementSuffixArchive_return alterStatementSuffixArchive() throws RecognitionException {
        alterStatementSuffixArchive_return retval = new alterStatementSuffixArchive_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier114=null;
        Token KW_ARCHIVE115=null;
        partitionSpec_return partitionSpec116 = null;


        CommonTree Identifier114_tree=null;
        CommonTree KW_ARCHIVE115_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_ARCHIVE");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("archive statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:434:5: ( Identifier KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:434:7: Identifier KW_ARCHIVE ( partitionSpec )*
            {
            Identifier114=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixArchive2349); 
            stream_Identifier.add(Identifier114);

            KW_ARCHIVE115=(Token)input.LT(1);
            match(input,KW_ARCHIVE,FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive2351); 
            stream_KW_ARCHIVE.add(KW_ARCHIVE115);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:434:29: ( partitionSpec )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( (LA38_0==KW_PARTITION) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:434:30: partitionSpec
            	    {
            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixArchive2354);
            	    partitionSpec116=partitionSpec();
            	    _fsp--;

            	    stream_partitionSpec.add(partitionSpec116.getTree());

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);


            // AST REWRITE
            // elements: partitionSpec, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 435:5: -> ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:435:8: ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_ARCHIVE, "TOK_ALTERTABLE_ARCHIVE"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:435:44: ( partitionSpec )*
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixArchive

    public static class alterStatementSuffixUnArchive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixUnArchive
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:438:1: alterStatementSuffixUnArchive : Identifier KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* ) ;
    public final alterStatementSuffixUnArchive_return alterStatementSuffixUnArchive() throws RecognitionException {
        alterStatementSuffixUnArchive_return retval = new alterStatementSuffixUnArchive_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier117=null;
        Token KW_UNARCHIVE118=null;
        partitionSpec_return partitionSpec119 = null;


        CommonTree Identifier117_tree=null;
        CommonTree KW_UNARCHIVE118_tree=null;
        RewriteRuleTokenStream stream_KW_UNARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_UNARCHIVE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("unarchive statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:441:5: ( Identifier KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:441:7: Identifier KW_UNARCHIVE ( partitionSpec )*
            {
            Identifier117=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixUnArchive2400); 
            stream_Identifier.add(Identifier117);

            KW_UNARCHIVE118=(Token)input.LT(1);
            match(input,KW_UNARCHIVE,FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive2402); 
            stream_KW_UNARCHIVE.add(KW_UNARCHIVE118);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:441:31: ( partitionSpec )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==KW_PARTITION) ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:441:32: partitionSpec
            	    {
            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive2405);
            	    partitionSpec119=partitionSpec();
            	    _fsp--;

            	    stream_partitionSpec.add(partitionSpec119.getTree());

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);


            // AST REWRITE
            // elements: partitionSpec, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 442:5: -> ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:442:8: ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_UNARCHIVE, "TOK_ALTERTABLE_UNARCHIVE"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:442:46: ( partitionSpec )*
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixUnArchive

    public static class partitionLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start partitionLocation
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:445:1: partitionLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) ;
    public final partitionLocation_return partitionLocation() throws RecognitionException {
        partitionLocation_return retval = new partitionLocation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token locn=null;
        Token KW_LOCATION120=null;

        CommonTree locn_tree=null;
        CommonTree KW_LOCATION120_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

         msgs.push("partition location"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:448:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:449:7: KW_LOCATION locn= StringLiteral
            {
            KW_LOCATION120=(Token)input.LT(1);
            match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_partitionLocation2457); 
            stream_KW_LOCATION.add(KW_LOCATION120);

            locn=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_partitionLocation2461); 
            stream_StringLiteral.add(locn);


            // AST REWRITE
            // elements: locn
            // token labels: locn
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 449:38: -> ^( TOK_PARTITIONLOCATION $locn)
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:449:41: ^( TOK_PARTITIONLOCATION $locn)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PARTITIONLOCATION, "TOK_PARTITIONLOCATION"), root_1);

                adaptor.addChild(root_1, stream_locn.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end partitionLocation

    public static class alterStatementSuffixDropPartitions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixDropPartitions
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:452:1: alterStatementSuffixDropPartitions : Identifier KW_DROP partitionSpec ( COMMA partitionSpec )* -> ^( TOK_ALTERTABLE_DROPPARTS Identifier ( partitionSpec )+ ) ;
    public final alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions() throws RecognitionException {
        alterStatementSuffixDropPartitions_return retval = new alterStatementSuffixDropPartitions_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier121=null;
        Token KW_DROP122=null;
        Token COMMA124=null;
        partitionSpec_return partitionSpec123 = null;

        partitionSpec_return partitionSpec125 = null;


        CommonTree Identifier121_tree=null;
        CommonTree KW_DROP122_tree=null;
        CommonTree COMMA124_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("drop partition statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:455:5: ( Identifier KW_DROP partitionSpec ( COMMA partitionSpec )* -> ^( TOK_ALTERTABLE_DROPPARTS Identifier ( partitionSpec )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:455:7: Identifier KW_DROP partitionSpec ( COMMA partitionSpec )*
            {
            Identifier121=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixDropPartitions2497); 
            stream_Identifier.add(Identifier121);

            KW_DROP122=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions2499); 
            stream_KW_DROP.add(KW_DROP122);

            pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixDropPartitions2501);
            partitionSpec123=partitionSpec();
            _fsp--;

            stream_partitionSpec.add(partitionSpec123.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:455:40: ( COMMA partitionSpec )*
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==COMMA) ) {
                    alt40=1;
                }


                switch (alt40) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:455:41: COMMA partitionSpec
            	    {
            	    COMMA124=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_alterStatementSuffixDropPartitions2504); 
            	    stream_COMMA.add(COMMA124);

            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixDropPartitions2506);
            	    partitionSpec125=partitionSpec();
            	    _fsp--;

            	    stream_partitionSpec.add(partitionSpec125.getTree());

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);


            // AST REWRITE
            // elements: partitionSpec, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 456:5: -> ^( TOK_ALTERTABLE_DROPPARTS Identifier ( partitionSpec )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:456:8: ^( TOK_ALTERTABLE_DROPPARTS Identifier ( partitionSpec )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_DROPPARTS, "TOK_ALTERTABLE_DROPPARTS"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                if ( !(stream_partitionSpec.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixDropPartitions

    public static class alterStatementSuffixProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixProperties
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:459:1: alterStatementSuffixProperties : name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties ) ;
    public final alterStatementSuffixProperties_return alterStatementSuffixProperties() throws RecognitionException {
        alterStatementSuffixProperties_return retval = new alterStatementSuffixProperties_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token KW_SET126=null;
        Token KW_TBLPROPERTIES127=null;
        tableProperties_return tableProperties128 = null;


        CommonTree name_tree=null;
        CommonTree KW_SET126_tree=null;
        CommonTree KW_TBLPROPERTIES127_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         msgs.push("alter properties statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:462:5: (name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:462:7: name= Identifier KW_SET KW_TBLPROPERTIES tableProperties
            {
            name=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixProperties2552); 
            stream_Identifier.add(name);

            KW_SET126=(Token)input.LT(1);
            match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixProperties2554); 
            stream_KW_SET.add(KW_SET126);

            KW_TBLPROPERTIES127=(Token)input.LT(1);
            match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties2556); 
            stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES127);

            pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixProperties2558);
            tableProperties128=tableProperties();
            _fsp--;

            stream_tableProperties.add(tableProperties128.getTree());

            // AST REWRITE
            // elements: tableProperties, name
            // token labels: name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 463:5: -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:463:8: ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_PROPERTIES, "TOK_ALTERTABLE_PROPERTIES"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                adaptor.addChild(root_1, stream_tableProperties.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixProperties

    public static class alterViewSuffixProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterViewSuffixProperties
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:466:1: alterViewSuffixProperties : name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties ) ;
    public final alterViewSuffixProperties_return alterViewSuffixProperties() throws RecognitionException {
        alterViewSuffixProperties_return retval = new alterViewSuffixProperties_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token KW_SET129=null;
        Token KW_TBLPROPERTIES130=null;
        tableProperties_return tableProperties131 = null;


        CommonTree name_tree=null;
        CommonTree KW_SET129_tree=null;
        CommonTree KW_TBLPROPERTIES130_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         msgs.push("alter view properties statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:469:5: (name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:469:7: name= Identifier KW_SET KW_TBLPROPERTIES tableProperties
            {
            name=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterViewSuffixProperties2602); 
            stream_Identifier.add(name);

            KW_SET129=(Token)input.LT(1);
            match(input,KW_SET,FOLLOW_KW_SET_in_alterViewSuffixProperties2604); 
            stream_KW_SET.add(KW_SET129);

            KW_TBLPROPERTIES130=(Token)input.LT(1);
            match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties2606); 
            stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES130);

            pushFollow(FOLLOW_tableProperties_in_alterViewSuffixProperties2608);
            tableProperties131=tableProperties();
            _fsp--;

            stream_tableProperties.add(tableProperties131.getTree());

            // AST REWRITE
            // elements: tableProperties, name
            // token labels: name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 470:5: -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:470:8: ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERVIEW_PROPERTIES, "TOK_ALTERVIEW_PROPERTIES"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                adaptor.addChild(root_1, stream_tableProperties.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterViewSuffixProperties

    public static class alterStatementSuffixSerdeProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixSerdeProperties
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:473:1: alterStatementSuffixSerdeProperties : (name= Identifier KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $name $serdeName ( tableProperties )? ) | name= Identifier KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES $name tableProperties ) );
    public final alterStatementSuffixSerdeProperties_return alterStatementSuffixSerdeProperties() throws RecognitionException {
        alterStatementSuffixSerdeProperties_return retval = new alterStatementSuffixSerdeProperties_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token serdeName=null;
        Token KW_SET132=null;
        Token KW_SERDE133=null;
        Token KW_WITH134=null;
        Token KW_SERDEPROPERTIES135=null;
        Token KW_SET137=null;
        Token KW_SERDEPROPERTIES138=null;
        tableProperties_return tableProperties136 = null;

        tableProperties_return tableProperties139 = null;


        CommonTree name_tree=null;
        CommonTree serdeName_tree=null;
        CommonTree KW_SET132_tree=null;
        CommonTree KW_SERDE133_tree=null;
        CommonTree KW_WITH134_tree=null;
        CommonTree KW_SERDEPROPERTIES135_tree=null;
        CommonTree KW_SET137_tree=null;
        CommonTree KW_SERDEPROPERTIES138_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         msgs.push("alter serdes statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:476:5: (name= Identifier KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $name $serdeName ( tableProperties )? ) | name= Identifier KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES $name tableProperties ) )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==Identifier) ) {
                int LA42_1 = input.LA(2);

                if ( (LA42_1==KW_SET) ) {
                    int LA42_2 = input.LA(3);

                    if ( (LA42_2==KW_SERDE) ) {
                        alt42=1;
                    }
                    else if ( (LA42_2==KW_SERDEPROPERTIES) ) {
                        alt42=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("473:1: alterStatementSuffixSerdeProperties : (name= Identifier KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $name $serdeName ( tableProperties )? ) | name= Identifier KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES $name tableProperties ) );", 42, 2, input);

                        throw nvae;
                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("473:1: alterStatementSuffixSerdeProperties : (name= Identifier KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $name $serdeName ( tableProperties )? ) | name= Identifier KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES $name tableProperties ) );", 42, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("473:1: alterStatementSuffixSerdeProperties : (name= Identifier KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $name $serdeName ( tableProperties )? ) | name= Identifier KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES $name tableProperties ) );", 42, 0, input);

                throw nvae;
            }
            switch (alt42) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:476:7: name= Identifier KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
                    {
                    name=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixSerdeProperties2652); 
                    stream_Identifier.add(name);

                    KW_SET132=(Token)input.LT(1);
                    match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties2654); 
                    stream_KW_SET.add(KW_SET132);

                    KW_SERDE133=(Token)input.LT(1);
                    match(input,KW_SERDE,FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties2656); 
                    stream_KW_SERDE.add(KW_SERDE133);

                    serdeName=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties2660); 
                    stream_StringLiteral.add(serdeName);

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:476:63: ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==KW_WITH) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:476:64: KW_WITH KW_SERDEPROPERTIES tableProperties
                            {
                            KW_WITH134=(Token)input.LT(1);
                            match(input,KW_WITH,FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties2663); 
                            stream_KW_WITH.add(KW_WITH134);

                            KW_SERDEPROPERTIES135=(Token)input.LT(1);
                            match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties2665); 
                            stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES135);

                            pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties2667);
                            tableProperties136=tableProperties();
                            _fsp--;

                            stream_tableProperties.add(tableProperties136.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: name, serdeName, tableProperties
                    // token labels: name, serdeName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
                    RewriteRuleTokenStream stream_serdeName=new RewriteRuleTokenStream(adaptor,"token serdeName",serdeName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 477:5: -> ^( TOK_ALTERTABLE_SERIALIZER $name $serdeName ( tableProperties )? )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:477:8: ^( TOK_ALTERTABLE_SERIALIZER $name $serdeName ( tableProperties )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_SERIALIZER, "TOK_ALTERTABLE_SERIALIZER"), root_1);

                        adaptor.addChild(root_1, stream_name.next());
                        adaptor.addChild(root_1, stream_serdeName.next());
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:477:53: ( tableProperties )?
                        if ( stream_tableProperties.hasNext() ) {
                            adaptor.addChild(root_1, stream_tableProperties.next());

                        }
                        stream_tableProperties.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:478:7: name= Identifier KW_SET KW_SERDEPROPERTIES tableProperties
                    {
                    name=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixSerdeProperties2698); 
                    stream_Identifier.add(name);

                    KW_SET137=(Token)input.LT(1);
                    match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties2700); 
                    stream_KW_SET.add(KW_SET137);

                    KW_SERDEPROPERTIES138=(Token)input.LT(1);
                    match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties2702); 
                    stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES138);

                    pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties2704);
                    tableProperties139=tableProperties();
                    _fsp--;

                    stream_tableProperties.add(tableProperties139.getTree());

                    // AST REWRITE
                    // elements: tableProperties, name
                    // token labels: name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 479:5: -> ^( TOK_ALTERTABLE_SERDEPROPERTIES $name tableProperties )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:479:8: ^( TOK_ALTERTABLE_SERDEPROPERTIES $name tableProperties )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_SERDEPROPERTIES, "TOK_ALTERTABLE_SERDEPROPERTIES"), root_1);

                        adaptor.addChild(root_1, stream_name.next());
                        adaptor.addChild(root_1, stream_tableProperties.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixSerdeProperties

    public static class tablePartitionPrefix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tablePartitionPrefix
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:482:1: tablePartitionPrefix : name= Identifier ( partitionSpec )? -> ^( TOK_TABLE_PARTITION $name ( partitionSpec )? ) ;
    public final tablePartitionPrefix_return tablePartitionPrefix() throws RecognitionException {
        tablePartitionPrefix_return retval = new tablePartitionPrefix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        partitionSpec_return partitionSpec140 = null;


        CommonTree name_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        msgs.push("table partition prefix");
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:485:3: (name= Identifier ( partitionSpec )? -> ^( TOK_TABLE_PARTITION $name ( partitionSpec )? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:485:4: name= Identifier ( partitionSpec )?
            {
            name=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_tablePartitionPrefix2745); 
            stream_Identifier.add(name);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:485:20: ( partitionSpec )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==KW_PARTITION) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:485:20: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_tablePartitionPrefix2747);
                    partitionSpec140=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec140.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: partitionSpec, name
            // token labels: name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 486:3: -> ^( TOK_TABLE_PARTITION $name ( partitionSpec )? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:486:5: ^( TOK_TABLE_PARTITION $name ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLE_PARTITION, "TOK_TABLE_PARTITION"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:486:33: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tablePartitionPrefix

    public static class alterTblPartitionStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterTblPartitionStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:489:1: alterTblPartitionStatement : tablePartitionPrefix alterTblPartitionStatementSuffix -> ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix ) ;
    public final alterTblPartitionStatement_return alterTblPartitionStatement() throws RecognitionException {
        alterTblPartitionStatement_return retval = new alterTblPartitionStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        tablePartitionPrefix_return tablePartitionPrefix141 = null;

        alterTblPartitionStatementSuffix_return alterTblPartitionStatementSuffix142 = null;


        RewriteRuleSubtreeStream stream_alterTblPartitionStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterTblPartitionStatementSuffix");
        RewriteRuleSubtreeStream stream_tablePartitionPrefix=new RewriteRuleSubtreeStream(adaptor,"rule tablePartitionPrefix");
        msgs.push("alter table partition statement");
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:492:3: ( tablePartitionPrefix alterTblPartitionStatementSuffix -> ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:492:6: tablePartitionPrefix alterTblPartitionStatementSuffix
            {
            pushFollow(FOLLOW_tablePartitionPrefix_in_alterTblPartitionStatement2786);
            tablePartitionPrefix141=tablePartitionPrefix();
            _fsp--;

            stream_tablePartitionPrefix.add(tablePartitionPrefix141.getTree());
            pushFollow(FOLLOW_alterTblPartitionStatementSuffix_in_alterTblPartitionStatement2788);
            alterTblPartitionStatementSuffix142=alterTblPartitionStatementSuffix();
            _fsp--;

            stream_alterTblPartitionStatementSuffix.add(alterTblPartitionStatementSuffix142.getTree());

            // AST REWRITE
            // elements: alterTblPartitionStatementSuffix, tablePartitionPrefix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 493:3: -> ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:493:6: ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_PARTITION, "TOK_ALTERTABLE_PARTITION"), root_1);

                adaptor.addChild(root_1, stream_tablePartitionPrefix.next());
                adaptor.addChild(root_1, stream_alterTblPartitionStatementSuffix.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterTblPartitionStatement

    public static class alterTblPartitionStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterTblPartitionStatementSuffix
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:496:1: alterTblPartitionStatementSuffix : ( alterStatementSuffixFileFormat | alterStatementSuffixLocation );
    public final alterTblPartitionStatementSuffix_return alterTblPartitionStatementSuffix() throws RecognitionException {
        alterTblPartitionStatementSuffix_return retval = new alterTblPartitionStatementSuffix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        alterStatementSuffixFileFormat_return alterStatementSuffixFileFormat143 = null;

        alterStatementSuffixLocation_return alterStatementSuffixLocation144 = null;



        msgs.push("alter table partition statement suffix");
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:499:3: ( alterStatementSuffixFileFormat | alterStatementSuffixLocation )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==KW_SET) ) {
                int LA44_1 = input.LA(2);

                if ( (LA44_1==KW_LOCATION) ) {
                    alt44=2;
                }
                else if ( (LA44_1==KW_FILEFORMAT) ) {
                    alt44=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("496:1: alterTblPartitionStatementSuffix : ( alterStatementSuffixFileFormat | alterStatementSuffixLocation );", 44, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("496:1: alterTblPartitionStatementSuffix : ( alterStatementSuffixFileFormat | alterStatementSuffixLocation );", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:499:5: alterStatementSuffixFileFormat
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix2823);
                    alterStatementSuffixFileFormat143=alterStatementSuffixFileFormat();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixFileFormat143.getTree());

                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:500:5: alterStatementSuffixLocation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix2829);
                    alterStatementSuffixLocation144=alterStatementSuffixLocation();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixLocation144.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterTblPartitionStatementSuffix

    public static class alterStatementSuffixFileFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixFileFormat
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:503:1: alterStatementSuffixFileFormat : KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) ;
    public final alterStatementSuffixFileFormat_return alterStatementSuffixFileFormat() throws RecognitionException {
        alterStatementSuffixFileFormat_return retval = new alterStatementSuffixFileFormat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_SET145=null;
        Token KW_FILEFORMAT146=null;
        fileFormat_return fileFormat147 = null;


        CommonTree KW_SET145_tree=null;
        CommonTree KW_FILEFORMAT146_tree=null;
        RewriteRuleTokenStream stream_KW_FILEFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FILEFORMAT");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_fileFormat=new RewriteRuleSubtreeStream(adaptor,"rule fileFormat");
        msgs.push("alter fileformat statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:506:2: ( KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:506:4: KW_SET KW_FILEFORMAT fileFormat
            {
            KW_SET145=(Token)input.LT(1);
            match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixFileFormat2851); 
            stream_KW_SET.add(KW_SET145);

            KW_FILEFORMAT146=(Token)input.LT(1);
            match(input,KW_FILEFORMAT,FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat2853); 
            stream_KW_FILEFORMAT.add(KW_FILEFORMAT146);

            pushFollow(FOLLOW_fileFormat_in_alterStatementSuffixFileFormat2855);
            fileFormat147=fileFormat();
            _fsp--;

            stream_fileFormat.add(fileFormat147.getTree());

            // AST REWRITE
            // elements: fileFormat
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 507:2: -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:507:5: ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_FILEFORMAT, "TOK_ALTERTABLE_FILEFORMAT"), root_1);

                adaptor.addChild(root_1, stream_fileFormat.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixFileFormat

    public static class alterStatementSuffixLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixLocation
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:510:1: alterStatementSuffixLocation : KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) ;
    public final alterStatementSuffixLocation_return alterStatementSuffixLocation() throws RecognitionException {
        alterStatementSuffixLocation_return retval = new alterStatementSuffixLocation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token newLoc=null;
        Token KW_SET148=null;
        Token KW_LOCATION149=null;

        CommonTree newLoc_tree=null;
        CommonTree KW_SET148_tree=null;
        CommonTree KW_LOCATION149_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

        msgs.push("alter location");
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:513:3: ( KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:513:5: KW_SET KW_LOCATION newLoc= StringLiteral
            {
            KW_SET148=(Token)input.LT(1);
            match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixLocation2886); 
            stream_KW_SET.add(KW_SET148);

            KW_LOCATION149=(Token)input.LT(1);
            match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation2888); 
            stream_KW_LOCATION.add(KW_LOCATION149);

            newLoc=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixLocation2892); 
            stream_StringLiteral.add(newLoc);


            // AST REWRITE
            // elements: newLoc
            // token labels: newLoc
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_newLoc=new RewriteRuleTokenStream(adaptor,"token newLoc",newLoc);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 514:3: -> ^( TOK_ALTERTABLE_LOCATION $newLoc)
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:514:6: ^( TOK_ALTERTABLE_LOCATION $newLoc)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_LOCATION, "TOK_ALTERTABLE_LOCATION"), root_1);

                adaptor.addChild(root_1, stream_newLoc.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixLocation

    public static class alterStatementSuffixClusterbySortby_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixClusterbySortby
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:517:1: alterStatementSuffixClusterbySortby : name= Identifier tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets ) ;
    public final alterStatementSuffixClusterbySortby_return alterStatementSuffixClusterbySortby() throws RecognitionException {
        alterStatementSuffixClusterbySortby_return retval = new alterStatementSuffixClusterbySortby_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        tableBuckets_return tableBuckets150 = null;


        CommonTree name_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");
        msgs.push("alter cluster by sort by statement");
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:520:2: (name= Identifier tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:520:3: name= Identifier tableBuckets
            {
            name=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixClusterbySortby2925); 
            stream_Identifier.add(name);

            pushFollow(FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby2927);
            tableBuckets150=tableBuckets();
            _fsp--;

            stream_tableBuckets.add(tableBuckets150.getTree());

            // AST REWRITE
            // elements: name, tableBuckets
            // token labels: name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 521:2: -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:521:4: ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                adaptor.addChild(root_1, stream_tableBuckets.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixClusterbySortby

    public static class fileFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start fileFormat
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:524:1: fileFormat : ( KW_SEQUENCEFILE -> ^( TOK_TBLSEQUENCEFILE ) | KW_TEXTFILE -> ^( TOK_TBLTEXTFILE ) | KW_RCFILE -> ^( TOK_TBLRCFILE ) | KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt) );
    public final fileFormat_return fileFormat() throws RecognitionException {
        fileFormat_return retval = new fileFormat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token inFmt=null;
        Token outFmt=null;
        Token KW_SEQUENCEFILE151=null;
        Token KW_TEXTFILE152=null;
        Token KW_RCFILE153=null;
        Token KW_INPUTFORMAT154=null;
        Token KW_OUTPUTFORMAT155=null;

        CommonTree inFmt_tree=null;
        CommonTree outFmt_tree=null;
        CommonTree KW_SEQUENCEFILE151_tree=null;
        CommonTree KW_TEXTFILE152_tree=null;
        CommonTree KW_RCFILE153_tree=null;
        CommonTree KW_INPUTFORMAT154_tree=null;
        CommonTree KW_OUTPUTFORMAT155_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_RCFILE=new RewriteRuleTokenStream(adaptor,"token KW_RCFILE");
        RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
        RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
        RewriteRuleTokenStream stream_KW_SEQUENCEFILE=new RewriteRuleTokenStream(adaptor,"token KW_SEQUENCEFILE");
        RewriteRuleTokenStream stream_KW_TEXTFILE=new RewriteRuleTokenStream(adaptor,"token KW_TEXTFILE");

         msgs.push("file format specification"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:527:5: ( KW_SEQUENCEFILE -> ^( TOK_TBLSEQUENCEFILE ) | KW_TEXTFILE -> ^( TOK_TBLTEXTFILE ) | KW_RCFILE -> ^( TOK_TBLRCFILE ) | KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt) )
            int alt45=4;
            switch ( input.LA(1) ) {
            case KW_SEQUENCEFILE:
                {
                alt45=1;
                }
                break;
            case KW_TEXTFILE:
                {
                alt45=2;
                }
                break;
            case KW_RCFILE:
                {
                alt45=3;
                }
                break;
            case KW_INPUTFORMAT:
                {
                alt45=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("524:1: fileFormat : ( KW_SEQUENCEFILE -> ^( TOK_TBLSEQUENCEFILE ) | KW_TEXTFILE -> ^( TOK_TBLTEXTFILE ) | KW_RCFILE -> ^( TOK_TBLRCFILE ) | KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt) );", 45, 0, input);

                throw nvae;
            }

            switch (alt45) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:527:7: KW_SEQUENCEFILE
                    {
                    KW_SEQUENCEFILE151=(Token)input.LT(1);
                    match(input,KW_SEQUENCEFILE,FOLLOW_KW_SEQUENCEFILE_in_fileFormat2962); 
                    stream_KW_SEQUENCEFILE.add(KW_SEQUENCEFILE151);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 527:24: -> ^( TOK_TBLSEQUENCEFILE )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:527:27: ^( TOK_TBLSEQUENCEFILE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TBLSEQUENCEFILE, "TOK_TBLSEQUENCEFILE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:528:7: KW_TEXTFILE
                    {
                    KW_TEXTFILE152=(Token)input.LT(1);
                    match(input,KW_TEXTFILE,FOLLOW_KW_TEXTFILE_in_fileFormat2977); 
                    stream_KW_TEXTFILE.add(KW_TEXTFILE152);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 528:20: -> ^( TOK_TBLTEXTFILE )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:528:23: ^( TOK_TBLTEXTFILE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TBLTEXTFILE, "TOK_TBLTEXTFILE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:529:7: KW_RCFILE
                    {
                    KW_RCFILE153=(Token)input.LT(1);
                    match(input,KW_RCFILE,FOLLOW_KW_RCFILE_in_fileFormat2992); 
                    stream_KW_RCFILE.add(KW_RCFILE153);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 529:18: -> ^( TOK_TBLRCFILE )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:529:21: ^( TOK_TBLRCFILE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TBLRCFILE, "TOK_TBLRCFILE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 4 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:530:7: KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral
                    {
                    KW_INPUTFORMAT154=(Token)input.LT(1);
                    match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_fileFormat3007); 
                    stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT154);

                    inFmt=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat3011); 
                    stream_StringLiteral.add(inFmt);

                    KW_OUTPUTFORMAT155=(Token)input.LT(1);
                    match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_fileFormat3013); 
                    stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT155);

                    outFmt=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat3017); 
                    stream_StringLiteral.add(outFmt);


                    // AST REWRITE
                    // elements: inFmt, outFmt
                    // token labels: outFmt, inFmt
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
                    RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 531:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt)
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:531:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT"), root_1);

                        adaptor.addChild(root_1, stream_inFmt.next());
                        adaptor.addChild(root_1, stream_outFmt.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end fileFormat

    public static class tabTypeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tabTypeExpr
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:534:1: tabTypeExpr : Identifier ( DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )* ;
    public final tabTypeExpr_return tabTypeExpr() throws RecognitionException {
        tabTypeExpr_return retval = new tabTypeExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier156=null;
        Token DOT157=null;
        Token set158=null;

        CommonTree Identifier156_tree=null;
        CommonTree DOT157_tree=null;
        CommonTree set158_tree=null;

         msgs.push("specifying table types"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:538:4: ( Identifier ( DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )* )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:538:6: Identifier ( DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )*
            {
            root_0 = (CommonTree)adaptor.nil();

            Identifier156=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_tabTypeExpr3062); 
            Identifier156_tree = (CommonTree)adaptor.create(Identifier156);
            adaptor.addChild(root_0, Identifier156_tree);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:538:17: ( DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )*
            loop46:
            do {
                int alt46=2;
                int LA46_0 = input.LA(1);

                if ( (LA46_0==DOT) ) {
                    alt46=1;
                }


                switch (alt46) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:538:18: DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE )
            	    {
            	    DOT157=(Token)input.LT(1);
            	    match(input,DOT,FOLLOW_DOT_in_tabTypeExpr3065); 
            	    DOT157_tree = (CommonTree)adaptor.create(DOT157);
            	    root_0 = (CommonTree)adaptor.becomeRoot(DOT157_tree, root_0);

            	    set158=(Token)input.LT(1);
            	    if ( input.LA(1)==Identifier||(input.LA(1)>=KW_ELEM_TYPE && input.LA(1)<=KW_VALUE_TYPE) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, adaptor.create(set158));
            	        errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_tabTypeExpr3068);    throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop46;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tabTypeExpr

    public static class partTypeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start partTypeExpr
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:541:1: partTypeExpr : tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) ;
    public final partTypeExpr_return partTypeExpr() throws RecognitionException {
        partTypeExpr_return retval = new partTypeExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        tabTypeExpr_return tabTypeExpr159 = null;

        partitionSpec_return partitionSpec160 = null;


        RewriteRuleSubtreeStream stream_tabTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule tabTypeExpr");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("specifying table partitions"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:544:5: ( tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:544:8: tabTypeExpr ( partitionSpec )?
            {
            pushFollow(FOLLOW_tabTypeExpr_in_partTypeExpr3111);
            tabTypeExpr159=tabTypeExpr();
            _fsp--;

            stream_tabTypeExpr.add(tabTypeExpr159.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:544:20: ( partitionSpec )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==KW_PARTITION) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:544:20: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_partTypeExpr3113);
                    partitionSpec160=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec160.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: partitionSpec, tabTypeExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 544:35: -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:544:38: ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABTYPE, "TOK_TABTYPE"), root_1);

                adaptor.addChild(root_1, stream_tabTypeExpr.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:544:64: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end partTypeExpr

    public static class descStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start descStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:547:1: descStatement : ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )? (parttype= partTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) );
    public final descStatement_return descStatement() throws RecognitionException {
        descStatement_return retval = new descStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token descOptions=null;
        Token KW_DESCRIBE161=null;
        Token KW_DESC162=null;
        Token KW_DESCRIBE163=null;
        Token KW_DESC164=null;
        Token KW_FUNCTION165=null;
        Token KW_EXTENDED166=null;
        partTypeExpr_return parttype = null;

        descFuncNames_return name = null;


        CommonTree descOptions_tree=null;
        CommonTree KW_DESCRIBE161_tree=null;
        CommonTree KW_DESC162_tree=null;
        CommonTree KW_DESCRIBE163_tree=null;
        CommonTree KW_DESC164_tree=null;
        CommonTree KW_FUNCTION165_tree=null;
        CommonTree KW_EXTENDED166_tree=null;
        RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
        RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
        RewriteRuleTokenStream stream_KW_DESCRIBE=new RewriteRuleTokenStream(adaptor,"token KW_DESCRIBE");
        RewriteRuleSubtreeStream stream_descFuncNames=new RewriteRuleSubtreeStream(adaptor,"rule descFuncNames");
        RewriteRuleSubtreeStream stream_partTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule partTypeExpr");
         msgs.push("describe statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:550:5: ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )? (parttype= partTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) )
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==KW_DESCRIBE) ) {
                int LA52_1 = input.LA(2);

                if ( (LA52_1==KW_EXTENDED||LA52_1==Identifier||LA52_1==KW_FORMATTED) ) {
                    alt52=1;
                }
                else if ( (LA52_1==KW_FUNCTION) ) {
                    alt52=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("547:1: descStatement : ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )? (parttype= partTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) );", 52, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA52_0==KW_DESC) ) {
                int LA52_2 = input.LA(2);

                if ( (LA52_2==KW_EXTENDED||LA52_2==Identifier||LA52_2==KW_FORMATTED) ) {
                    alt52=1;
                }
                else if ( (LA52_2==KW_FUNCTION) ) {
                    alt52=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("547:1: descStatement : ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )? (parttype= partTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) );", 52, 2, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("547:1: descStatement : ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )? (parttype= partTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) );", 52, 0, input);

                throw nvae;
            }
            switch (alt52) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:550:7: ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )? (parttype= partTypeExpr )
                    {
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:550:7: ( KW_DESCRIBE | KW_DESC )
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==KW_DESCRIBE) ) {
                        alt48=1;
                    }
                    else if ( (LA48_0==KW_DESC) ) {
                        alt48=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("550:7: ( KW_DESCRIBE | KW_DESC )", 48, 0, input);

                        throw nvae;
                    }
                    switch (alt48) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:550:8: KW_DESCRIBE
                            {
                            KW_DESCRIBE161=(Token)input.LT(1);
                            match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement3153); 
                            stream_KW_DESCRIBE.add(KW_DESCRIBE161);


                            }
                            break;
                        case 2 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:550:20: KW_DESC
                            {
                            KW_DESC162=(Token)input.LT(1);
                            match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement3155); 
                            stream_KW_DESC.add(KW_DESC162);


                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:550:29: (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )?
                    int alt49=3;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==KW_FORMATTED) ) {
                        alt49=1;
                    }
                    else if ( (LA49_0==KW_EXTENDED) ) {
                        alt49=2;
                    }
                    switch (alt49) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:550:30: descOptions= KW_FORMATTED
                            {
                            descOptions=(Token)input.LT(1);
                            match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_descStatement3161); 
                            stream_KW_FORMATTED.add(descOptions);


                            }
                            break;
                        case 2 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:550:55: descOptions= KW_EXTENDED
                            {
                            descOptions=(Token)input.LT(1);
                            match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement3165); 
                            stream_KW_EXTENDED.add(descOptions);


                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:550:81: (parttype= partTypeExpr )
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:550:82: parttype= partTypeExpr
                    {
                    pushFollow(FOLLOW_partTypeExpr_in_descStatement3172);
                    parttype=partTypeExpr();
                    _fsp--;

                    stream_partTypeExpr.add(parttype.getTree());

                    }


                    // AST REWRITE
                    // elements: parttype, descOptions
                    // token labels: descOptions
                    // rule labels: retval, parttype
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_descOptions=new RewriteRuleTokenStream(adaptor,"token descOptions",descOptions);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"token parttype",parttype!=null?parttype.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 550:105: -> ^( TOK_DESCTABLE $parttype ( $descOptions)? )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:550:108: ^( TOK_DESCTABLE $parttype ( $descOptions)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DESCTABLE, "TOK_DESCTABLE"), root_1);

                        adaptor.addChild(root_1, stream_parttype.next());
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:550:134: ( $descOptions)?
                        if ( stream_descOptions.hasNext() ) {
                            adaptor.addChild(root_1, stream_descOptions.next());

                        }
                        stream_descOptions.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:551:7: ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames )
                    {
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:551:7: ( KW_DESCRIBE | KW_DESC )
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==KW_DESCRIBE) ) {
                        alt50=1;
                    }
                    else if ( (LA50_0==KW_DESC) ) {
                        alt50=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("551:7: ( KW_DESCRIBE | KW_DESC )", 50, 0, input);

                        throw nvae;
                    }
                    switch (alt50) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:551:8: KW_DESCRIBE
                            {
                            KW_DESCRIBE163=(Token)input.LT(1);
                            match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement3195); 
                            stream_KW_DESCRIBE.add(KW_DESCRIBE163);


                            }
                            break;
                        case 2 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:551:20: KW_DESC
                            {
                            KW_DESC164=(Token)input.LT(1);
                            match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement3197); 
                            stream_KW_DESC.add(KW_DESC164);


                            }
                            break;

                    }

                    KW_FUNCTION165=(Token)input.LT(1);
                    match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_descStatement3200); 
                    stream_KW_FUNCTION.add(KW_FUNCTION165);

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:551:41: ( KW_EXTENDED )?
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==KW_EXTENDED) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:551:41: KW_EXTENDED
                            {
                            KW_EXTENDED166=(Token)input.LT(1);
                            match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement3202); 
                            stream_KW_EXTENDED.add(KW_EXTENDED166);


                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:551:54: (name= descFuncNames )
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:551:55: name= descFuncNames
                    {
                    pushFollow(FOLLOW_descFuncNames_in_descStatement3208);
                    name=descFuncNames();
                    _fsp--;

                    stream_descFuncNames.add(name.getTree());

                    }


                    // AST REWRITE
                    // elements: name, KW_EXTENDED
                    // token labels: 
                    // rule labels: retval, name
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"token name",name!=null?name.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 551:75: -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:551:78: ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DESCFUNCTION, "TOK_DESCFUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_name.next());
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:551:103: ( KW_EXTENDED )?
                        if ( stream_KW_EXTENDED.hasNext() ) {
                            adaptor.addChild(root_1, stream_KW_EXTENDED.next());

                        }
                        stream_KW_EXTENDED.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end descStatement

    public static class showStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start showStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:554:1: showStatement : ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( showStmtIdentifier )? ) | KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? ) | KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? ) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) );
    public final showStatement_return showStatement() throws RecognitionException {
        showStatement_return retval = new showStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token db_name=null;
        Token KW_SHOW167=null;
        Token KW_DATABASES168=null;
        Token KW_SCHEMAS169=null;
        Token KW_LIKE170=null;
        Token KW_SHOW172=null;
        Token KW_TABLES173=null;
        Token KW_SHOW175=null;
        Token KW_FUNCTIONS176=null;
        Token KW_SHOW178=null;
        Token KW_PARTITIONS179=null;
        Token Identifier180=null;
        Token KW_SHOW182=null;
        Token KW_TABLE183=null;
        Token KW_EXTENDED184=null;
        Token KW_FROM185=null;
        Token KW_IN186=null;
        Token KW_LIKE187=null;
        showStmtIdentifier_return showStmtIdentifier171 = null;

        showStmtIdentifier_return showStmtIdentifier174 = null;

        showStmtIdentifier_return showStmtIdentifier177 = null;

        partitionSpec_return partitionSpec181 = null;

        showStmtIdentifier_return showStmtIdentifier188 = null;

        partitionSpec_return partitionSpec189 = null;


        CommonTree db_name_tree=null;
        CommonTree KW_SHOW167_tree=null;
        CommonTree KW_DATABASES168_tree=null;
        CommonTree KW_SCHEMAS169_tree=null;
        CommonTree KW_LIKE170_tree=null;
        CommonTree KW_SHOW172_tree=null;
        CommonTree KW_TABLES173_tree=null;
        CommonTree KW_SHOW175_tree=null;
        CommonTree KW_FUNCTIONS176_tree=null;
        CommonTree KW_SHOW178_tree=null;
        CommonTree KW_PARTITIONS179_tree=null;
        CommonTree Identifier180_tree=null;
        CommonTree KW_SHOW182_tree=null;
        CommonTree KW_TABLE183_tree=null;
        CommonTree KW_EXTENDED184_tree=null;
        CommonTree KW_FROM185_tree=null;
        CommonTree KW_IN186_tree=null;
        CommonTree KW_LIKE187_tree=null;
        RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
        RewriteRuleTokenStream stream_KW_SCHEMAS=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMAS");
        RewriteRuleTokenStream stream_KW_TABLES=new RewriteRuleTokenStream(adaptor,"token KW_TABLES");
        RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
        RewriteRuleTokenStream stream_KW_DATABASES=new RewriteRuleTokenStream(adaptor,"token KW_DATABASES");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_PARTITIONS=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONS");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_FUNCTIONS=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTIONS");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_showStmtIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule showStmtIdentifier");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("show statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:557:5: ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( showStmtIdentifier )? ) | KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? ) | KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? ) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) )
            int alt61=5;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==KW_SHOW) ) {
                switch ( input.LA(2) ) {
                case KW_TABLE:
                    {
                    alt61=5;
                    }
                    break;
                case KW_PARTITIONS:
                    {
                    alt61=4;
                    }
                    break;
                case KW_FUNCTIONS:
                    {
                    alt61=3;
                    }
                    break;
                case KW_TABLES:
                    {
                    alt61=2;
                    }
                    break;
                case KW_DATABASES:
                case KW_SCHEMAS:
                    {
                    alt61=1;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("554:1: showStatement : ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( showStmtIdentifier )? ) | KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? ) | KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? ) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) );", 61, 1, input);

                    throw nvae;
                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("554:1: showStatement : ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( showStmtIdentifier )? ) | KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? ) | KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? ) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) );", 61, 0, input);

                throw nvae;
            }
            switch (alt61) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:557:7: KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )?
                    {
                    KW_SHOW167=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement3248); 
                    stream_KW_SHOW.add(KW_SHOW167);

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:557:15: ( KW_DATABASES | KW_SCHEMAS )
                    int alt53=2;
                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==KW_DATABASES) ) {
                        alt53=1;
                    }
                    else if ( (LA53_0==KW_SCHEMAS) ) {
                        alt53=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("557:15: ( KW_DATABASES | KW_SCHEMAS )", 53, 0, input);

                        throw nvae;
                    }
                    switch (alt53) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:557:16: KW_DATABASES
                            {
                            KW_DATABASES168=(Token)input.LT(1);
                            match(input,KW_DATABASES,FOLLOW_KW_DATABASES_in_showStatement3251); 
                            stream_KW_DATABASES.add(KW_DATABASES168);


                            }
                            break;
                        case 2 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:557:29: KW_SCHEMAS
                            {
                            KW_SCHEMAS169=(Token)input.LT(1);
                            match(input,KW_SCHEMAS,FOLLOW_KW_SCHEMAS_in_showStatement3253); 
                            stream_KW_SCHEMAS.add(KW_SCHEMAS169);


                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:557:41: ( KW_LIKE showStmtIdentifier )?
                    int alt54=2;
                    int LA54_0 = input.LA(1);

                    if ( (LA54_0==KW_LIKE) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:557:42: KW_LIKE showStmtIdentifier
                            {
                            KW_LIKE170=(Token)input.LT(1);
                            match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement3257); 
                            stream_KW_LIKE.add(KW_LIKE170);

                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement3259);
                            showStmtIdentifier171=showStmtIdentifier();
                            _fsp--;

                            stream_showStmtIdentifier.add(showStmtIdentifier171.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showStmtIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 557:71: -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:557:74: ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOWDATABASES, "TOK_SHOWDATABASES"), root_1);

                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:557:94: ( showStmtIdentifier )?
                        if ( stream_showStmtIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showStmtIdentifier.next());

                        }
                        stream_showStmtIdentifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:558:7: KW_SHOW KW_TABLES ( showStmtIdentifier )?
                    {
                    KW_SHOW172=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement3278); 
                    stream_KW_SHOW.add(KW_SHOW172);

                    KW_TABLES173=(Token)input.LT(1);
                    match(input,KW_TABLES,FOLLOW_KW_TABLES_in_showStatement3280); 
                    stream_KW_TABLES.add(KW_TABLES173);

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:558:25: ( showStmtIdentifier )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==StringLiteral||LA55_0==Identifier) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:558:25: showStmtIdentifier
                            {
                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement3282);
                            showStmtIdentifier174=showStmtIdentifier();
                            _fsp--;

                            stream_showStmtIdentifier.add(showStmtIdentifier174.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showStmtIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 558:46: -> ^( TOK_SHOWTABLES ( showStmtIdentifier )? )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:558:49: ^( TOK_SHOWTABLES ( showStmtIdentifier )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOWTABLES, "TOK_SHOWTABLES"), root_1);

                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:558:66: ( showStmtIdentifier )?
                        if ( stream_showStmtIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showStmtIdentifier.next());

                        }
                        stream_showStmtIdentifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:559:7: KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )?
                    {
                    KW_SHOW175=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement3301); 
                    stream_KW_SHOW.add(KW_SHOW175);

                    KW_FUNCTIONS176=(Token)input.LT(1);
                    match(input,KW_FUNCTIONS,FOLLOW_KW_FUNCTIONS_in_showStatement3303); 
                    stream_KW_FUNCTIONS.add(KW_FUNCTIONS176);

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:559:28: ( showStmtIdentifier )?
                    int alt56=2;
                    int LA56_0 = input.LA(1);

                    if ( (LA56_0==StringLiteral||LA56_0==Identifier) ) {
                        alt56=1;
                    }
                    switch (alt56) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:559:28: showStmtIdentifier
                            {
                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement3305);
                            showStmtIdentifier177=showStmtIdentifier();
                            _fsp--;

                            stream_showStmtIdentifier.add(showStmtIdentifier177.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showStmtIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 559:49: -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:559:52: ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOWFUNCTIONS, "TOK_SHOWFUNCTIONS"), root_1);

                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:559:72: ( showStmtIdentifier )?
                        if ( stream_showStmtIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showStmtIdentifier.next());

                        }
                        stream_showStmtIdentifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 4 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:560:7: KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )?
                    {
                    KW_SHOW178=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement3324); 
                    stream_KW_SHOW.add(KW_SHOW178);

                    KW_PARTITIONS179=(Token)input.LT(1);
                    match(input,KW_PARTITIONS,FOLLOW_KW_PARTITIONS_in_showStatement3326); 
                    stream_KW_PARTITIONS.add(KW_PARTITIONS179);

                    Identifier180=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_showStatement3328); 
                    stream_Identifier.add(Identifier180);

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:560:40: ( partitionSpec )?
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==KW_PARTITION) ) {
                        alt57=1;
                    }
                    switch (alt57) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:560:40: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_showStatement3330);
                            partitionSpec181=partitionSpec();
                            _fsp--;

                            stream_partitionSpec.add(partitionSpec181.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: Identifier, partitionSpec
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 560:55: -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:560:58: ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOWPARTITIONS, "TOK_SHOWPARTITIONS"), root_1);

                        adaptor.addChild(root_1, stream_Identifier.next());
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:560:90: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.next());

                        }
                        stream_partitionSpec.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 5 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:561:7: KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )?
                    {
                    KW_SHOW182=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement3350); 
                    stream_KW_SHOW.add(KW_SHOW182);

                    KW_TABLE183=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_showStatement3352); 
                    stream_KW_TABLE.add(KW_TABLE183);

                    KW_EXTENDED184=(Token)input.LT(1);
                    match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement3354); 
                    stream_KW_EXTENDED.add(KW_EXTENDED184);

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:561:36: ( ( KW_FROM | KW_IN ) db_name= Identifier )?
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( ((LA59_0>=KW_FROM && LA59_0<=KW_IN)) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:561:37: ( KW_FROM | KW_IN ) db_name= Identifier
                            {
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:561:37: ( KW_FROM | KW_IN )
                            int alt58=2;
                            int LA58_0 = input.LA(1);

                            if ( (LA58_0==KW_FROM) ) {
                                alt58=1;
                            }
                            else if ( (LA58_0==KW_IN) ) {
                                alt58=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("561:37: ( KW_FROM | KW_IN )", 58, 0, input);

                                throw nvae;
                            }
                            switch (alt58) {
                                case 1 :
                                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:561:38: KW_FROM
                                    {
                                    KW_FROM185=(Token)input.LT(1);
                                    match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement3358); 
                                    stream_KW_FROM.add(KW_FROM185);


                                    }
                                    break;
                                case 2 :
                                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:561:46: KW_IN
                                    {
                                    KW_IN186=(Token)input.LT(1);
                                    match(input,KW_IN,FOLLOW_KW_IN_in_showStatement3360); 
                                    stream_KW_IN.add(KW_IN186);


                                    }
                                    break;

                            }

                            db_name=(Token)input.LT(1);
                            match(input,Identifier,FOLLOW_Identifier_in_showStatement3365); 
                            stream_Identifier.add(db_name);


                            }
                            break;

                    }

                    KW_LIKE187=(Token)input.LT(1);
                    match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement3369); 
                    stream_KW_LIKE.add(KW_LIKE187);

                    pushFollow(FOLLOW_showStmtIdentifier_in_showStatement3371);
                    showStmtIdentifier188=showStmtIdentifier();
                    _fsp--;

                    stream_showStmtIdentifier.add(showStmtIdentifier188.getTree());
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:561:101: ( partitionSpec )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==KW_PARTITION) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:561:101: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_showStatement3373);
                            partitionSpec189=partitionSpec();
                            _fsp--;

                            stream_partitionSpec.add(partitionSpec189.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showStmtIdentifier, db_name, partitionSpec
                    // token labels: db_name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_db_name=new RewriteRuleTokenStream(adaptor,"token db_name",db_name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 562:5: -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:562:8: ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOW_TABLESTATUS, "TOK_SHOW_TABLESTATUS"), root_1);

                        adaptor.addChild(root_1, stream_showStmtIdentifier.next());
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:562:50: ( $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_db_name.next());

                        }
                        stream_db_name.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:562:60: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.next());

                        }
                        stream_partitionSpec.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end showStatement

    public static class metastoreCheck_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start metastoreCheck
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:565:1: metastoreCheck : KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )? -> ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? ) ;
    public final metastoreCheck_return metastoreCheck() throws RecognitionException {
        metastoreCheck_return retval = new metastoreCheck_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token repair=null;
        Token table=null;
        Token KW_MSCK190=null;
        Token KW_TABLE191=null;
        Token COMMA193=null;
        partitionSpec_return partitionSpec192 = null;

        partitionSpec_return partitionSpec194 = null;


        CommonTree repair_tree=null;
        CommonTree table_tree=null;
        CommonTree KW_MSCK190_tree=null;
        CommonTree KW_TABLE191_tree=null;
        CommonTree COMMA193_tree=null;
        RewriteRuleTokenStream stream_KW_MSCK=new RewriteRuleTokenStream(adaptor,"token KW_MSCK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_REPAIR=new RewriteRuleTokenStream(adaptor,"token KW_REPAIR");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("metastore check statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:568:5: ( KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )? -> ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:568:7: KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )?
            {
            KW_MSCK190=(Token)input.LT(1);
            match(input,KW_MSCK,FOLLOW_KW_MSCK_in_metastoreCheck3420); 
            stream_KW_MSCK.add(KW_MSCK190);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:568:15: (repair= KW_REPAIR )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==KW_REPAIR) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:568:16: repair= KW_REPAIR
                    {
                    repair=(Token)input.LT(1);
                    match(input,KW_REPAIR,FOLLOW_KW_REPAIR_in_metastoreCheck3425); 
                    stream_KW_REPAIR.add(repair);


                    }
                    break;

            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:568:35: ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==KW_TABLE) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:568:36: KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )*
                    {
                    KW_TABLE191=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_metastoreCheck3430); 
                    stream_KW_TABLE.add(KW_TABLE191);

                    table=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_metastoreCheck3434); 
                    stream_Identifier.add(table);

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:568:62: ( partitionSpec )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==KW_PARTITION) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:568:62: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_metastoreCheck3436);
                            partitionSpec192=partitionSpec();
                            _fsp--;

                            stream_partitionSpec.add(partitionSpec192.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:568:77: ( COMMA partitionSpec )*
                    loop64:
                    do {
                        int alt64=2;
                        int LA64_0 = input.LA(1);

                        if ( (LA64_0==COMMA) ) {
                            alt64=1;
                        }


                        switch (alt64) {
                    	case 1 :
                    	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:568:78: COMMA partitionSpec
                    	    {
                    	    COMMA193=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_metastoreCheck3440); 
                    	    stream_COMMA.add(COMMA193);

                    	    pushFollow(FOLLOW_partitionSpec_in_metastoreCheck3442);
                    	    partitionSpec194=partitionSpec();
                    	    _fsp--;

                    	    stream_partitionSpec.add(partitionSpec194.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop64;
                        }
                    } while (true);


                    }
                    break;

            }


            // AST REWRITE
            // elements: repair, partitionSpec, table
            // token labels: table, repair
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_table=new RewriteRuleTokenStream(adaptor,"token table",table);
            RewriteRuleTokenStream stream_repair=new RewriteRuleTokenStream(adaptor,"token repair",repair);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 569:5: -> ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:569:8: ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_MSCK, "TOK_MSCK"), root_1);

                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:569:19: ( $repair)?
                if ( stream_repair.hasNext() ) {
                    adaptor.addChild(root_1, stream_repair.next());

                }
                stream_repair.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:569:28: ( $table ( partitionSpec )* )?
                if ( stream_partitionSpec.hasNext()||stream_table.hasNext() ) {
                    adaptor.addChild(root_1, stream_table.next());
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:569:36: ( partitionSpec )*
                    while ( stream_partitionSpec.hasNext() ) {
                        adaptor.addChild(root_1, stream_partitionSpec.next());

                    }
                    stream_partitionSpec.reset();

                }
                stream_partitionSpec.reset();
                stream_table.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end metastoreCheck

    public static class createFunctionStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start createFunctionStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:572:1: createFunctionStatement : KW_CREATE KW_TEMPORARY KW_FUNCTION Identifier KW_AS StringLiteral -> ^( TOK_CREATEFUNCTION Identifier StringLiteral ) ;
    public final createFunctionStatement_return createFunctionStatement() throws RecognitionException {
        createFunctionStatement_return retval = new createFunctionStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CREATE195=null;
        Token KW_TEMPORARY196=null;
        Token KW_FUNCTION197=null;
        Token Identifier198=null;
        Token KW_AS199=null;
        Token StringLiteral200=null;

        CommonTree KW_CREATE195_tree=null;
        CommonTree KW_TEMPORARY196_tree=null;
        CommonTree KW_FUNCTION197_tree=null;
        CommonTree Identifier198_tree=null;
        CommonTree KW_AS199_tree=null;
        CommonTree StringLiteral200_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("create function statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:575:5: ( KW_CREATE KW_TEMPORARY KW_FUNCTION Identifier KW_AS StringLiteral -> ^( TOK_CREATEFUNCTION Identifier StringLiteral ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:575:7: KW_CREATE KW_TEMPORARY KW_FUNCTION Identifier KW_AS StringLiteral
            {
            KW_CREATE195=(Token)input.LT(1);
            match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createFunctionStatement3496); 
            stream_KW_CREATE.add(KW_CREATE195);

            KW_TEMPORARY196=(Token)input.LT(1);
            match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createFunctionStatement3498); 
            stream_KW_TEMPORARY.add(KW_TEMPORARY196);

            KW_FUNCTION197=(Token)input.LT(1);
            match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_createFunctionStatement3500); 
            stream_KW_FUNCTION.add(KW_FUNCTION197);

            Identifier198=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_createFunctionStatement3502); 
            stream_Identifier.add(Identifier198);

            KW_AS199=(Token)input.LT(1);
            match(input,KW_AS,FOLLOW_KW_AS_in_createFunctionStatement3504); 
            stream_KW_AS.add(KW_AS199);

            StringLiteral200=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_createFunctionStatement3506); 
            stream_StringLiteral.add(StringLiteral200);


            // AST REWRITE
            // elements: StringLiteral, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 576:5: -> ^( TOK_CREATEFUNCTION Identifier StringLiteral )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:576:8: ^( TOK_CREATEFUNCTION Identifier StringLiteral )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CREATEFUNCTION, "TOK_CREATEFUNCTION"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                adaptor.addChild(root_1, stream_StringLiteral.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end createFunctionStatement

    public static class dropFunctionStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropFunctionStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:579:1: dropFunctionStatement : KW_DROP KW_TEMPORARY KW_FUNCTION Identifier -> ^( TOK_DROPFUNCTION Identifier ) ;
    public final dropFunctionStatement_return dropFunctionStatement() throws RecognitionException {
        dropFunctionStatement_return retval = new dropFunctionStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_DROP201=null;
        Token KW_TEMPORARY202=null;
        Token KW_FUNCTION203=null;
        Token Identifier204=null;

        CommonTree KW_DROP201_tree=null;
        CommonTree KW_TEMPORARY202_tree=null;
        CommonTree KW_FUNCTION203_tree=null;
        CommonTree Identifier204_tree=null;
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("drop temporary function statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:582:5: ( KW_DROP KW_TEMPORARY KW_FUNCTION Identifier -> ^( TOK_DROPFUNCTION Identifier ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:582:7: KW_DROP KW_TEMPORARY KW_FUNCTION Identifier
            {
            KW_DROP201=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_dropFunctionStatement3547); 
            stream_KW_DROP.add(KW_DROP201);

            KW_TEMPORARY202=(Token)input.LT(1);
            match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_dropFunctionStatement3549); 
            stream_KW_TEMPORARY.add(KW_TEMPORARY202);

            KW_FUNCTION203=(Token)input.LT(1);
            match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_dropFunctionStatement3551); 
            stream_KW_FUNCTION.add(KW_FUNCTION203);

            Identifier204=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_dropFunctionStatement3553); 
            stream_Identifier.add(Identifier204);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 583:5: -> ^( TOK_DROPFUNCTION Identifier )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:583:8: ^( TOK_DROPFUNCTION Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DROPFUNCTION, "TOK_DROPFUNCTION"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropFunctionStatement

    public static class createViewStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start createViewStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:586:1: createViewStatement : KW_CREATE KW_VIEW ( ifNotExists )? name= Identifier ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( tablePropertiesPrefixed )? KW_AS selectStatement -> ^( TOK_CREATEVIEW $name ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( tablePropertiesPrefixed )? selectStatement ) ;
    public final createViewStatement_return createViewStatement() throws RecognitionException {
        createViewStatement_return retval = new createViewStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token KW_CREATE205=null;
        Token KW_VIEW206=null;
        Token LPAREN208=null;
        Token RPAREN210=null;
        Token KW_AS213=null;
        ifNotExists_return ifNotExists207 = null;

        columnNameCommentList_return columnNameCommentList209 = null;

        tableComment_return tableComment211 = null;

        tablePropertiesPrefixed_return tablePropertiesPrefixed212 = null;

        selectStatement_return selectStatement214 = null;


        CommonTree name_tree=null;
        CommonTree KW_CREATE205_tree=null;
        CommonTree KW_VIEW206_tree=null;
        CommonTree LPAREN208_tree=null;
        CommonTree RPAREN210_tree=null;
        CommonTree KW_AS213_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
        RewriteRuleSubtreeStream stream_columnNameCommentList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameCommentList");
        RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
        RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");

            msgs.push("create view statement");

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:591:5: ( KW_CREATE KW_VIEW ( ifNotExists )? name= Identifier ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( tablePropertiesPrefixed )? KW_AS selectStatement -> ^( TOK_CREATEVIEW $name ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( tablePropertiesPrefixed )? selectStatement ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:591:7: KW_CREATE KW_VIEW ( ifNotExists )? name= Identifier ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( tablePropertiesPrefixed )? KW_AS selectStatement
            {
            KW_CREATE205=(Token)input.LT(1);
            match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createViewStatement3592); 
            stream_KW_CREATE.add(KW_CREATE205);

            KW_VIEW206=(Token)input.LT(1);
            match(input,KW_VIEW,FOLLOW_KW_VIEW_in_createViewStatement3594); 
            stream_KW_VIEW.add(KW_VIEW206);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:591:25: ( ifNotExists )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==KW_IF) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:591:25: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_createViewStatement3596);
                    ifNotExists207=ifNotExists();
                    _fsp--;

                    stream_ifNotExists.add(ifNotExists207.getTree());

                    }
                    break;

            }

            name=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_createViewStatement3601); 
            stream_Identifier.add(name);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:592:9: ( LPAREN columnNameCommentList RPAREN )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==LPAREN) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:592:10: LPAREN columnNameCommentList RPAREN
                    {
                    LPAREN208=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_createViewStatement3612); 
                    stream_LPAREN.add(LPAREN208);

                    pushFollow(FOLLOW_columnNameCommentList_in_createViewStatement3614);
                    columnNameCommentList209=columnNameCommentList();
                    _fsp--;

                    stream_columnNameCommentList.add(columnNameCommentList209.getTree());
                    RPAREN210=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_createViewStatement3616); 
                    stream_RPAREN.add(RPAREN210);


                    }
                    break;

            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:592:48: ( tableComment )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==KW_COMMENT) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:592:48: tableComment
                    {
                    pushFollow(FOLLOW_tableComment_in_createViewStatement3620);
                    tableComment211=tableComment();
                    _fsp--;

                    stream_tableComment.add(tableComment211.getTree());

                    }
                    break;

            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:593:9: ( tablePropertiesPrefixed )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==KW_TBLPROPERTIES) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:593:9: tablePropertiesPrefixed
                    {
                    pushFollow(FOLLOW_tablePropertiesPrefixed_in_createViewStatement3631);
                    tablePropertiesPrefixed212=tablePropertiesPrefixed();
                    _fsp--;

                    stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed212.getTree());

                    }
                    break;

            }

            KW_AS213=(Token)input.LT(1);
            match(input,KW_AS,FOLLOW_KW_AS_in_createViewStatement3642); 
            stream_KW_AS.add(KW_AS213);

            pushFollow(FOLLOW_selectStatement_in_createViewStatement3652);
            selectStatement214=selectStatement();
            _fsp--;

            stream_selectStatement.add(selectStatement214.getTree());

            // AST REWRITE
            // elements: tablePropertiesPrefixed, selectStatement, columnNameCommentList, tableComment, name, ifNotExists
            // token labels: name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 596:5: -> ^( TOK_CREATEVIEW $name ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( tablePropertiesPrefixed )? selectStatement )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:596:8: ^( TOK_CREATEVIEW $name ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( tablePropertiesPrefixed )? selectStatement )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CREATEVIEW, "TOK_CREATEVIEW"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:596:31: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.next());

                }
                stream_ifNotExists.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:597:10: ( columnNameCommentList )?
                if ( stream_columnNameCommentList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameCommentList.next());

                }
                stream_columnNameCommentList.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:598:10: ( tableComment )?
                if ( stream_tableComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableComment.next());

                }
                stream_tableComment.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:599:10: ( tablePropertiesPrefixed )?
                if ( stream_tablePropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePropertiesPrefixed.next());

                }
                stream_tablePropertiesPrefixed.reset();
                adaptor.addChild(root_1, stream_selectStatement.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end createViewStatement

    public static class dropViewStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropViewStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:604:1: dropViewStatement : KW_DROP KW_VIEW Identifier -> ^( TOK_DROPVIEW Identifier ) ;
    public final dropViewStatement_return dropViewStatement() throws RecognitionException {
        dropViewStatement_return retval = new dropViewStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_DROP215=null;
        Token KW_VIEW216=null;
        Token Identifier217=null;

        CommonTree KW_DROP215_tree=null;
        CommonTree KW_VIEW216_tree=null;
        CommonTree Identifier217_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("drop view statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:607:5: ( KW_DROP KW_VIEW Identifier -> ^( TOK_DROPVIEW Identifier ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:607:7: KW_DROP KW_VIEW Identifier
            {
            KW_DROP215=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_dropViewStatement3751); 
            stream_KW_DROP.add(KW_DROP215);

            KW_VIEW216=(Token)input.LT(1);
            match(input,KW_VIEW,FOLLOW_KW_VIEW_in_dropViewStatement3753); 
            stream_KW_VIEW.add(KW_VIEW216);

            Identifier217=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_dropViewStatement3755); 
            stream_Identifier.add(Identifier217);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 608:5: -> ^( TOK_DROPVIEW Identifier )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:608:8: ^( TOK_DROPVIEW Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DROPVIEW, "TOK_DROPVIEW"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropViewStatement

    public static class createUserStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start createUserStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:611:1: createUserStatement : KW_CREATE kwUSER userItem ( COMMA userItem )* -> ^( TOK_CREATEUSER ( userItem )+ ) ;
    public final createUserStatement_return createUserStatement() throws RecognitionException {
        createUserStatement_return retval = new createUserStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CREATE218=null;
        Token COMMA221=null;
        kwUSER_return kwUSER219 = null;

        userItem_return userItem220 = null;

        userItem_return userItem222 = null;


        CommonTree KW_CREATE218_tree=null;
        CommonTree COMMA221_tree=null;
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_userItem=new RewriteRuleSubtreeStream(adaptor,"rule userItem");
        RewriteRuleSubtreeStream stream_kwUSER=new RewriteRuleSubtreeStream(adaptor,"rule kwUSER");
         msgs.push("create user statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:614:5: ( KW_CREATE kwUSER userItem ( COMMA userItem )* -> ^( TOK_CREATEUSER ( userItem )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:614:7: KW_CREATE kwUSER userItem ( COMMA userItem )*
            {
            KW_CREATE218=(Token)input.LT(1);
            match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createUserStatement3794); 
            stream_KW_CREATE.add(KW_CREATE218);

            pushFollow(FOLLOW_kwUSER_in_createUserStatement3796);
            kwUSER219=kwUSER();
            _fsp--;

            stream_kwUSER.add(kwUSER219.getTree());
            pushFollow(FOLLOW_userItem_in_createUserStatement3798);
            userItem220=userItem();
            _fsp--;

            stream_userItem.add(userItem220.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:614:33: ( COMMA userItem )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==COMMA) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:614:34: COMMA userItem
            	    {
            	    COMMA221=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_createUserStatement3801); 
            	    stream_COMMA.add(COMMA221);

            	    pushFollow(FOLLOW_userItem_in_createUserStatement3803);
            	    userItem222=userItem();
            	    _fsp--;

            	    stream_userItem.add(userItem222.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            // AST REWRITE
            // elements: userItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 615:5: -> ^( TOK_CREATEUSER ( userItem )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:615:8: ^( TOK_CREATEUSER ( userItem )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CREATEUSER, "TOK_CREATEUSER"), root_1);

                if ( !(stream_userItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_userItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_userItem.next());

                }
                stream_userItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end createUserStatement

    public static class userItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start userItem
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:618:1: userItem : ( Identifier ( KW_IDENTIFIED KW_BY StringLiteral )? ) -> ^( TOK_USER Identifier ( StringLiteral )? ) ;
    public final userItem_return userItem() throws RecognitionException {
        userItem_return retval = new userItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier223=null;
        Token KW_IDENTIFIED224=null;
        Token KW_BY225=null;
        Token StringLiteral226=null;

        CommonTree Identifier223_tree=null;
        CommonTree KW_IDENTIFIED224_tree=null;
        CommonTree KW_BY225_tree=null;
        CommonTree StringLiteral226_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_IDENTIFIED=new RewriteRuleTokenStream(adaptor,"token KW_IDENTIFIED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

         msgs.push("user item"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:621:5: ( ( Identifier ( KW_IDENTIFIED KW_BY StringLiteral )? ) -> ^( TOK_USER Identifier ( StringLiteral )? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:621:7: ( Identifier ( KW_IDENTIFIED KW_BY StringLiteral )? )
            {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:621:7: ( Identifier ( KW_IDENTIFIED KW_BY StringLiteral )? )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:621:8: Identifier ( KW_IDENTIFIED KW_BY StringLiteral )?
            {
            Identifier223=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_userItem3846); 
            stream_Identifier.add(Identifier223);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:621:19: ( KW_IDENTIFIED KW_BY StringLiteral )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==KW_IDENTIFIED) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:621:20: KW_IDENTIFIED KW_BY StringLiteral
                    {
                    KW_IDENTIFIED224=(Token)input.LT(1);
                    match(input,KW_IDENTIFIED,FOLLOW_KW_IDENTIFIED_in_userItem3849); 
                    stream_KW_IDENTIFIED.add(KW_IDENTIFIED224);

                    KW_BY225=(Token)input.LT(1);
                    match(input,KW_BY,FOLLOW_KW_BY_in_userItem3851); 
                    stream_KW_BY.add(KW_BY225);

                    StringLiteral226=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_userItem3853); 
                    stream_StringLiteral.add(StringLiteral226);


                    }
                    break;

            }


            }


            // AST REWRITE
            // elements: StringLiteral, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 622:5: -> ^( TOK_USER Identifier ( StringLiteral )? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:622:8: ^( TOK_USER Identifier ( StringLiteral )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_USER, "TOK_USER"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:622:30: ( StringLiteral )?
                if ( stream_StringLiteral.hasNext() ) {
                    adaptor.addChild(root_1, stream_StringLiteral.next());

                }
                stream_StringLiteral.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end userItem

    public static class dropUserStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropUserStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:625:1: dropUserStatement : KW_DROP kwUSER Identifier ( COMMA Identifier )* -> ^( TOK_DROPUSER ( Identifier )+ ) ;
    public final dropUserStatement_return dropUserStatement() throws RecognitionException {
        dropUserStatement_return retval = new dropUserStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_DROP227=null;
        Token Identifier229=null;
        Token COMMA230=null;
        Token Identifier231=null;
        kwUSER_return kwUSER228 = null;


        CommonTree KW_DROP227_tree=null;
        CommonTree Identifier229_tree=null;
        CommonTree COMMA230_tree=null;
        CommonTree Identifier231_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_kwUSER=new RewriteRuleSubtreeStream(adaptor,"rule kwUSER");
         msgs.push("drop user statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:628:5: ( KW_DROP kwUSER Identifier ( COMMA Identifier )* -> ^( TOK_DROPUSER ( Identifier )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:628:7: KW_DROP kwUSER Identifier ( COMMA Identifier )*
            {
            KW_DROP227=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_dropUserStatement3899); 
            stream_KW_DROP.add(KW_DROP227);

            pushFollow(FOLLOW_kwUSER_in_dropUserStatement3901);
            kwUSER228=kwUSER();
            _fsp--;

            stream_kwUSER.add(kwUSER228.getTree());
            Identifier229=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_dropUserStatement3903); 
            stream_Identifier.add(Identifier229);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:628:33: ( COMMA Identifier )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==COMMA) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:628:34: COMMA Identifier
            	    {
            	    COMMA230=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_dropUserStatement3906); 
            	    stream_COMMA.add(COMMA230);

            	    Identifier231=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_dropUserStatement3908); 
            	    stream_Identifier.add(Identifier231);


            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 629:5: -> ^( TOK_DROPUSER ( Identifier )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:629:8: ^( TOK_DROPUSER ( Identifier )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DROPUSER, "TOK_DROPUSER"), root_1);

                if ( !(stream_Identifier.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_Identifier.next());

                }
                stream_Identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropUserStatement

    public static class alterUserStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterUserStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:632:1: alterUserStatement : KW_ALTER kwUSER Identifier KW_SET kwPASSWORD StringLiteral -> ^( TOK_SETPASSWORD Identifier StringLiteral ) ;
    public final alterUserStatement_return alterUserStatement() throws RecognitionException {
        alterUserStatement_return retval = new alterUserStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ALTER232=null;
        Token Identifier234=null;
        Token KW_SET235=null;
        Token StringLiteral237=null;
        kwUSER_return kwUSER233 = null;

        kwPASSWORD_return kwPASSWORD236 = null;


        CommonTree KW_ALTER232_tree=null;
        CommonTree Identifier234_tree=null;
        CommonTree KW_SET235_tree=null;
        CommonTree StringLiteral237_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_ALTER=new RewriteRuleTokenStream(adaptor,"token KW_ALTER");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_kwPASSWORD=new RewriteRuleSubtreeStream(adaptor,"rule kwPASSWORD");
        RewriteRuleSubtreeStream stream_kwUSER=new RewriteRuleSubtreeStream(adaptor,"rule kwUSER");
         msgs.push("alter user statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:635:5: ( KW_ALTER kwUSER Identifier KW_SET kwPASSWORD StringLiteral -> ^( TOK_SETPASSWORD Identifier StringLiteral ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:635:7: KW_ALTER kwUSER Identifier KW_SET kwPASSWORD StringLiteral
            {
            KW_ALTER232=(Token)input.LT(1);
            match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterUserStatement3950); 
            stream_KW_ALTER.add(KW_ALTER232);

            pushFollow(FOLLOW_kwUSER_in_alterUserStatement3952);
            kwUSER233=kwUSER();
            _fsp--;

            stream_kwUSER.add(kwUSER233.getTree());
            Identifier234=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterUserStatement3954); 
            stream_Identifier.add(Identifier234);

            KW_SET235=(Token)input.LT(1);
            match(input,KW_SET,FOLLOW_KW_SET_in_alterUserStatement3956); 
            stream_KW_SET.add(KW_SET235);

            pushFollow(FOLLOW_kwPASSWORD_in_alterUserStatement3958);
            kwPASSWORD236=kwPASSWORD();
            _fsp--;

            stream_kwPASSWORD.add(kwPASSWORD236.getTree());
            StringLiteral237=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_alterUserStatement3960); 
            stream_StringLiteral.add(StringLiteral237);


            // AST REWRITE
            // elements: Identifier, StringLiteral
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 636:5: -> ^( TOK_SETPASSWORD Identifier StringLiteral )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:636:8: ^( TOK_SETPASSWORD Identifier StringLiteral )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SETPASSWORD, "TOK_SETPASSWORD"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                adaptor.addChild(root_1, stream_StringLiteral.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterUserStatement

    public static class showStmtIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start showStmtIdentifier
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:639:1: showStmtIdentifier : ( Identifier | StringLiteral );
    public final showStmtIdentifier_return showStmtIdentifier() throws RecognitionException {
        showStmtIdentifier_return retval = new showStmtIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set238=null;

        CommonTree set238_tree=null;

         msgs.push("identifier for show statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:642:5: ( Identifier | StringLiteral )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set238=(Token)input.LT(1);
            if ( input.LA(1)==StringLiteral||input.LA(1)==Identifier ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set238));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_showStmtIdentifier0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end showStmtIdentifier

    public static class tableComment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableComment
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:646:1: tableComment : KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) ;
    public final tableComment_return tableComment() throws RecognitionException {
        tableComment_return retval = new tableComment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token comment=null;
        Token KW_COMMENT239=null;

        CommonTree comment_tree=null;
        CommonTree KW_COMMENT239_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

         msgs.push("table's comment"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:649:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:650:7: KW_COMMENT comment= StringLiteral
            {
            KW_COMMENT239=(Token)input.LT(1);
            match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_tableComment4042); 
            stream_KW_COMMENT.add(KW_COMMENT239);

            comment=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableComment4046); 
            stream_StringLiteral.add(comment);


            // AST REWRITE
            // elements: comment
            // token labels: comment
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 650:41: -> ^( TOK_TABLECOMMENT $comment)
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:650:44: ^( TOK_TABLECOMMENT $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLECOMMENT, "TOK_TABLECOMMENT"), root_1);

                adaptor.addChild(root_1, stream_comment.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableComment

    public static class tablePartition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tablePartition
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:653:1: tablePartition : KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN -> ^( TOK_TABLEPARTCOLS columnNameTypeList ) ;
    public final tablePartition_return tablePartition() throws RecognitionException {
        tablePartition_return retval = new tablePartition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_PARTITIONED240=null;
        Token KW_BY241=null;
        Token LPAREN242=null;
        Token RPAREN244=null;
        columnNameTypeList_return columnNameTypeList243 = null;


        CommonTree KW_PARTITIONED240_tree=null;
        CommonTree KW_BY241_tree=null;
        CommonTree LPAREN242_tree=null;
        CommonTree RPAREN244_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
         msgs.push("table partition specification"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:656:5: ( KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN -> ^( TOK_TABLEPARTCOLS columnNameTypeList ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:656:7: KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN
            {
            KW_PARTITIONED240=(Token)input.LT(1);
            match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_tablePartition4083); 
            stream_KW_PARTITIONED.add(KW_PARTITIONED240);

            KW_BY241=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_tablePartition4085); 
            stream_KW_BY.add(KW_BY241);

            LPAREN242=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_tablePartition4087); 
            stream_LPAREN.add(LPAREN242);

            pushFollow(FOLLOW_columnNameTypeList_in_tablePartition4089);
            columnNameTypeList243=columnNameTypeList();
            _fsp--;

            stream_columnNameTypeList.add(columnNameTypeList243.getTree());
            RPAREN244=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_tablePartition4091); 
            stream_RPAREN.add(RPAREN244);


            // AST REWRITE
            // elements: columnNameTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 657:5: -> ^( TOK_TABLEPARTCOLS columnNameTypeList )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:657:8: ^( TOK_TABLEPARTCOLS columnNameTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEPARTCOLS, "TOK_TABLEPARTCOLS"), root_1);

                adaptor.addChild(root_1, stream_columnNameTypeList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tablePartition

    public static class tableBuckets_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableBuckets
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:660:1: tableBuckets : KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num) ;
    public final tableBuckets_return tableBuckets() throws RecognitionException {
        tableBuckets_return retval = new tableBuckets_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token num=null;
        Token KW_CLUSTERED245=null;
        Token KW_BY246=null;
        Token LPAREN247=null;
        Token RPAREN248=null;
        Token KW_SORTED249=null;
        Token KW_BY250=null;
        Token LPAREN251=null;
        Token RPAREN252=null;
        Token KW_INTO253=null;
        Token KW_BUCKETS254=null;
        columnNameList_return bucketCols = null;

        columnNameOrderList_return sortCols = null;


        CommonTree num_tree=null;
        CommonTree KW_CLUSTERED245_tree=null;
        CommonTree KW_BY246_tree=null;
        CommonTree LPAREN247_tree=null;
        CommonTree RPAREN248_tree=null;
        CommonTree KW_SORTED249_tree=null;
        CommonTree KW_BY250_tree=null;
        CommonTree LPAREN251_tree=null;
        CommonTree RPAREN252_tree=null;
        CommonTree KW_INTO253_tree=null;
        CommonTree KW_BUCKETS254_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_BUCKETS=new RewriteRuleTokenStream(adaptor,"token KW_BUCKETS");
        RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_KW_SORTED=new RewriteRuleTokenStream(adaptor,"token KW_SORTED");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        RewriteRuleSubtreeStream stream_columnNameOrderList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrderList");
         msgs.push("table buckets specification"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:663:5: ( KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:664:7: KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS
            {
            KW_CLUSTERED245=(Token)input.LT(1);
            match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_tableBuckets4136); 
            stream_KW_CLUSTERED.add(KW_CLUSTERED245);

            KW_BY246=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets4138); 
            stream_KW_BY.add(KW_BY246);

            LPAREN247=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets4140); 
            stream_LPAREN.add(LPAREN247);

            pushFollow(FOLLOW_columnNameList_in_tableBuckets4144);
            bucketCols=columnNameList();
            _fsp--;

            stream_columnNameList.add(bucketCols.getTree());
            RPAREN248=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets4146); 
            stream_RPAREN.add(RPAREN248);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:664:66: ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==KW_SORTED) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:664:67: KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN
                    {
                    KW_SORTED249=(Token)input.LT(1);
                    match(input,KW_SORTED,FOLLOW_KW_SORTED_in_tableBuckets4149); 
                    stream_KW_SORTED.add(KW_SORTED249);

                    KW_BY250=(Token)input.LT(1);
                    match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets4151); 
                    stream_KW_BY.add(KW_BY250);

                    LPAREN251=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets4153); 
                    stream_LPAREN.add(LPAREN251);

                    pushFollow(FOLLOW_columnNameOrderList_in_tableBuckets4157);
                    sortCols=columnNameOrderList();
                    _fsp--;

                    stream_columnNameOrderList.add(sortCols.getTree());
                    RPAREN252=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets4159); 
                    stream_RPAREN.add(RPAREN252);


                    }
                    break;

            }

            KW_INTO253=(Token)input.LT(1);
            match(input,KW_INTO,FOLLOW_KW_INTO_in_tableBuckets4163); 
            stream_KW_INTO.add(KW_INTO253);

            num=(Token)input.LT(1);
            match(input,Number,FOLLOW_Number_in_tableBuckets4167); 
            stream_Number.add(num);

            KW_BUCKETS254=(Token)input.LT(1);
            match(input,KW_BUCKETS,FOLLOW_KW_BUCKETS_in_tableBuckets4169); 
            stream_KW_BUCKETS.add(KW_BUCKETS254);


            // AST REWRITE
            // elements: sortCols, bucketCols, num
            // token labels: num
            // rule labels: sortCols, retval, bucketCols
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
            RewriteRuleSubtreeStream stream_sortCols=new RewriteRuleSubtreeStream(adaptor,"token sortCols",sortCols!=null?sortCols.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_bucketCols=new RewriteRuleSubtreeStream(adaptor,"token bucketCols",bucketCols!=null?bucketCols.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 665:5: -> ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num)
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:665:8: ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEBUCKETS, "TOK_TABLEBUCKETS"), root_1);

                adaptor.addChild(root_1, stream_bucketCols.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:665:39: ( $sortCols)?
                if ( stream_sortCols.hasNext() ) {
                    adaptor.addChild(root_1, stream_sortCols.next());

                }
                stream_sortCols.reset();
                adaptor.addChild(root_1, stream_num.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableBuckets

    public static class rowFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start rowFormat
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:668:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );
    public final rowFormat_return rowFormat() throws RecognitionException {
        rowFormat_return retval = new rowFormat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        rowFormatSerde_return rowFormatSerde255 = null;

        rowFormatDelimited_return rowFormatDelimited256 = null;


        RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
        RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");
         msgs.push("serde specification"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:671:5: ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) )
            int alt74=3;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==KW_ROW) ) {
                int LA74_1 = input.LA(2);

                if ( (LA74_1==KW_FORMAT) ) {
                    int LA74_21 = input.LA(3);

                    if ( (LA74_21==KW_SERDE) ) {
                        alt74=1;
                    }
                    else if ( (LA74_21==KW_DELIMITED) ) {
                        alt74=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("668:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );", 74, 21, input);

                        throw nvae;
                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("668:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );", 74, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA74_0==EOF||LA74_0==RPAREN||LA74_0==KW_FROM||(LA74_0>=KW_RECORDREADER && LA74_0<=KW_RECORDWRITER)||LA74_0==KW_MAP||LA74_0==KW_UNION||LA74_0==KW_INSERT||(LA74_0>=KW_LIMIT && LA74_0<=KW_SELECT)||LA74_0==KW_USING||LA74_0==KW_REDUCE||(LA74_0>=KW_WHERE && LA74_0<=KW_SORT)) ) {
                alt74=3;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("668:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );", 74, 0, input);

                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:671:7: rowFormatSerde
                    {
                    pushFollow(FOLLOW_rowFormatSerde_in_rowFormat4216);
                    rowFormatSerde255=rowFormatSerde();
                    _fsp--;

                    stream_rowFormatSerde.add(rowFormatSerde255.getTree());

                    // AST REWRITE
                    // elements: rowFormatSerde
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 671:22: -> ^( TOK_SERDE rowFormatSerde )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:671:25: ^( TOK_SERDE rowFormatSerde )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);

                        adaptor.addChild(root_1, stream_rowFormatSerde.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:672:7: rowFormatDelimited
                    {
                    pushFollow(FOLLOW_rowFormatDelimited_in_rowFormat4232);
                    rowFormatDelimited256=rowFormatDelimited();
                    _fsp--;

                    stream_rowFormatDelimited.add(rowFormatDelimited256.getTree());

                    // AST REWRITE
                    // elements: rowFormatDelimited
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 672:26: -> ^( TOK_SERDE rowFormatDelimited )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:672:29: ^( TOK_SERDE rowFormatDelimited )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);

                        adaptor.addChild(root_1, stream_rowFormatDelimited.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:673:9: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 673:9: -> ^( TOK_SERDE )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:673:12: ^( TOK_SERDE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end rowFormat

    public static class recordReader_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start recordReader
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:676:1: recordReader : ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) );
    public final recordReader_return recordReader() throws RecognitionException {
        recordReader_return retval = new recordReader_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_RECORDREADER257=null;
        Token StringLiteral258=null;

        CommonTree KW_RECORDREADER257_tree=null;
        CommonTree StringLiteral258_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_RECORDREADER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDREADER");

         msgs.push("record reader specification"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:679:5: ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) )
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==KW_RECORDREADER) ) {
                alt75=1;
            }
            else if ( (LA75_0==EOF||LA75_0==RPAREN||LA75_0==KW_FROM||LA75_0==KW_MAP||LA75_0==KW_UNION||LA75_0==KW_INSERT||(LA75_0>=KW_LIMIT && LA75_0<=KW_SELECT)||LA75_0==KW_REDUCE||(LA75_0>=KW_WHERE && LA75_0<=KW_SORT)) ) {
                alt75=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("676:1: recordReader : ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) );", 75, 0, input);

                throw nvae;
            }
            switch (alt75) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:679:7: KW_RECORDREADER StringLiteral
                    {
                    KW_RECORDREADER257=(Token)input.LT(1);
                    match(input,KW_RECORDREADER,FOLLOW_KW_RECORDREADER_in_recordReader4281); 
                    stream_KW_RECORDREADER.add(KW_RECORDREADER257);

                    StringLiteral258=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_recordReader4283); 
                    stream_StringLiteral.add(StringLiteral258);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 679:37: -> ^( TOK_RECORDREADER StringLiteral )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:679:40: ^( TOK_RECORDREADER StringLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER"), root_1);

                        adaptor.addChild(root_1, stream_StringLiteral.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:680:9: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 680:9: -> ^( TOK_RECORDREADER )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:680:12: ^( TOK_RECORDREADER )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end recordReader

    public static class recordWriter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start recordWriter
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:683:1: recordWriter : ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) );
    public final recordWriter_return recordWriter() throws RecognitionException {
        recordWriter_return retval = new recordWriter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_RECORDWRITER259=null;
        Token StringLiteral260=null;

        CommonTree KW_RECORDWRITER259_tree=null;
        CommonTree StringLiteral260_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_RECORDWRITER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDWRITER");

         msgs.push("record writer specification"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:686:5: ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) )
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==KW_RECORDWRITER) ) {
                alt76=1;
            }
            else if ( (LA76_0==KW_USING) ) {
                alt76=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("683:1: recordWriter : ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) );", 76, 0, input);

                throw nvae;
            }
            switch (alt76) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:686:7: KW_RECORDWRITER StringLiteral
                    {
                    KW_RECORDWRITER259=(Token)input.LT(1);
                    match(input,KW_RECORDWRITER,FOLLOW_KW_RECORDWRITER_in_recordWriter4332); 
                    stream_KW_RECORDWRITER.add(KW_RECORDWRITER259);

                    StringLiteral260=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_recordWriter4334); 
                    stream_StringLiteral.add(StringLiteral260);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 686:37: -> ^( TOK_RECORDWRITER StringLiteral )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:686:40: ^( TOK_RECORDWRITER StringLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER"), root_1);

                        adaptor.addChild(root_1, stream_StringLiteral.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:687:9: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 687:9: -> ^( TOK_RECORDWRITER )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:687:12: ^( TOK_RECORDWRITER )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end recordWriter

    public static class rowFormatSerde_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start rowFormatSerde
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:690:1: rowFormatSerde : KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) ;
    public final rowFormatSerde_return rowFormatSerde() throws RecognitionException {
        rowFormatSerde_return retval = new rowFormatSerde_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token KW_ROW261=null;
        Token KW_FORMAT262=null;
        Token KW_SERDE263=null;
        Token KW_WITH264=null;
        Token KW_SERDEPROPERTIES265=null;
        tableProperties_return serdeprops = null;


        CommonTree name_tree=null;
        CommonTree KW_ROW261_tree=null;
        CommonTree KW_FORMAT262_tree=null;
        CommonTree KW_SERDE263_tree=null;
        CommonTree KW_WITH264_tree=null;
        CommonTree KW_SERDEPROPERTIES265_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
        RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
        RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         msgs.push("serde format specification"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:693:5: ( KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:693:7: KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
            {
            KW_ROW261=(Token)input.LT(1);
            match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatSerde4383); 
            stream_KW_ROW.add(KW_ROW261);

            KW_FORMAT262=(Token)input.LT(1);
            match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatSerde4385); 
            stream_KW_FORMAT.add(KW_FORMAT262);

            KW_SERDE263=(Token)input.LT(1);
            match(input,KW_SERDE,FOLLOW_KW_SERDE_in_rowFormatSerde4387); 
            stream_KW_SERDE.add(KW_SERDE263);

            name=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_rowFormatSerde4391); 
            stream_StringLiteral.add(name);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:693:52: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==KW_WITH) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:693:53: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
                    {
                    KW_WITH264=(Token)input.LT(1);
                    match(input,KW_WITH,FOLLOW_KW_WITH_in_rowFormatSerde4394); 
                    stream_KW_WITH.add(KW_WITH264);

                    KW_SERDEPROPERTIES265=(Token)input.LT(1);
                    match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde4396); 
                    stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES265);

                    pushFollow(FOLLOW_tableProperties_in_rowFormatSerde4400);
                    serdeprops=tableProperties();
                    _fsp--;

                    stream_tableProperties.add(serdeprops.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: serdeprops, name
            // token labels: name
            // rule labels: serdeprops, retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"token serdeprops",serdeprops!=null?serdeprops.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 694:5: -> ^( TOK_SERDENAME $name ( $serdeprops)? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:694:8: ^( TOK_SERDENAME $name ( $serdeprops)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SERDENAME, "TOK_SERDENAME"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:694:30: ( $serdeprops)?
                if ( stream_serdeprops.hasNext() ) {
                    adaptor.addChild(root_1, stream_serdeprops.next());

                }
                stream_serdeprops.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end rowFormatSerde

    public static class rowFormatDelimited_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start rowFormatDelimited
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:697:1: rowFormatDelimited : KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ) ;
    public final rowFormatDelimited_return rowFormatDelimited() throws RecognitionException {
        rowFormatDelimited_return retval = new rowFormatDelimited_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ROW266=null;
        Token KW_FORMAT267=null;
        Token KW_DELIMITED268=null;
        tableRowFormatFieldIdentifier_return tableRowFormatFieldIdentifier269 = null;

        tableRowFormatCollItemsIdentifier_return tableRowFormatCollItemsIdentifier270 = null;

        tableRowFormatMapKeysIdentifier_return tableRowFormatMapKeysIdentifier271 = null;

        tableRowFormatLinesIdentifier_return tableRowFormatLinesIdentifier272 = null;


        CommonTree KW_ROW266_tree=null;
        CommonTree KW_FORMAT267_tree=null;
        CommonTree KW_DELIMITED268_tree=null;
        RewriteRuleTokenStream stream_KW_DELIMITED=new RewriteRuleTokenStream(adaptor,"token KW_DELIMITED");
        RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
        RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
        RewriteRuleSubtreeStream stream_tableRowFormatMapKeysIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatMapKeysIdentifier");
        RewriteRuleSubtreeStream stream_tableRowFormatFieldIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatFieldIdentifier");
        RewriteRuleSubtreeStream stream_tableRowFormatCollItemsIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatCollItemsIdentifier");
        RewriteRuleSubtreeStream stream_tableRowFormatLinesIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatLinesIdentifier");
         msgs.push("serde properties specification"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:700:5: ( KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:701:7: KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )?
            {
            KW_ROW266=(Token)input.LT(1);
            match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatDelimited4452); 
            stream_KW_ROW.add(KW_ROW266);

            KW_FORMAT267=(Token)input.LT(1);
            match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatDelimited4454); 
            stream_KW_FORMAT.add(KW_FORMAT267);

            KW_DELIMITED268=(Token)input.LT(1);
            match(input,KW_DELIMITED,FOLLOW_KW_DELIMITED_in_rowFormatDelimited4456); 
            stream_KW_DELIMITED.add(KW_DELIMITED268);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:701:37: ( tableRowFormatFieldIdentifier )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==KW_FIELDS) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:701:37: tableRowFormatFieldIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited4458);
                    tableRowFormatFieldIdentifier269=tableRowFormatFieldIdentifier();
                    _fsp--;

                    stream_tableRowFormatFieldIdentifier.add(tableRowFormatFieldIdentifier269.getTree());

                    }
                    break;

            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:701:68: ( tableRowFormatCollItemsIdentifier )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==KW_COLLECTION) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:701:68: tableRowFormatCollItemsIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited4461);
                    tableRowFormatCollItemsIdentifier270=tableRowFormatCollItemsIdentifier();
                    _fsp--;

                    stream_tableRowFormatCollItemsIdentifier.add(tableRowFormatCollItemsIdentifier270.getTree());

                    }
                    break;

            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:701:103: ( tableRowFormatMapKeysIdentifier )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==KW_MAP) ) {
                int LA80_1 = input.LA(2);

                if ( (LA80_1==KW_KEYS) ) {
                    alt80=1;
                }
            }
            switch (alt80) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:701:103: tableRowFormatMapKeysIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited4464);
                    tableRowFormatMapKeysIdentifier271=tableRowFormatMapKeysIdentifier();
                    _fsp--;

                    stream_tableRowFormatMapKeysIdentifier.add(tableRowFormatMapKeysIdentifier271.getTree());

                    }
                    break;

            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:701:136: ( tableRowFormatLinesIdentifier )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==KW_LINES) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:701:136: tableRowFormatLinesIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited4467);
                    tableRowFormatLinesIdentifier272=tableRowFormatLinesIdentifier();
                    _fsp--;

                    stream_tableRowFormatLinesIdentifier.add(tableRowFormatLinesIdentifier272.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableRowFormatMapKeysIdentifier, tableRowFormatFieldIdentifier, tableRowFormatLinesIdentifier, tableRowFormatCollItemsIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 702:5: -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:702:8: ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SERDEPROPS, "TOK_SERDEPROPS"), root_1);

                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:702:25: ( tableRowFormatFieldIdentifier )?
                if ( stream_tableRowFormatFieldIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatFieldIdentifier.next());

                }
                stream_tableRowFormatFieldIdentifier.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:702:56: ( tableRowFormatCollItemsIdentifier )?
                if ( stream_tableRowFormatCollItemsIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatCollItemsIdentifier.next());

                }
                stream_tableRowFormatCollItemsIdentifier.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:702:91: ( tableRowFormatMapKeysIdentifier )?
                if ( stream_tableRowFormatMapKeysIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatMapKeysIdentifier.next());

                }
                stream_tableRowFormatMapKeysIdentifier.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:702:124: ( tableRowFormatLinesIdentifier )?
                if ( stream_tableRowFormatLinesIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatLinesIdentifier.next());

                }
                stream_tableRowFormatLinesIdentifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end rowFormatDelimited

    public static class tableRowFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableRowFormat
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:705:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );
    public final tableRowFormat_return tableRowFormat() throws RecognitionException {
        tableRowFormat_return retval = new tableRowFormat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        rowFormatDelimited_return rowFormatDelimited273 = null;

        rowFormatSerde_return rowFormatSerde274 = null;


        RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
        RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");
         msgs.push("table row format specification"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:708:5: ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) )
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==KW_ROW) ) {
                int LA82_1 = input.LA(2);

                if ( (LA82_1==KW_FORMAT) ) {
                    int LA82_2 = input.LA(3);

                    if ( (LA82_2==KW_DELIMITED) ) {
                        alt82=1;
                    }
                    else if ( (LA82_2==KW_SERDE) ) {
                        alt82=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("705:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );", 82, 2, input);

                        throw nvae;
                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("705:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );", 82, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("705:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );", 82, 0, input);

                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:709:7: rowFormatDelimited
                    {
                    pushFollow(FOLLOW_rowFormatDelimited_in_tableRowFormat4523);
                    rowFormatDelimited273=rowFormatDelimited();
                    _fsp--;

                    stream_rowFormatDelimited.add(rowFormatDelimited273.getTree());

                    // AST REWRITE
                    // elements: rowFormatDelimited
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 710:5: -> ^( TOK_TABLEROWFORMAT rowFormatDelimited )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:710:8: ^( TOK_TABLEROWFORMAT rowFormatDelimited )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEROWFORMAT, "TOK_TABLEROWFORMAT"), root_1);

                        adaptor.addChild(root_1, stream_rowFormatDelimited.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:711:7: rowFormatSerde
                    {
                    pushFollow(FOLLOW_rowFormatSerde_in_tableRowFormat4543);
                    rowFormatSerde274=rowFormatSerde();
                    _fsp--;

                    stream_rowFormatSerde.add(rowFormatSerde274.getTree());

                    // AST REWRITE
                    // elements: rowFormatSerde
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 712:5: -> ^( TOK_TABLESERIALIZER rowFormatSerde )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:712:8: ^( TOK_TABLESERIALIZER rowFormatSerde )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLESERIALIZER, "TOK_TABLESERIALIZER"), root_1);

                        adaptor.addChild(root_1, stream_rowFormatSerde.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableRowFormat

    public static class tablePropertiesPrefixed_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tablePropertiesPrefixed
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:715:1: tablePropertiesPrefixed : KW_TBLPROPERTIES tableProperties ;
    public final tablePropertiesPrefixed_return tablePropertiesPrefixed() throws RecognitionException {
        tablePropertiesPrefixed_return retval = new tablePropertiesPrefixed_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_TBLPROPERTIES275=null;
        tableProperties_return tableProperties276 = null;


        CommonTree KW_TBLPROPERTIES275_tree=null;

         msgs.push("table properties with prefix"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:718:5: ( KW_TBLPROPERTIES tableProperties )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:719:9: KW_TBLPROPERTIES tableProperties
            {
            root_0 = (CommonTree)adaptor.nil();

            KW_TBLPROPERTIES275=(Token)input.LT(1);
            match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed4590); 
            pushFollow(FOLLOW_tableProperties_in_tablePropertiesPrefixed4593);
            tableProperties276=tableProperties();
            _fsp--;

            adaptor.addChild(root_0, tableProperties276.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tablePropertiesPrefixed

    public static class tableProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableProperties
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:722:1: tableProperties : LPAREN propertiesList RPAREN -> ^( TOK_TABLEPROPERTIES propertiesList ) ;
    public final tableProperties_return tableProperties() throws RecognitionException {
        tableProperties_return retval = new tableProperties_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN277=null;
        Token RPAREN279=null;
        propertiesList_return propertiesList278 = null;


        CommonTree LPAREN277_tree=null;
        CommonTree RPAREN279_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_propertiesList=new RewriteRuleSubtreeStream(adaptor,"rule propertiesList");
         msgs.push("table properties"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:725:5: ( LPAREN propertiesList RPAREN -> ^( TOK_TABLEPROPERTIES propertiesList ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:726:7: LPAREN propertiesList RPAREN
            {
            LPAREN277=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_tableProperties4626); 
            stream_LPAREN.add(LPAREN277);

            pushFollow(FOLLOW_propertiesList_in_tableProperties4628);
            propertiesList278=propertiesList();
            _fsp--;

            stream_propertiesList.add(propertiesList278.getTree());
            RPAREN279=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_tableProperties4630); 
            stream_RPAREN.add(RPAREN279);


            // AST REWRITE
            // elements: propertiesList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 726:36: -> ^( TOK_TABLEPROPERTIES propertiesList )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:726:39: ^( TOK_TABLEPROPERTIES propertiesList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEPROPERTIES, "TOK_TABLEPROPERTIES"), root_1);

                adaptor.addChild(root_1, stream_propertiesList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableProperties

    public static class propertiesList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start propertiesList
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:729:1: propertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) ;
    public final propertiesList_return propertiesList() throws RecognitionException {
        propertiesList_return retval = new propertiesList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA281=null;
        keyValueProperty_return keyValueProperty280 = null;

        keyValueProperty_return keyValueProperty282 = null;


        CommonTree COMMA281_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");
         msgs.push("properties list"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:732:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:733:7: keyValueProperty ( COMMA keyValueProperty )*
            {
            pushFollow(FOLLOW_keyValueProperty_in_propertiesList4671);
            keyValueProperty280=keyValueProperty();
            _fsp--;

            stream_keyValueProperty.add(keyValueProperty280.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:733:24: ( COMMA keyValueProperty )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==COMMA) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:733:25: COMMA keyValueProperty
            	    {
            	    COMMA281=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_propertiesList4674); 
            	    stream_COMMA.add(COMMA281);

            	    pushFollow(FOLLOW_keyValueProperty_in_propertiesList4676);
            	    keyValueProperty282=keyValueProperty();
            	    _fsp--;

            	    stream_keyValueProperty.add(keyValueProperty282.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            // AST REWRITE
            // elements: keyValueProperty
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 733:50: -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:733:53: ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEPROPLIST, "TOK_TABLEPROPLIST"), root_1);

                if ( !(stream_keyValueProperty.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_keyValueProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_keyValueProperty.next());

                }
                stream_keyValueProperty.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end propertiesList

    public static class keyValueProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start keyValueProperty
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:736:1: keyValueProperty : key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) ;
    public final keyValueProperty_return keyValueProperty() throws RecognitionException {
        keyValueProperty_return retval = new keyValueProperty_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token key=null;
        Token value=null;
        Token EQUAL283=null;

        CommonTree key_tree=null;
        CommonTree value_tree=null;
        CommonTree EQUAL283_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");

         msgs.push("specifying key/value property"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:739:5: (key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:740:7: key= StringLiteral EQUAL value= StringLiteral
            {
            key=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty4722); 
            stream_StringLiteral.add(key);

            EQUAL283=(Token)input.LT(1);
            match(input,EQUAL,FOLLOW_EQUAL_in_keyValueProperty4724); 
            stream_EQUAL.add(EQUAL283);

            value=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty4728); 
            stream_StringLiteral.add(value);


            // AST REWRITE
            // elements: key, value
            // token labels: value, key
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
            RewriteRuleTokenStream stream_key=new RewriteRuleTokenStream(adaptor,"token key",key);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 740:51: -> ^( TOK_TABLEPROPERTY $key $value)
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:740:54: ^( TOK_TABLEPROPERTY $key $value)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEPROPERTY, "TOK_TABLEPROPERTY"), root_1);

                adaptor.addChild(root_1, stream_key.next());
                adaptor.addChild(root_1, stream_value.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyValueProperty

    public static class tableRowFormatFieldIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableRowFormatFieldIdentifier
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:743:1: tableRowFormatFieldIdentifier : KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) ;
    public final tableRowFormatFieldIdentifier_return tableRowFormatFieldIdentifier() throws RecognitionException {
        tableRowFormatFieldIdentifier_return retval = new tableRowFormatFieldIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token fldIdnt=null;
        Token fldEscape=null;
        Token KW_FIELDS284=null;
        Token KW_TERMINATED285=null;
        Token KW_BY286=null;
        Token KW_ESCAPED287=null;
        Token KW_BY288=null;

        CommonTree fldIdnt_tree=null;
        CommonTree fldEscape_tree=null;
        CommonTree KW_FIELDS284_tree=null;
        CommonTree KW_TERMINATED285_tree=null;
        CommonTree KW_BY286_tree=null;
        CommonTree KW_ESCAPED287_tree=null;
        CommonTree KW_BY288_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_ESCAPED=new RewriteRuleTokenStream(adaptor,"token KW_ESCAPED");
        RewriteRuleTokenStream stream_KW_FIELDS=new RewriteRuleTokenStream(adaptor,"token KW_FIELDS");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

         msgs.push("table row format's field separator"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:746:5: ( KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:747:7: KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
            {
            KW_FIELDS284=(Token)input.LT(1);
            match(input,KW_FIELDS,FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier4773); 
            stream_KW_FIELDS.add(KW_FIELDS284);

            KW_TERMINATED285=(Token)input.LT(1);
            match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier4775); 
            stream_KW_TERMINATED.add(KW_TERMINATED285);

            KW_BY286=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier4777); 
            stream_KW_BY.add(KW_BY286);

            fldIdnt=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier4781); 
            stream_StringLiteral.add(fldIdnt);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:747:59: ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==KW_ESCAPED) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:747:60: KW_ESCAPED KW_BY fldEscape= StringLiteral
                    {
                    KW_ESCAPED287=(Token)input.LT(1);
                    match(input,KW_ESCAPED,FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier4784); 
                    stream_KW_ESCAPED.add(KW_ESCAPED287);

                    KW_BY288=(Token)input.LT(1);
                    match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier4786); 
                    stream_KW_BY.add(KW_BY288);

                    fldEscape=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier4790); 
                    stream_StringLiteral.add(fldEscape);


                    }
                    break;

            }


            // AST REWRITE
            // elements: fldEscape, fldIdnt
            // token labels: fldEscape, fldIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_fldEscape=new RewriteRuleTokenStream(adaptor,"token fldEscape",fldEscape);
            RewriteRuleTokenStream stream_fldIdnt=new RewriteRuleTokenStream(adaptor,"token fldIdnt",fldIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 748:5: -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:748:8: ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEROWFORMATFIELD, "TOK_TABLEROWFORMATFIELD"), root_1);

                adaptor.addChild(root_1, stream_fldIdnt.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:748:43: ( $fldEscape)?
                if ( stream_fldEscape.hasNext() ) {
                    adaptor.addChild(root_1, stream_fldEscape.next());

                }
                stream_fldEscape.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableRowFormatFieldIdentifier

    public static class tableRowFormatCollItemsIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableRowFormatCollItemsIdentifier
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:751:1: tableRowFormatCollItemsIdentifier : KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) ;
    public final tableRowFormatCollItemsIdentifier_return tableRowFormatCollItemsIdentifier() throws RecognitionException {
        tableRowFormatCollItemsIdentifier_return retval = new tableRowFormatCollItemsIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token collIdnt=null;
        Token KW_COLLECTION289=null;
        Token KW_ITEMS290=null;
        Token KW_TERMINATED291=null;
        Token KW_BY292=null;

        CommonTree collIdnt_tree=null;
        CommonTree KW_COLLECTION289_tree=null;
        CommonTree KW_ITEMS290_tree=null;
        CommonTree KW_TERMINATED291_tree=null;
        CommonTree KW_BY292_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_ITEMS=new RewriteRuleTokenStream(adaptor,"token KW_ITEMS");
        RewriteRuleTokenStream stream_KW_COLLECTION=new RewriteRuleTokenStream(adaptor,"token KW_COLLECTION");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

         msgs.push("table row format's column separator"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:754:5: ( KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:755:7: KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral
            {
            KW_COLLECTION289=(Token)input.LT(1);
            match(input,KW_COLLECTION,FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier4842); 
            stream_KW_COLLECTION.add(KW_COLLECTION289);

            KW_ITEMS290=(Token)input.LT(1);
            match(input,KW_ITEMS,FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier4844); 
            stream_KW_ITEMS.add(KW_ITEMS290);

            KW_TERMINATED291=(Token)input.LT(1);
            match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier4846); 
            stream_KW_TERMINATED.add(KW_TERMINATED291);

            KW_BY292=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier4848); 
            stream_KW_BY.add(KW_BY292);

            collIdnt=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier4852); 
            stream_StringLiteral.add(collIdnt);


            // AST REWRITE
            // elements: collIdnt
            // token labels: collIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_collIdnt=new RewriteRuleTokenStream(adaptor,"token collIdnt",collIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 756:5: -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:756:8: ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEROWFORMATCOLLITEMS, "TOK_TABLEROWFORMATCOLLITEMS"), root_1);

                adaptor.addChild(root_1, stream_collIdnt.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableRowFormatCollItemsIdentifier

    public static class tableRowFormatMapKeysIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableRowFormatMapKeysIdentifier
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:759:1: tableRowFormatMapKeysIdentifier : KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) ;
    public final tableRowFormatMapKeysIdentifier_return tableRowFormatMapKeysIdentifier() throws RecognitionException {
        tableRowFormatMapKeysIdentifier_return retval = new tableRowFormatMapKeysIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token mapKeysIdnt=null;
        Token KW_MAP293=null;
        Token KW_KEYS294=null;
        Token KW_TERMINATED295=null;
        Token KW_BY296=null;

        CommonTree mapKeysIdnt_tree=null;
        CommonTree KW_MAP293_tree=null;
        CommonTree KW_KEYS294_tree=null;
        CommonTree KW_TERMINATED295_tree=null;
        CommonTree KW_BY296_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_KEYS=new RewriteRuleTokenStream(adaptor,"token KW_KEYS");
        RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

         msgs.push("table row format's map key separator"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:762:5: ( KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:763:7: KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral
            {
            KW_MAP293=(Token)input.LT(1);
            match(input,KW_MAP,FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier4898); 
            stream_KW_MAP.add(KW_MAP293);

            KW_KEYS294=(Token)input.LT(1);
            match(input,KW_KEYS,FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier4900); 
            stream_KW_KEYS.add(KW_KEYS294);

            KW_TERMINATED295=(Token)input.LT(1);
            match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier4902); 
            stream_KW_TERMINATED.add(KW_TERMINATED295);

            KW_BY296=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier4904); 
            stream_KW_BY.add(KW_BY296);

            mapKeysIdnt=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier4908); 
            stream_StringLiteral.add(mapKeysIdnt);


            // AST REWRITE
            // elements: mapKeysIdnt
            // token labels: mapKeysIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_mapKeysIdnt=new RewriteRuleTokenStream(adaptor,"token mapKeysIdnt",mapKeysIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 764:5: -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:764:8: ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEROWFORMATMAPKEYS, "TOK_TABLEROWFORMATMAPKEYS"), root_1);

                adaptor.addChild(root_1, stream_mapKeysIdnt.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableRowFormatMapKeysIdentifier

    public static class tableRowFormatLinesIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableRowFormatLinesIdentifier
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:767:1: tableRowFormatLinesIdentifier : KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) ;
    public final tableRowFormatLinesIdentifier_return tableRowFormatLinesIdentifier() throws RecognitionException {
        tableRowFormatLinesIdentifier_return retval = new tableRowFormatLinesIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token linesIdnt=null;
        Token KW_LINES297=null;
        Token KW_TERMINATED298=null;
        Token KW_BY299=null;

        CommonTree linesIdnt_tree=null;
        CommonTree KW_LINES297_tree=null;
        CommonTree KW_TERMINATED298_tree=null;
        CommonTree KW_BY299_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LINES=new RewriteRuleTokenStream(adaptor,"token KW_LINES");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

         msgs.push("table row format's line separator"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:770:5: ( KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:771:7: KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral
            {
            KW_LINES297=(Token)input.LT(1);
            match(input,KW_LINES,FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier4954); 
            stream_KW_LINES.add(KW_LINES297);

            KW_TERMINATED298=(Token)input.LT(1);
            match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier4956); 
            stream_KW_TERMINATED.add(KW_TERMINATED298);

            KW_BY299=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier4958); 
            stream_KW_BY.add(KW_BY299);

            linesIdnt=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier4962); 
            stream_StringLiteral.add(linesIdnt);


            // AST REWRITE
            // elements: linesIdnt
            // token labels: linesIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_linesIdnt=new RewriteRuleTokenStream(adaptor,"token linesIdnt",linesIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 772:5: -> ^( TOK_TABLEROWFORMATLINES $linesIdnt)
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:772:8: ^( TOK_TABLEROWFORMATLINES $linesIdnt)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEROWFORMATLINES, "TOK_TABLEROWFORMATLINES"), root_1);

                adaptor.addChild(root_1, stream_linesIdnt.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableRowFormatLinesIdentifier

    public static class tableFileFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableFileFormat
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:775:1: tableFileFormat : ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) );
    public final tableFileFormat_return tableFileFormat() throws RecognitionException {
        tableFileFormat_return retval = new tableFileFormat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token inFmt=null;
        Token outFmt=null;
        Token storageHandler=null;
        Token KW_STORED300=null;
        Token KW_AS301=null;
        Token KW_SEQUENCEFILE302=null;
        Token KW_STORED303=null;
        Token KW_AS304=null;
        Token KW_TEXTFILE305=null;
        Token KW_STORED306=null;
        Token KW_AS307=null;
        Token KW_RCFILE308=null;
        Token KW_STORED309=null;
        Token KW_AS310=null;
        Token KW_INPUTFORMAT311=null;
        Token KW_OUTPUTFORMAT312=null;
        Token KW_STORED313=null;
        Token KW_BY314=null;
        Token KW_WITH315=null;
        Token KW_SERDEPROPERTIES316=null;
        tableProperties_return serdeprops = null;


        CommonTree inFmt_tree=null;
        CommonTree outFmt_tree=null;
        CommonTree storageHandler_tree=null;
        CommonTree KW_STORED300_tree=null;
        CommonTree KW_AS301_tree=null;
        CommonTree KW_SEQUENCEFILE302_tree=null;
        CommonTree KW_STORED303_tree=null;
        CommonTree KW_AS304_tree=null;
        CommonTree KW_TEXTFILE305_tree=null;
        CommonTree KW_STORED306_tree=null;
        CommonTree KW_AS307_tree=null;
        CommonTree KW_RCFILE308_tree=null;
        CommonTree KW_STORED309_tree=null;
        CommonTree KW_AS310_tree=null;
        CommonTree KW_INPUTFORMAT311_tree=null;
        CommonTree KW_OUTPUTFORMAT312_tree=null;
        CommonTree KW_STORED313_tree=null;
        CommonTree KW_BY314_tree=null;
        CommonTree KW_WITH315_tree=null;
        CommonTree KW_SERDEPROPERTIES316_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_RCFILE=new RewriteRuleTokenStream(adaptor,"token KW_RCFILE");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
        RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
        RewriteRuleTokenStream stream_KW_STORED=new RewriteRuleTokenStream(adaptor,"token KW_STORED");
        RewriteRuleTokenStream stream_KW_SEQUENCEFILE=new RewriteRuleTokenStream(adaptor,"token KW_SEQUENCEFILE");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_TEXTFILE=new RewriteRuleTokenStream(adaptor,"token KW_TEXTFILE");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         msgs.push("table file format specification"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:778:5: ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) )
            int alt86=5;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==KW_STORED) ) {
                int LA86_1 = input.LA(2);

                if ( (LA86_1==KW_AS) ) {
                    switch ( input.LA(3) ) {
                    case KW_TEXTFILE:
                        {
                        alt86=2;
                        }
                        break;
                    case KW_INPUTFORMAT:
                        {
                        alt86=4;
                        }
                        break;
                    case KW_SEQUENCEFILE:
                        {
                        alt86=1;
                        }
                        break;
                    case KW_RCFILE:
                        {
                        alt86=3;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("775:1: tableFileFormat : ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) );", 86, 2, input);

                        throw nvae;
                    }

                }
                else if ( (LA86_1==KW_BY) ) {
                    alt86=5;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("775:1: tableFileFormat : ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) );", 86, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("775:1: tableFileFormat : ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) );", 86, 0, input);

                throw nvae;
            }
            switch (alt86) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:779:7: KW_STORED KW_AS KW_SEQUENCEFILE
                    {
                    KW_STORED300=(Token)input.LT(1);
                    match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat5008); 
                    stream_KW_STORED.add(KW_STORED300);

                    KW_AS301=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat5010); 
                    stream_KW_AS.add(KW_AS301);

                    KW_SEQUENCEFILE302=(Token)input.LT(1);
                    match(input,KW_SEQUENCEFILE,FOLLOW_KW_SEQUENCEFILE_in_tableFileFormat5012); 
                    stream_KW_SEQUENCEFILE.add(KW_SEQUENCEFILE302);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 779:40: -> TOK_TBLSEQUENCEFILE
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_TBLSEQUENCEFILE, "TOK_TBLSEQUENCEFILE"));

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:780:9: KW_STORED KW_AS KW_TEXTFILE
                    {
                    KW_STORED303=(Token)input.LT(1);
                    match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat5027); 
                    stream_KW_STORED.add(KW_STORED303);

                    KW_AS304=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat5029); 
                    stream_KW_AS.add(KW_AS304);

                    KW_TEXTFILE305=(Token)input.LT(1);
                    match(input,KW_TEXTFILE,FOLLOW_KW_TEXTFILE_in_tableFileFormat5031); 
                    stream_KW_TEXTFILE.add(KW_TEXTFILE305);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 780:38: -> TOK_TBLTEXTFILE
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_TBLTEXTFILE, "TOK_TBLTEXTFILE"));

                    }



                    }
                    break;
                case 3 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:781:9: KW_STORED KW_AS KW_RCFILE
                    {
                    KW_STORED306=(Token)input.LT(1);
                    match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat5046); 
                    stream_KW_STORED.add(KW_STORED306);

                    KW_AS307=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat5048); 
                    stream_KW_AS.add(KW_AS307);

                    KW_RCFILE308=(Token)input.LT(1);
                    match(input,KW_RCFILE,FOLLOW_KW_RCFILE_in_tableFileFormat5050); 
                    stream_KW_RCFILE.add(KW_RCFILE308);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 781:36: -> TOK_TBLRCFILE
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_TBLRCFILE, "TOK_TBLRCFILE"));

                    }



                    }
                    break;
                case 4 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:782:9: KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral
                    {
                    KW_STORED309=(Token)input.LT(1);
                    match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat5065); 
                    stream_KW_STORED.add(KW_STORED309);

                    KW_AS310=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat5067); 
                    stream_KW_AS.add(KW_AS310);

                    KW_INPUTFORMAT311=(Token)input.LT(1);
                    match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_tableFileFormat5069); 
                    stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT311);

                    inFmt=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat5073); 
                    stream_StringLiteral.add(inFmt);

                    KW_OUTPUTFORMAT312=(Token)input.LT(1);
                    match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat5075); 
                    stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT312);

                    outFmt=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat5079); 
                    stream_StringLiteral.add(outFmt);


                    // AST REWRITE
                    // elements: outFmt, inFmt
                    // token labels: outFmt, inFmt
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
                    RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 783:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt)
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:783:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT"), root_1);

                        adaptor.addChild(root_1, stream_inFmt.next());
                        adaptor.addChild(root_1, stream_outFmt.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 5 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:784:9: KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
                    {
                    KW_STORED313=(Token)input.LT(1);
                    match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat5107); 
                    stream_KW_STORED.add(KW_STORED313);

                    KW_BY314=(Token)input.LT(1);
                    match(input,KW_BY,FOLLOW_KW_BY_in_tableFileFormat5109); 
                    stream_KW_BY.add(KW_BY314);

                    storageHandler=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat5113); 
                    stream_StringLiteral.add(storageHandler);

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:785:10: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==KW_WITH) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:785:11: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
                            {
                            KW_WITH315=(Token)input.LT(1);
                            match(input,KW_WITH,FOLLOW_KW_WITH_in_tableFileFormat5125); 
                            stream_KW_WITH.add(KW_WITH315);

                            KW_SERDEPROPERTIES316=(Token)input.LT(1);
                            match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat5127); 
                            stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES316);

                            pushFollow(FOLLOW_tableProperties_in_tableFileFormat5131);
                            serdeprops=tableProperties();
                            _fsp--;

                            stream_tableProperties.add(serdeprops.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: storageHandler, serdeprops
                    // token labels: storageHandler
                    // rule labels: serdeprops, retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_storageHandler=new RewriteRuleTokenStream(adaptor,"token storageHandler",storageHandler);
                    RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"token serdeprops",serdeprops!=null?serdeprops.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 786:7: -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:786:10: ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_STORAGEHANDLER, "TOK_STORAGEHANDLER"), root_1);

                        adaptor.addChild(root_1, stream_storageHandler.next());
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:786:47: ( $serdeprops)?
                        if ( stream_serdeprops.hasNext() ) {
                            adaptor.addChild(root_1, stream_serdeprops.next());

                        }
                        stream_serdeprops.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableFileFormat

    public static class tableLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableLocation
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:789:1: tableLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) ;
    public final tableLocation_return tableLocation() throws RecognitionException {
        tableLocation_return retval = new tableLocation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token locn=null;
        Token KW_LOCATION317=null;

        CommonTree locn_tree=null;
        CommonTree KW_LOCATION317_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

         msgs.push("table location specification"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:792:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:793:7: KW_LOCATION locn= StringLiteral
            {
            KW_LOCATION317=(Token)input.LT(1);
            match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_tableLocation5185); 
            stream_KW_LOCATION.add(KW_LOCATION317);

            locn=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableLocation5189); 
            stream_StringLiteral.add(locn);


            // AST REWRITE
            // elements: locn
            // token labels: locn
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 793:38: -> ^( TOK_TABLELOCATION $locn)
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:793:41: ^( TOK_TABLELOCATION $locn)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLELOCATION, "TOK_TABLELOCATION"), root_1);

                adaptor.addChild(root_1, stream_locn.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableLocation

    public static class columnNameTypeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameTypeList
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:796:1: columnNameTypeList : columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) ;
    public final columnNameTypeList_return columnNameTypeList() throws RecognitionException {
        columnNameTypeList_return retval = new columnNameTypeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA319=null;
        columnNameType_return columnNameType318 = null;

        columnNameType_return columnNameType320 = null;


        CommonTree COMMA319_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameType");
         msgs.push("column name type list"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:799:5: ( columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:799:7: columnNameType ( COMMA columnNameType )*
            {
            pushFollow(FOLLOW_columnNameType_in_columnNameTypeList5225);
            columnNameType318=columnNameType();
            _fsp--;

            stream_columnNameType.add(columnNameType318.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:799:22: ( COMMA columnNameType )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==COMMA) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:799:23: COMMA columnNameType
            	    {
            	    COMMA319=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_columnNameTypeList5228); 
            	    stream_COMMA.add(COMMA319);

            	    pushFollow(FOLLOW_columnNameType_in_columnNameTypeList5230);
            	    columnNameType320=columnNameType();
            	    _fsp--;

            	    stream_columnNameType.add(columnNameType320.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 799:46: -> ^( TOK_TABCOLLIST ( columnNameType )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:799:49: ^( TOK_TABCOLLIST ( columnNameType )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST"), root_1);

                if ( !(stream_columnNameType.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameType.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameType.next());

                }
                stream_columnNameType.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameTypeList

    public static class columnNameColonTypeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameColonTypeList
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:802:1: columnNameColonTypeList : columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) ;
    public final columnNameColonTypeList_return columnNameColonTypeList() throws RecognitionException {
        columnNameColonTypeList_return retval = new columnNameColonTypeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA322=null;
        columnNameColonType_return columnNameColonType321 = null;

        columnNameColonType_return columnNameColonType323 = null;


        CommonTree COMMA322_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameColonType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonType");
         msgs.push("column name type list"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:805:5: ( columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:805:7: columnNameColonType ( COMMA columnNameColonType )*
            {
            pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList5268);
            columnNameColonType321=columnNameColonType();
            _fsp--;

            stream_columnNameColonType.add(columnNameColonType321.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:805:27: ( COMMA columnNameColonType )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==COMMA) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:805:28: COMMA columnNameColonType
            	    {
            	    COMMA322=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_columnNameColonTypeList5271); 
            	    stream_COMMA.add(COMMA322);

            	    pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList5273);
            	    columnNameColonType323=columnNameColonType();
            	    _fsp--;

            	    stream_columnNameColonType.add(columnNameColonType323.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameColonType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 805:56: -> ^( TOK_TABCOLLIST ( columnNameColonType )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:805:59: ^( TOK_TABCOLLIST ( columnNameColonType )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST"), root_1);

                if ( !(stream_columnNameColonType.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameColonType.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameColonType.next());

                }
                stream_columnNameColonType.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameColonTypeList

    public static class columnNameList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameList
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:808:1: columnNameList : columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) ;
    public final columnNameList_return columnNameList() throws RecognitionException {
        columnNameList_return retval = new columnNameList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA325=null;
        columnName_return columnName324 = null;

        columnName_return columnName326 = null;


        CommonTree COMMA325_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");
         msgs.push("column name list"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:811:5: ( columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:811:7: columnName ( COMMA columnName )*
            {
            pushFollow(FOLLOW_columnName_in_columnNameList5311);
            columnName324=columnName();
            _fsp--;

            stream_columnName.add(columnName324.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:811:18: ( COMMA columnName )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==COMMA) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:811:19: COMMA columnName
            	    {
            	    COMMA325=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_columnNameList5314); 
            	    stream_COMMA.add(COMMA325);

            	    pushFollow(FOLLOW_columnName_in_columnNameList5316);
            	    columnName326=columnName();
            	    _fsp--;

            	    stream_columnName.add(columnName326.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            // AST REWRITE
            // elements: columnName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 811:38: -> ^( TOK_TABCOLNAME ( columnName )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:811:41: ^( TOK_TABCOLNAME ( columnName )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);

                if ( !(stream_columnName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnName.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnName.next());

                }
                stream_columnName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameList

    public static class columnName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnName
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:814:1: columnName : Identifier ;
    public final columnName_return columnName() throws RecognitionException {
        columnName_return retval = new columnName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier327=null;

        CommonTree Identifier327_tree=null;

         msgs.push("column name"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:817:5: ( Identifier )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:818:7: Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            Identifier327=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_columnName5360); 
            Identifier327_tree = (CommonTree)adaptor.create(Identifier327);
            adaptor.addChild(root_0, Identifier327_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnName

    public static class columnNameOrderList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameOrderList
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:821:1: columnNameOrderList : columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) ;
    public final columnNameOrderList_return columnNameOrderList() throws RecognitionException {
        columnNameOrderList_return retval = new columnNameOrderList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA329=null;
        columnNameOrder_return columnNameOrder328 = null;

        columnNameOrder_return columnNameOrder330 = null;


        CommonTree COMMA329_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrder");
         msgs.push("column name order list"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:824:5: ( columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:824:7: columnNameOrder ( COMMA columnNameOrder )*
            {
            pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList5387);
            columnNameOrder328=columnNameOrder();
            _fsp--;

            stream_columnNameOrder.add(columnNameOrder328.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:824:23: ( COMMA columnNameOrder )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==COMMA) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:824:24: COMMA columnNameOrder
            	    {
            	    COMMA329=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_columnNameOrderList5390); 
            	    stream_COMMA.add(COMMA329);

            	    pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList5392);
            	    columnNameOrder330=columnNameOrder();
            	    _fsp--;

            	    stream_columnNameOrder.add(columnNameOrder330.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameOrder
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 824:48: -> ^( TOK_TABCOLNAME ( columnNameOrder )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:824:51: ^( TOK_TABCOLNAME ( columnNameOrder )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);

                if ( !(stream_columnNameOrder.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameOrder.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameOrder.next());

                }
                stream_columnNameOrder.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameOrderList

    public static class columnNameOrder_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameOrder
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:827:1: columnNameOrder : Identifier (asc= KW_ASC | desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC Identifier ) -> ^( TOK_TABSORTCOLNAMEDESC Identifier ) ;
    public final columnNameOrder_return columnNameOrder() throws RecognitionException {
        columnNameOrder_return retval = new columnNameOrder_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token asc=null;
        Token desc=null;
        Token Identifier331=null;

        CommonTree asc_tree=null;
        CommonTree desc_tree=null;
        CommonTree Identifier331_tree=null;
        RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ASC=new RewriteRuleTokenStream(adaptor,"token KW_ASC");

         msgs.push("column name order"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:830:5: ( Identifier (asc= KW_ASC | desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC Identifier ) -> ^( TOK_TABSORTCOLNAMEDESC Identifier ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:830:7: Identifier (asc= KW_ASC | desc= KW_DESC )?
            {
            Identifier331=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_columnNameOrder5430); 
            stream_Identifier.add(Identifier331);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:830:18: (asc= KW_ASC | desc= KW_DESC )?
            int alt91=3;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==KW_ASC) ) {
                alt91=1;
            }
            else if ( (LA91_0==KW_DESC) ) {
                alt91=2;
            }
            switch (alt91) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:830:19: asc= KW_ASC
                    {
                    asc=(Token)input.LT(1);
                    match(input,KW_ASC,FOLLOW_KW_ASC_in_columnNameOrder5435); 
                    stream_KW_ASC.add(asc);


                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:830:32: desc= KW_DESC
                    {
                    desc=(Token)input.LT(1);
                    match(input,KW_DESC,FOLLOW_KW_DESC_in_columnNameOrder5441); 
                    stream_KW_DESC.add(desc);


                    }
                    break;

            }


            // AST REWRITE
            // elements: Identifier, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 831:5: -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC Identifier )
            if (desc == null) {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:831:25: ^( TOK_TABSORTCOLNAMEASC Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 832:5: -> ^( TOK_TABSORTCOLNAMEDESC Identifier )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:832:25: ^( TOK_TABSORTCOLNAMEDESC Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameOrder

    public static class columnNameCommentList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameCommentList
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:835:1: columnNameCommentList : columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) ;
    public final columnNameCommentList_return columnNameCommentList() throws RecognitionException {
        columnNameCommentList_return retval = new columnNameCommentList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA333=null;
        columnNameComment_return columnNameComment332 = null;

        columnNameComment_return columnNameComment334 = null;


        CommonTree COMMA333_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameComment=new RewriteRuleSubtreeStream(adaptor,"rule columnNameComment");
         msgs.push("column name comment list"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:838:5: ( columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:838:7: columnNameComment ( COMMA columnNameComment )*
            {
            pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList5513);
            columnNameComment332=columnNameComment();
            _fsp--;

            stream_columnNameComment.add(columnNameComment332.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:838:25: ( COMMA columnNameComment )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==COMMA) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:838:26: COMMA columnNameComment
            	    {
            	    COMMA333=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_columnNameCommentList5516); 
            	    stream_COMMA.add(COMMA333);

            	    pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList5518);
            	    columnNameComment334=columnNameComment();
            	    _fsp--;

            	    stream_columnNameComment.add(columnNameComment334.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameComment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 838:52: -> ^( TOK_TABCOLNAME ( columnNameComment )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:838:55: ^( TOK_TABCOLNAME ( columnNameComment )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);

                if ( !(stream_columnNameComment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameComment.next());

                }
                stream_columnNameComment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameCommentList

    public static class columnNameComment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameComment
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:841:1: columnNameComment : colName= Identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) ;
    public final columnNameComment_return columnNameComment() throws RecognitionException {
        columnNameComment_return retval = new columnNameComment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token colName=null;
        Token comment=null;
        Token KW_COMMENT335=null;

        CommonTree colName_tree=null;
        CommonTree comment_tree=null;
        CommonTree KW_COMMENT335_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("column name comment"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:844:5: (colName= Identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:844:7: colName= Identifier ( KW_COMMENT comment= StringLiteral )?
            {
            colName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_columnNameComment5558); 
            stream_Identifier.add(colName);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:844:26: ( KW_COMMENT comment= StringLiteral )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==KW_COMMENT) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:844:27: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT335=(Token)input.LT(1);
                    match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameComment5561); 
                    stream_KW_COMMENT.add(KW_COMMENT335);

                    comment=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameComment5565); 
                    stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: comment, colName
            // token labels: comment, colName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleTokenStream stream_colName=new RewriteRuleTokenStream(adaptor,"token colName",colName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 845:5: -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:845:8: ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);

                adaptor.addChild(root_1, stream_colName.next());
                adaptor.addChild(root_1, adaptor.create(TOK_NULL, "TOK_NULL"));
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:845:39: ( $comment)?
                if ( stream_comment.hasNext() ) {
                    adaptor.addChild(root_1, stream_comment.next());

                }
                stream_comment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameComment

    public static class columnRefOrder_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnRefOrder
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:848:1: columnRefOrder : expression (asc= KW_ASC | desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression ) -> ^( TOK_TABSORTCOLNAMEDESC expression ) ;
    public final columnRefOrder_return columnRefOrder() throws RecognitionException {
        columnRefOrder_return retval = new columnRefOrder_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token asc=null;
        Token desc=null;
        expression_return expression336 = null;


        CommonTree asc_tree=null;
        CommonTree desc_tree=null;
        RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
        RewriteRuleTokenStream stream_KW_ASC=new RewriteRuleTokenStream(adaptor,"token KW_ASC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("column order"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:851:5: ( expression (asc= KW_ASC | desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression ) -> ^( TOK_TABSORTCOLNAMEDESC expression ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:851:7: expression (asc= KW_ASC | desc= KW_DESC )?
            {
            pushFollow(FOLLOW_expression_in_columnRefOrder5613);
            expression336=expression();
            _fsp--;

            stream_expression.add(expression336.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:851:18: (asc= KW_ASC | desc= KW_DESC )?
            int alt94=3;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==KW_ASC) ) {
                alt94=1;
            }
            else if ( (LA94_0==KW_DESC) ) {
                alt94=2;
            }
            switch (alt94) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:851:19: asc= KW_ASC
                    {
                    asc=(Token)input.LT(1);
                    match(input,KW_ASC,FOLLOW_KW_ASC_in_columnRefOrder5618); 
                    stream_KW_ASC.add(asc);


                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:851:32: desc= KW_DESC
                    {
                    desc=(Token)input.LT(1);
                    match(input,KW_DESC,FOLLOW_KW_DESC_in_columnRefOrder5624); 
                    stream_KW_DESC.add(desc);


                    }
                    break;

            }


            // AST REWRITE
            // elements: expression, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 852:5: -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression )
            if (desc == null) {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:852:25: ^( TOK_TABSORTCOLNAMEASC expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);

                adaptor.addChild(root_1, stream_expression.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 853:5: -> ^( TOK_TABSORTCOLNAMEDESC expression )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:853:25: ^( TOK_TABSORTCOLNAMEDESC expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);

                adaptor.addChild(root_1, stream_expression.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnRefOrder

    public static class columnNameType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameType
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:856:1: columnNameType : colName= Identifier colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
    public final columnNameType_return columnNameType() throws RecognitionException {
        columnNameType_return retval = new columnNameType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token colName=null;
        Token comment=null;
        Token KW_COMMENT338=null;
        colType_return colType337 = null;


        CommonTree colName_tree=null;
        CommonTree comment_tree=null;
        CommonTree KW_COMMENT338_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         msgs.push("column specification"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:859:5: (colName= Identifier colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:859:7: colName= Identifier colType ( KW_COMMENT comment= StringLiteral )?
            {
            colName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_columnNameType5698); 
            stream_Identifier.add(colName);

            pushFollow(FOLLOW_colType_in_columnNameType5700);
            colType337=colType();
            _fsp--;

            stream_colType.add(colType337.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:859:34: ( KW_COMMENT comment= StringLiteral )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==KW_COMMENT) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:859:35: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT338=(Token)input.LT(1);
                    match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameType5703); 
                    stream_KW_COMMENT.add(KW_COMMENT338);

                    comment=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameType5707); 
                    stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: colName, colType, colType, comment, colName
            // token labels: comment, colName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleTokenStream stream_colName=new RewriteRuleTokenStream(adaptor,"token colName",colName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 860:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
            if (comment == null) {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:860:28: ^( TOK_TABCOL $colName colType )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);

                adaptor.addChild(root_1, stream_colName.next());
                adaptor.addChild(root_1, stream_colType.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 861:5: -> ^( TOK_TABCOL $colName colType $comment)
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:861:28: ^( TOK_TABCOL $colName colType $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);

                adaptor.addChild(root_1, stream_colName.next());
                adaptor.addChild(root_1, stream_colType.next());
                adaptor.addChild(root_1, stream_comment.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameType

    public static class columnNameColonType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameColonType
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:864:1: columnNameColonType : colName= Identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
    public final columnNameColonType_return columnNameColonType() throws RecognitionException {
        columnNameColonType_return retval = new columnNameColonType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token colName=null;
        Token comment=null;
        Token COLON339=null;
        Token KW_COMMENT341=null;
        colType_return colType340 = null;


        CommonTree colName_tree=null;
        CommonTree comment_tree=null;
        CommonTree COLON339_tree=null;
        CommonTree KW_COMMENT341_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         msgs.push("column specification"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:867:5: (colName= Identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:867:7: colName= Identifier COLON colType ( KW_COMMENT comment= StringLiteral )?
            {
            colName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_columnNameColonType5793); 
            stream_Identifier.add(colName);

            COLON339=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_columnNameColonType5795); 
            stream_COLON.add(COLON339);

            pushFollow(FOLLOW_colType_in_columnNameColonType5797);
            colType340=colType();
            _fsp--;

            stream_colType.add(colType340.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:867:40: ( KW_COMMENT comment= StringLiteral )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==KW_COMMENT) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:867:41: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT341=(Token)input.LT(1);
                    match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameColonType5800); 
                    stream_KW_COMMENT.add(KW_COMMENT341);

                    comment=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameColonType5804); 
                    stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: colType, comment, colName, colType, colName
            // token labels: comment, colName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleTokenStream stream_colName=new RewriteRuleTokenStream(adaptor,"token colName",colName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 868:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
            if (comment == null) {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:868:28: ^( TOK_TABCOL $colName colType )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);

                adaptor.addChild(root_1, stream_colName.next());
                adaptor.addChild(root_1, stream_colType.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 869:5: -> ^( TOK_TABCOL $colName colType $comment)
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:869:28: ^( TOK_TABCOL $colName colType $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);

                adaptor.addChild(root_1, stream_colName.next());
                adaptor.addChild(root_1, stream_colType.next());
                adaptor.addChild(root_1, stream_comment.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameColonType

    public static class colType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start colType
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:872:1: colType : type ;
    public final colType_return colType() throws RecognitionException {
        colType_return retval = new colType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        type_return type342 = null;



         msgs.push("column type"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:875:5: ( type )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:875:7: type
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_colType5888);
            type342=type();
            _fsp--;

            adaptor.addChild(root_0, type342.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end colType

    public static class colTypeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start colTypeList
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:878:1: colTypeList : colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) ;
    public final colTypeList_return colTypeList() throws RecognitionException {
        colTypeList_return retval = new colTypeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA344=null;
        colType_return colType343 = null;

        colType_return colType345 = null;


        CommonTree COMMA344_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         msgs.push("column type list"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:881:5: ( colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:881:7: colType ( COMMA colType )*
            {
            pushFollow(FOLLOW_colType_in_colTypeList5915);
            colType343=colType();
            _fsp--;

            stream_colType.add(colType343.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:881:15: ( COMMA colType )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==COMMA) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:881:16: COMMA colType
            	    {
            	    COMMA344=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_colTypeList5918); 
            	    stream_COMMA.add(COMMA344);

            	    pushFollow(FOLLOW_colType_in_colTypeList5920);
            	    colType345=colType();
            	    _fsp--;

            	    stream_colType.add(colType345.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            // AST REWRITE
            // elements: colType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 881:32: -> ^( TOK_COLTYPELIST ( colType )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:881:35: ^( TOK_COLTYPELIST ( colType )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_COLTYPELIST, "TOK_COLTYPELIST"), root_1);

                if ( !(stream_colType.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_colType.hasNext() ) {
                    adaptor.addChild(root_1, stream_colType.next());

                }
                stream_colType.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end colTypeList

    public static class type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start type
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:884:1: type : ( primitiveType | listType | structType | mapType | unionType );
    public final type_return type() throws RecognitionException {
        type_return retval = new type_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        primitiveType_return primitiveType346 = null;

        listType_return listType347 = null;

        structType_return structType348 = null;

        mapType_return mapType349 = null;

        unionType_return unionType350 = null;



        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:885:5: ( primitiveType | listType | structType | mapType | unionType )
            int alt98=5;
            switch ( input.LA(1) ) {
            case KW_TINYINT:
            case KW_SMALLINT:
            case KW_INT:
            case KW_BIGINT:
            case KW_BOOLEAN:
            case KW_FLOAT:
            case KW_DOUBLE:
            case KW_DATE:
            case KW_DATETIME:
            case KW_TIMESTAMP:
            case KW_STRING:
                {
                alt98=1;
                }
                break;
            case KW_ARRAY:
                {
                alt98=2;
                }
                break;
            case KW_STRUCT:
                {
                alt98=3;
                }
                break;
            case KW_MAP:
                {
                alt98=4;
                }
                break;
            case KW_UNIONTYPE:
                {
                alt98=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("884:1: type : ( primitiveType | listType | structType | mapType | unionType );", 98, 0, input);

                throw nvae;
            }

            switch (alt98) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:885:7: primitiveType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_type5948);
                    primitiveType346=primitiveType();
                    _fsp--;

                    adaptor.addChild(root_0, primitiveType346.getTree());

                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:886:7: listType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_listType_in_type5956);
                    listType347=listType();
                    _fsp--;

                    adaptor.addChild(root_0, listType347.getTree());

                    }
                    break;
                case 3 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:887:7: structType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_structType_in_type5964);
                    structType348=structType();
                    _fsp--;

                    adaptor.addChild(root_0, structType348.getTree());

                    }
                    break;
                case 4 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:888:7: mapType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_mapType_in_type5972);
                    mapType349=mapType();
                    _fsp--;

                    adaptor.addChild(root_0, mapType349.getTree());

                    }
                    break;
                case 5 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:889:7: unionType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unionType_in_type5981);
                    unionType350=unionType();
                    _fsp--;

                    adaptor.addChild(root_0, unionType350.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end type

    public static class primitiveType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start primitiveType
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:891:1: primitiveType : ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING );
    public final primitiveType_return primitiveType() throws RecognitionException {
        primitiveType_return retval = new primitiveType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_TINYINT351=null;
        Token KW_SMALLINT352=null;
        Token KW_INT353=null;
        Token KW_BIGINT354=null;
        Token KW_BOOLEAN355=null;
        Token KW_FLOAT356=null;
        Token KW_DOUBLE357=null;
        Token KW_DATE358=null;
        Token KW_DATETIME359=null;
        Token KW_TIMESTAMP360=null;
        Token KW_STRING361=null;

        CommonTree KW_TINYINT351_tree=null;
        CommonTree KW_SMALLINT352_tree=null;
        CommonTree KW_INT353_tree=null;
        CommonTree KW_BIGINT354_tree=null;
        CommonTree KW_BOOLEAN355_tree=null;
        CommonTree KW_FLOAT356_tree=null;
        CommonTree KW_DOUBLE357_tree=null;
        CommonTree KW_DATE358_tree=null;
        CommonTree KW_DATETIME359_tree=null;
        CommonTree KW_TIMESTAMP360_tree=null;
        CommonTree KW_STRING361_tree=null;
        RewriteRuleTokenStream stream_KW_DATETIME=new RewriteRuleTokenStream(adaptor,"token KW_DATETIME");
        RewriteRuleTokenStream stream_KW_STRING=new RewriteRuleTokenStream(adaptor,"token KW_STRING");
        RewriteRuleTokenStream stream_KW_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token KW_TIMESTAMP");
        RewriteRuleTokenStream stream_KW_DATE=new RewriteRuleTokenStream(adaptor,"token KW_DATE");
        RewriteRuleTokenStream stream_KW_FLOAT=new RewriteRuleTokenStream(adaptor,"token KW_FLOAT");
        RewriteRuleTokenStream stream_KW_INT=new RewriteRuleTokenStream(adaptor,"token KW_INT");
        RewriteRuleTokenStream stream_KW_SMALLINT=new RewriteRuleTokenStream(adaptor,"token KW_SMALLINT");
        RewriteRuleTokenStream stream_KW_DOUBLE=new RewriteRuleTokenStream(adaptor,"token KW_DOUBLE");
        RewriteRuleTokenStream stream_KW_BIGINT=new RewriteRuleTokenStream(adaptor,"token KW_BIGINT");
        RewriteRuleTokenStream stream_KW_TINYINT=new RewriteRuleTokenStream(adaptor,"token KW_TINYINT");
        RewriteRuleTokenStream stream_KW_BOOLEAN=new RewriteRuleTokenStream(adaptor,"token KW_BOOLEAN");

         msgs.push("primitive type specification"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:894:5: ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING )
            int alt99=11;
            switch ( input.LA(1) ) {
            case KW_TINYINT:
                {
                alt99=1;
                }
                break;
            case KW_SMALLINT:
                {
                alt99=2;
                }
                break;
            case KW_INT:
                {
                alt99=3;
                }
                break;
            case KW_BIGINT:
                {
                alt99=4;
                }
                break;
            case KW_BOOLEAN:
                {
                alt99=5;
                }
                break;
            case KW_FLOAT:
                {
                alt99=6;
                }
                break;
            case KW_DOUBLE:
                {
                alt99=7;
                }
                break;
            case KW_DATE:
                {
                alt99=8;
                }
                break;
            case KW_DATETIME:
                {
                alt99=9;
                }
                break;
            case KW_TIMESTAMP:
                {
                alt99=10;
                }
                break;
            case KW_STRING:
                {
                alt99=11;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("891:1: primitiveType : ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING );", 99, 0, input);

                throw nvae;
            }

            switch (alt99) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:894:7: KW_TINYINT
                    {
                    KW_TINYINT351=(Token)input.LT(1);
                    match(input,KW_TINYINT,FOLLOW_KW_TINYINT_in_primitiveType6003); 
                    stream_KW_TINYINT.add(KW_TINYINT351);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 894:24: -> TOK_TINYINT
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_TINYINT, "TOK_TINYINT"));

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:895:7: KW_SMALLINT
                    {
                    KW_SMALLINT352=(Token)input.LT(1);
                    match(input,KW_SMALLINT,FOLLOW_KW_SMALLINT_in_primitiveType6024); 
                    stream_KW_SMALLINT.add(KW_SMALLINT352);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 895:24: -> TOK_SMALLINT
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_SMALLINT, "TOK_SMALLINT"));

                    }



                    }
                    break;
                case 3 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:896:7: KW_INT
                    {
                    KW_INT353=(Token)input.LT(1);
                    match(input,KW_INT,FOLLOW_KW_INT_in_primitiveType6044); 
                    stream_KW_INT.add(KW_INT353);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 896:24: -> TOK_INT
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_INT, "TOK_INT"));

                    }



                    }
                    break;
                case 4 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:897:7: KW_BIGINT
                    {
                    KW_BIGINT354=(Token)input.LT(1);
                    match(input,KW_BIGINT,FOLLOW_KW_BIGINT_in_primitiveType6069); 
                    stream_KW_BIGINT.add(KW_BIGINT354);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 897:24: -> TOK_BIGINT
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_BIGINT, "TOK_BIGINT"));

                    }



                    }
                    break;
                case 5 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:898:7: KW_BOOLEAN
                    {
                    KW_BOOLEAN355=(Token)input.LT(1);
                    match(input,KW_BOOLEAN,FOLLOW_KW_BOOLEAN_in_primitiveType6091); 
                    stream_KW_BOOLEAN.add(KW_BOOLEAN355);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 898:24: -> TOK_BOOLEAN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_BOOLEAN, "TOK_BOOLEAN"));

                    }



                    }
                    break;
                case 6 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:899:7: KW_FLOAT
                    {
                    KW_FLOAT356=(Token)input.LT(1);
                    match(input,KW_FLOAT,FOLLOW_KW_FLOAT_in_primitiveType6112); 
                    stream_KW_FLOAT.add(KW_FLOAT356);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 899:24: -> TOK_FLOAT
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_FLOAT, "TOK_FLOAT"));

                    }



                    }
                    break;
                case 7 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:900:7: KW_DOUBLE
                    {
                    KW_DOUBLE357=(Token)input.LT(1);
                    match(input,KW_DOUBLE,FOLLOW_KW_DOUBLE_in_primitiveType6135); 
                    stream_KW_DOUBLE.add(KW_DOUBLE357);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 900:24: -> TOK_DOUBLE
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_DOUBLE, "TOK_DOUBLE"));

                    }



                    }
                    break;
                case 8 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:901:7: KW_DATE
                    {
                    KW_DATE358=(Token)input.LT(1);
                    match(input,KW_DATE,FOLLOW_KW_DATE_in_primitiveType6157); 
                    stream_KW_DATE.add(KW_DATE358);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 901:24: -> TOK_DATE
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_DATE, "TOK_DATE"));

                    }



                    }
                    break;
                case 9 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:902:7: KW_DATETIME
                    {
                    KW_DATETIME359=(Token)input.LT(1);
                    match(input,KW_DATETIME,FOLLOW_KW_DATETIME_in_primitiveType6181); 
                    stream_KW_DATETIME.add(KW_DATETIME359);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 902:24: -> TOK_DATETIME
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_DATETIME, "TOK_DATETIME"));

                    }



                    }
                    break;
                case 10 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:903:7: KW_TIMESTAMP
                    {
                    KW_TIMESTAMP360=(Token)input.LT(1);
                    match(input,KW_TIMESTAMP,FOLLOW_KW_TIMESTAMP_in_primitiveType6201); 
                    stream_KW_TIMESTAMP.add(KW_TIMESTAMP360);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 903:24: -> TOK_TIMESTAMP
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_TIMESTAMP, "TOK_TIMESTAMP"));

                    }



                    }
                    break;
                case 11 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:904:7: KW_STRING
                    {
                    KW_STRING361=(Token)input.LT(1);
                    match(input,KW_STRING,FOLLOW_KW_STRING_in_primitiveType6220); 
                    stream_KW_STRING.add(KW_STRING361);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 904:24: -> TOK_STRING
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_STRING, "TOK_STRING"));

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end primitiveType

    public static class listType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start listType
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:907:1: listType : KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) ;
    public final listType_return listType() throws RecognitionException {
        listType_return retval = new listType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ARRAY362=null;
        Token LESSTHAN363=null;
        Token GREATERTHAN365=null;
        type_return type364 = null;


        CommonTree KW_ARRAY362_tree=null;
        CommonTree LESSTHAN363_tree=null;
        CommonTree GREATERTHAN365_tree=null;
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_KW_ARRAY=new RewriteRuleTokenStream(adaptor,"token KW_ARRAY");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
         msgs.push("list type"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:910:5: ( KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:910:7: KW_ARRAY LESSTHAN type GREATERTHAN
            {
            KW_ARRAY362=(Token)input.LT(1);
            match(input,KW_ARRAY,FOLLOW_KW_ARRAY_in_listType6261); 
            stream_KW_ARRAY.add(KW_ARRAY362);

            LESSTHAN363=(Token)input.LT(1);
            match(input,LESSTHAN,FOLLOW_LESSTHAN_in_listType6263); 
            stream_LESSTHAN.add(LESSTHAN363);

            pushFollow(FOLLOW_type_in_listType6265);
            type364=type();
            _fsp--;

            stream_type.add(type364.getTree());
            GREATERTHAN365=(Token)input.LT(1);
            match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_listType6267); 
            stream_GREATERTHAN.add(GREATERTHAN365);


            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 910:44: -> ^( TOK_LIST type )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:910:47: ^( TOK_LIST type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LIST, "TOK_LIST"), root_1);

                adaptor.addChild(root_1, stream_type.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end listType

    public static class structType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start structType
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:913:1: structType : KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) ;
    public final structType_return structType() throws RecognitionException {
        structType_return retval = new structType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_STRUCT366=null;
        Token LESSTHAN367=null;
        Token GREATERTHAN369=null;
        columnNameColonTypeList_return columnNameColonTypeList368 = null;


        CommonTree KW_STRUCT366_tree=null;
        CommonTree LESSTHAN367_tree=null;
        CommonTree GREATERTHAN369_tree=null;
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_KW_STRUCT=new RewriteRuleTokenStream(adaptor,"token KW_STRUCT");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_columnNameColonTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonTypeList");
         msgs.push("struct type"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:916:5: ( KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:916:7: KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN
            {
            KW_STRUCT366=(Token)input.LT(1);
            match(input,KW_STRUCT,FOLLOW_KW_STRUCT_in_structType6304); 
            stream_KW_STRUCT.add(KW_STRUCT366);

            LESSTHAN367=(Token)input.LT(1);
            match(input,LESSTHAN,FOLLOW_LESSTHAN_in_structType6306); 
            stream_LESSTHAN.add(LESSTHAN367);

            pushFollow(FOLLOW_columnNameColonTypeList_in_structType6308);
            columnNameColonTypeList368=columnNameColonTypeList();
            _fsp--;

            stream_columnNameColonTypeList.add(columnNameColonTypeList368.getTree());
            GREATERTHAN369=(Token)input.LT(1);
            match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_structType6310); 
            stream_GREATERTHAN.add(GREATERTHAN369);


            // AST REWRITE
            // elements: columnNameColonTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 916:62: -> ^( TOK_STRUCT columnNameColonTypeList )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:916:65: ^( TOK_STRUCT columnNameColonTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_STRUCT, "TOK_STRUCT"), root_1);

                adaptor.addChild(root_1, stream_columnNameColonTypeList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end structType

    public static class mapType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start mapType
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:919:1: mapType : KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) ;
    public final mapType_return mapType() throws RecognitionException {
        mapType_return retval = new mapType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_MAP370=null;
        Token LESSTHAN371=null;
        Token COMMA372=null;
        Token GREATERTHAN373=null;
        primitiveType_return left = null;

        type_return right = null;


        CommonTree KW_MAP370_tree=null;
        CommonTree LESSTHAN371_tree=null;
        CommonTree COMMA372_tree=null;
        CommonTree GREATERTHAN373_tree=null;
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
         msgs.push("map type"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:922:5: ( KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:922:7: KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN
            {
            KW_MAP370=(Token)input.LT(1);
            match(input,KW_MAP,FOLLOW_KW_MAP_in_mapType6345); 
            stream_KW_MAP.add(KW_MAP370);

            LESSTHAN371=(Token)input.LT(1);
            match(input,LESSTHAN,FOLLOW_LESSTHAN_in_mapType6347); 
            stream_LESSTHAN.add(LESSTHAN371);

            pushFollow(FOLLOW_primitiveType_in_mapType6351);
            left=primitiveType();
            _fsp--;

            stream_primitiveType.add(left.getTree());
            COMMA372=(Token)input.LT(1);
            match(input,COMMA,FOLLOW_COMMA_in_mapType6353); 
            stream_COMMA.add(COMMA372);

            pushFollow(FOLLOW_type_in_mapType6357);
            right=type();
            _fsp--;

            stream_type.add(right.getTree());
            GREATERTHAN373=(Token)input.LT(1);
            match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_mapType6359); 
            stream_GREATERTHAN.add(GREATERTHAN373);


            // AST REWRITE
            // elements: right, left
            // token labels: 
            // rule labels: retval, left, right
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"token left",left!=null?left.tree:null);
            RewriteRuleSubtreeStream stream_right=new RewriteRuleSubtreeStream(adaptor,"token right",right!=null?right.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 923:5: -> ^( TOK_MAP $left $right)
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:923:8: ^( TOK_MAP $left $right)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_MAP, "TOK_MAP"), root_1);

                adaptor.addChild(root_1, stream_left.next());
                adaptor.addChild(root_1, stream_right.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end mapType

    public static class unionType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unionType
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:926:1: unionType : KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) ;
    public final unionType_return unionType() throws RecognitionException {
        unionType_return retval = new unionType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_UNIONTYPE374=null;
        Token LESSTHAN375=null;
        Token GREATERTHAN377=null;
        colTypeList_return colTypeList376 = null;


        CommonTree KW_UNIONTYPE374_tree=null;
        CommonTree LESSTHAN375_tree=null;
        CommonTree GREATERTHAN377_tree=null;
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_KW_UNIONTYPE=new RewriteRuleTokenStream(adaptor,"token KW_UNIONTYPE");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_colTypeList=new RewriteRuleSubtreeStream(adaptor,"rule colTypeList");
         msgs.push("uniontype type"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:929:5: ( KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:929:7: KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN
            {
            KW_UNIONTYPE374=(Token)input.LT(1);
            match(input,KW_UNIONTYPE,FOLLOW_KW_UNIONTYPE_in_unionType6402); 
            stream_KW_UNIONTYPE.add(KW_UNIONTYPE374);

            LESSTHAN375=(Token)input.LT(1);
            match(input,LESSTHAN,FOLLOW_LESSTHAN_in_unionType6404); 
            stream_LESSTHAN.add(LESSTHAN375);

            pushFollow(FOLLOW_colTypeList_in_unionType6406);
            colTypeList376=colTypeList();
            _fsp--;

            stream_colTypeList.add(colTypeList376.getTree());
            GREATERTHAN377=(Token)input.LT(1);
            match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_unionType6408); 
            stream_GREATERTHAN.add(GREATERTHAN377);


            // AST REWRITE
            // elements: colTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 929:53: -> ^( TOK_UNIONTYPE colTypeList )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:929:56: ^( TOK_UNIONTYPE colTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_UNIONTYPE, "TOK_UNIONTYPE"), root_1);

                adaptor.addChild(root_1, stream_colTypeList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end unionType

    public static class queryOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start queryOperator
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:932:1: queryOperator : KW_UNION KW_ALL -> ^( TOK_UNION ) ;
    public final queryOperator_return queryOperator() throws RecognitionException {
        queryOperator_return retval = new queryOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_UNION378=null;
        Token KW_ALL379=null;

        CommonTree KW_UNION378_tree=null;
        CommonTree KW_ALL379_tree=null;
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
        RewriteRuleTokenStream stream_KW_UNION=new RewriteRuleTokenStream(adaptor,"token KW_UNION");

         msgs.push("query operator"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:935:5: ( KW_UNION KW_ALL -> ^( TOK_UNION ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:935:7: KW_UNION KW_ALL
            {
            KW_UNION378=(Token)input.LT(1);
            match(input,KW_UNION,FOLLOW_KW_UNION_in_queryOperator6443); 
            stream_KW_UNION.add(KW_UNION378);

            KW_ALL379=(Token)input.LT(1);
            match(input,KW_ALL,FOLLOW_KW_ALL_in_queryOperator6445); 
            stream_KW_ALL.add(KW_ALL379);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 935:23: -> ^( TOK_UNION )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:935:26: ^( TOK_UNION )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_UNION, "TOK_UNION"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end queryOperator

    public static class queryStatementExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start queryStatementExpression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:939:1: queryStatementExpression : queryStatement ( queryOperator queryStatement )* ;
    public final queryStatementExpression_return queryStatementExpression() throws RecognitionException {
        queryStatementExpression_return retval = new queryStatementExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        queryStatement_return queryStatement380 = null;

        queryOperator_return queryOperator381 = null;

        queryStatement_return queryStatement382 = null;



        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:940:5: ( queryStatement ( queryOperator queryStatement )* )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:940:7: queryStatement ( queryOperator queryStatement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_queryStatement_in_queryStatementExpression6469);
            queryStatement380=queryStatement();
            _fsp--;

            adaptor.addChild(root_0, queryStatement380.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:940:22: ( queryOperator queryStatement )*
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);

                if ( (LA100_0==KW_UNION) ) {
                    alt100=1;
                }


                switch (alt100) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:940:23: queryOperator queryStatement
            	    {
            	    pushFollow(FOLLOW_queryOperator_in_queryStatementExpression6472);
            	    queryOperator381=queryOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(queryOperator381.getTree(), root_0);
            	    pushFollow(FOLLOW_queryStatement_in_queryStatementExpression6475);
            	    queryStatement382=queryStatement();
            	    _fsp--;

            	    adaptor.addChild(root_0, queryStatement382.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end queryStatementExpression

    public static class queryStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start queryStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:943:1: queryStatement : ( fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) | regular_body );
    public final queryStatement_return queryStatement() throws RecognitionException {
        queryStatement_return retval = new queryStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        List list_b=null;
        fromClause_return fromClause383 = null;

        regular_body_return regular_body384 = null;

        RuleReturnScope b = null;
        RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body");
        RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:944:5: ( fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) | regular_body )
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==KW_FROM) ) {
                alt102=1;
            }
            else if ( (LA102_0==KW_MAP||LA102_0==KW_INSERT||LA102_0==KW_SELECT||LA102_0==KW_REDUCE) ) {
                alt102=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("943:1: queryStatement : ( fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) | regular_body );", 102, 0, input);

                throw nvae;
            }
            switch (alt102) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:945:5: fromClause (b+= body )+
                    {
                    pushFollow(FOLLOW_fromClause_in_queryStatement6498);
                    fromClause383=fromClause();
                    _fsp--;

                    stream_fromClause.add(fromClause383.getTree());
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:5: (b+= body )+
                    int cnt101=0;
                    loop101:
                    do {
                        int alt101=2;
                        int LA101_0 = input.LA(1);

                        if ( (LA101_0==KW_MAP||LA101_0==KW_INSERT||LA101_0==KW_SELECT||LA101_0==KW_REDUCE) ) {
                            alt101=1;
                        }


                        switch (alt101) {
                    	case 1 :
                    	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:7: b+= body
                    	    {
                    	    pushFollow(FOLLOW_body_in_queryStatement6508);
                    	    b=body();
                    	    _fsp--;

                    	    stream_body.add(b.getTree());
                    	    if (list_b==null) list_b=new ArrayList();
                    	    list_b.add(b);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt101 >= 1 ) break loop101;
                                EarlyExitException eee =
                                    new EarlyExitException(101, input);
                                throw eee;
                        }
                        cnt101++;
                    } while (true);


                    // AST REWRITE
                    // elements: fromClause, body
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 946:18: -> ^( TOK_QUERY fromClause ( body )+ )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:21: ^( TOK_QUERY fromClause ( body )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);

                        adaptor.addChild(root_1, stream_fromClause.next());
                        if ( !(stream_body.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_body.hasNext() ) {
                            adaptor.addChild(root_1, stream_body.next());

                        }
                        stream_body.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:947:7: regular_body
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_regular_body_in_queryStatement6530);
                    regular_body384=regular_body();
                    _fsp--;

                    adaptor.addChild(root_0, regular_body384.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end queryStatement

    public static class regular_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start regular_body
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:950:1: regular_body : ( insertClause selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) | selectStatement );
    public final regular_body_return regular_body() throws RecognitionException {
        regular_body_return retval = new regular_body_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        insertClause_return insertClause385 = null;

        selectClause_return selectClause386 = null;

        fromClause_return fromClause387 = null;

        whereClause_return whereClause388 = null;

        groupByClause_return groupByClause389 = null;

        havingClause_return havingClause390 = null;

        orderByClause_return orderByClause391 = null;

        clusterByClause_return clusterByClause392 = null;

        distributeByClause_return distributeByClause393 = null;

        sortByClause_return sortByClause394 = null;

        limitClause_return limitClause395 = null;

        selectStatement_return selectStatement396 = null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
        RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
        RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
        RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:951:4: ( insertClause selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) | selectStatement )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==KW_INSERT) ) {
                alt111=1;
            }
            else if ( (LA111_0==KW_MAP||LA111_0==KW_SELECT||LA111_0==KW_REDUCE) ) {
                alt111=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("950:1: regular_body : ( insertClause selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) | selectStatement );", 111, 0, input);

                throw nvae;
            }
            switch (alt111) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:952:4: insertClause selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
                    {
                    pushFollow(FOLLOW_insertClause_in_regular_body6549);
                    insertClause385=insertClause();
                    _fsp--;

                    stream_insertClause.add(insertClause385.getTree());
                    pushFollow(FOLLOW_selectClause_in_regular_body6554);
                    selectClause386=selectClause();
                    _fsp--;

                    stream_selectClause.add(selectClause386.getTree());
                    pushFollow(FOLLOW_fromClause_in_regular_body6559);
                    fromClause387=fromClause();
                    _fsp--;

                    stream_fromClause.add(fromClause387.getTree());
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:955:4: ( whereClause )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==KW_WHERE) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:955:4: whereClause
                            {
                            pushFollow(FOLLOW_whereClause_in_regular_body6564);
                            whereClause388=whereClause();
                            _fsp--;

                            stream_whereClause.add(whereClause388.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:956:4: ( groupByClause )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==KW_GROUP) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:956:4: groupByClause
                            {
                            pushFollow(FOLLOW_groupByClause_in_regular_body6570);
                            groupByClause389=groupByClause();
                            _fsp--;

                            stream_groupByClause.add(groupByClause389.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:957:4: ( havingClause )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==KW_HAVING) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:957:4: havingClause
                            {
                            pushFollow(FOLLOW_havingClause_in_regular_body6576);
                            havingClause390=havingClause();
                            _fsp--;

                            stream_havingClause.add(havingClause390.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:958:4: ( orderByClause )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==KW_ORDER) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:958:4: orderByClause
                            {
                            pushFollow(FOLLOW_orderByClause_in_regular_body6582);
                            orderByClause391=orderByClause();
                            _fsp--;

                            stream_orderByClause.add(orderByClause391.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:959:4: ( clusterByClause )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==KW_CLUSTER) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:959:4: clusterByClause
                            {
                            pushFollow(FOLLOW_clusterByClause_in_regular_body6588);
                            clusterByClause392=clusterByClause();
                            _fsp--;

                            stream_clusterByClause.add(clusterByClause392.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:960:4: ( distributeByClause )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==KW_DISTRIBUTE) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:960:4: distributeByClause
                            {
                            pushFollow(FOLLOW_distributeByClause_in_regular_body6594);
                            distributeByClause393=distributeByClause();
                            _fsp--;

                            stream_distributeByClause.add(distributeByClause393.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:961:4: ( sortByClause )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==KW_SORT) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:961:4: sortByClause
                            {
                            pushFollow(FOLLOW_sortByClause_in_regular_body6600);
                            sortByClause394=sortByClause();
                            _fsp--;

                            stream_sortByClause.add(sortByClause394.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:962:4: ( limitClause )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==KW_LIMIT) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:962:4: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_regular_body6606);
                            limitClause395=limitClause();
                            _fsp--;

                            stream_limitClause.add(limitClause395.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: limitClause, groupByClause, whereClause, havingClause, distributeByClause, orderByClause, sortByClause, selectClause, clusterByClause, fromClause, insertClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 962:17: -> ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:962:20: ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);

                        adaptor.addChild(root_1, stream_fromClause.next());
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:962:43: ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);

                        adaptor.addChild(root_2, stream_insertClause.next());
                        adaptor.addChild(root_2, stream_selectClause.next());
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:963:35: ( whereClause )?
                        if ( stream_whereClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_whereClause.next());

                        }
                        stream_whereClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:963:48: ( groupByClause )?
                        if ( stream_groupByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_groupByClause.next());

                        }
                        stream_groupByClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:963:63: ( havingClause )?
                        if ( stream_havingClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_havingClause.next());

                        }
                        stream_havingClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:963:77: ( orderByClause )?
                        if ( stream_orderByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_orderByClause.next());

                        }
                        stream_orderByClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:963:92: ( clusterByClause )?
                        if ( stream_clusterByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_clusterByClause.next());

                        }
                        stream_clusterByClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:964:22: ( distributeByClause )?
                        if ( stream_distributeByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_distributeByClause.next());

                        }
                        stream_distributeByClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:964:42: ( sortByClause )?
                        if ( stream_sortByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_sortByClause.next());

                        }
                        stream_sortByClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:964:56: ( limitClause )?
                        if ( stream_limitClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_limitClause.next());

                        }
                        stream_limitClause.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:966:4: selectStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_selectStatement_in_regular_body6699);
                    selectStatement396=selectStatement();
                    _fsp--;

                    adaptor.addChild(root_0, selectStatement396.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end regular_body

    public static class selectStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:969:1: selectStatement : selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) ;
    public final selectStatement_return selectStatement() throws RecognitionException {
        selectStatement_return retval = new selectStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        selectClause_return selectClause397 = null;

        fromClause_return fromClause398 = null;

        whereClause_return whereClause399 = null;

        groupByClause_return groupByClause400 = null;

        havingClause_return havingClause401 = null;

        orderByClause_return orderByClause402 = null;

        clusterByClause_return clusterByClause403 = null;

        distributeByClause_return distributeByClause404 = null;

        sortByClause_return sortByClause405 = null;

        limitClause_return limitClause406 = null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
        RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
        RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:970:4: ( selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:971:4: selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
            {
            pushFollow(FOLLOW_selectClause_in_selectStatement6717);
            selectClause397=selectClause();
            _fsp--;

            stream_selectClause.add(selectClause397.getTree());
            pushFollow(FOLLOW_fromClause_in_selectStatement6722);
            fromClause398=fromClause();
            _fsp--;

            stream_fromClause.add(fromClause398.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:973:4: ( whereClause )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==KW_WHERE) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:973:4: whereClause
                    {
                    pushFollow(FOLLOW_whereClause_in_selectStatement6727);
                    whereClause399=whereClause();
                    _fsp--;

                    stream_whereClause.add(whereClause399.getTree());

                    }
                    break;

            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:974:4: ( groupByClause )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==KW_GROUP) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:974:4: groupByClause
                    {
                    pushFollow(FOLLOW_groupByClause_in_selectStatement6733);
                    groupByClause400=groupByClause();
                    _fsp--;

                    stream_groupByClause.add(groupByClause400.getTree());

                    }
                    break;

            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:975:4: ( havingClause )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==KW_HAVING) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:975:4: havingClause
                    {
                    pushFollow(FOLLOW_havingClause_in_selectStatement6739);
                    havingClause401=havingClause();
                    _fsp--;

                    stream_havingClause.add(havingClause401.getTree());

                    }
                    break;

            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:976:4: ( orderByClause )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==KW_ORDER) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:976:4: orderByClause
                    {
                    pushFollow(FOLLOW_orderByClause_in_selectStatement6745);
                    orderByClause402=orderByClause();
                    _fsp--;

                    stream_orderByClause.add(orderByClause402.getTree());

                    }
                    break;

            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:977:4: ( clusterByClause )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==KW_CLUSTER) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:977:4: clusterByClause
                    {
                    pushFollow(FOLLOW_clusterByClause_in_selectStatement6751);
                    clusterByClause403=clusterByClause();
                    _fsp--;

                    stream_clusterByClause.add(clusterByClause403.getTree());

                    }
                    break;

            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:978:4: ( distributeByClause )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==KW_DISTRIBUTE) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:978:4: distributeByClause
                    {
                    pushFollow(FOLLOW_distributeByClause_in_selectStatement6757);
                    distributeByClause404=distributeByClause();
                    _fsp--;

                    stream_distributeByClause.add(distributeByClause404.getTree());

                    }
                    break;

            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:979:4: ( sortByClause )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==KW_SORT) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:979:4: sortByClause
                    {
                    pushFollow(FOLLOW_sortByClause_in_selectStatement6763);
                    sortByClause405=sortByClause();
                    _fsp--;

                    stream_sortByClause.add(sortByClause405.getTree());

                    }
                    break;

            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:980:4: ( limitClause )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==KW_LIMIT) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:980:4: limitClause
                    {
                    pushFollow(FOLLOW_limitClause_in_selectStatement6769);
                    limitClause406=limitClause();
                    _fsp--;

                    stream_limitClause.add(limitClause406.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: orderByClause, havingClause, clusterByClause, fromClause, limitClause, selectClause, sortByClause, whereClause, distributeByClause, groupByClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 980:17: -> ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:980:20: ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);

                adaptor.addChild(root_1, stream_fromClause.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:980:43: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);

                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:980:56: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);

                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:980:74: ^( TOK_DIR TOK_TMP_FILE )
                {
                CommonTree root_4 = (CommonTree)adaptor.nil();
                root_4 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DIR, "TOK_DIR"), root_4);

                adaptor.addChild(root_4, adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_2, stream_selectClause.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:981:35: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_whereClause.next());

                }
                stream_whereClause.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:981:48: ( groupByClause )?
                if ( stream_groupByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_groupByClause.next());

                }
                stream_groupByClause.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:981:63: ( havingClause )?
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_havingClause.next());

                }
                stream_havingClause.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:981:77: ( orderByClause )?
                if ( stream_orderByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_orderByClause.next());

                }
                stream_orderByClause.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:981:92: ( clusterByClause )?
                if ( stream_clusterByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_clusterByClause.next());

                }
                stream_clusterByClause.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:982:22: ( distributeByClause )?
                if ( stream_distributeByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_distributeByClause.next());

                }
                stream_distributeByClause.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:982:42: ( sortByClause )?
                if ( stream_sortByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_sortByClause.next());

                }
                stream_sortByClause.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:982:56: ( limitClause )?
                if ( stream_limitClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_limitClause.next());

                }
                stream_limitClause.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectStatement

    public static class body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start body
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:986:1: body : ( insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) | selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) );
    public final body_return body() throws RecognitionException {
        body_return retval = new body_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        insertClause_return insertClause407 = null;

        selectClause_return selectClause408 = null;

        whereClause_return whereClause409 = null;

        groupByClause_return groupByClause410 = null;

        havingClause_return havingClause411 = null;

        orderByClause_return orderByClause412 = null;

        clusterByClause_return clusterByClause413 = null;

        distributeByClause_return distributeByClause414 = null;

        sortByClause_return sortByClause415 = null;

        limitClause_return limitClause416 = null;

        selectClause_return selectClause417 = null;

        whereClause_return whereClause418 = null;

        groupByClause_return groupByClause419 = null;

        havingClause_return havingClause420 = null;

        orderByClause_return orderByClause421 = null;

        clusterByClause_return clusterByClause422 = null;

        distributeByClause_return distributeByClause423 = null;

        sortByClause_return sortByClause424 = null;

        limitClause_return limitClause425 = null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
        RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
        RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
        RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:987:4: ( insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) | selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==KW_INSERT) ) {
                alt136=1;
            }
            else if ( (LA136_0==KW_MAP||LA136_0==KW_SELECT||LA136_0==KW_REDUCE) ) {
                alt136=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("986:1: body : ( insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) | selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) );", 136, 0, input);

                throw nvae;
            }
            switch (alt136) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:988:4: insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
                    {
                    pushFollow(FOLLOW_insertClause_in_body6879);
                    insertClause407=insertClause();
                    _fsp--;

                    stream_insertClause.add(insertClause407.getTree());
                    pushFollow(FOLLOW_selectClause_in_body6884);
                    selectClause408=selectClause();
                    _fsp--;

                    stream_selectClause.add(selectClause408.getTree());
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:990:4: ( whereClause )?
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( (LA120_0==KW_WHERE) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:990:4: whereClause
                            {
                            pushFollow(FOLLOW_whereClause_in_body6889);
                            whereClause409=whereClause();
                            _fsp--;

                            stream_whereClause.add(whereClause409.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:991:4: ( groupByClause )?
                    int alt121=2;
                    int LA121_0 = input.LA(1);

                    if ( (LA121_0==KW_GROUP) ) {
                        alt121=1;
                    }
                    switch (alt121) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:991:4: groupByClause
                            {
                            pushFollow(FOLLOW_groupByClause_in_body6895);
                            groupByClause410=groupByClause();
                            _fsp--;

                            stream_groupByClause.add(groupByClause410.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:992:4: ( havingClause )?
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==KW_HAVING) ) {
                        alt122=1;
                    }
                    switch (alt122) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:992:4: havingClause
                            {
                            pushFollow(FOLLOW_havingClause_in_body6901);
                            havingClause411=havingClause();
                            _fsp--;

                            stream_havingClause.add(havingClause411.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:993:4: ( orderByClause )?
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==KW_ORDER) ) {
                        alt123=1;
                    }
                    switch (alt123) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:993:4: orderByClause
                            {
                            pushFollow(FOLLOW_orderByClause_in_body6907);
                            orderByClause412=orderByClause();
                            _fsp--;

                            stream_orderByClause.add(orderByClause412.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:994:4: ( clusterByClause )?
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==KW_CLUSTER) ) {
                        alt124=1;
                    }
                    switch (alt124) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:994:4: clusterByClause
                            {
                            pushFollow(FOLLOW_clusterByClause_in_body6913);
                            clusterByClause413=clusterByClause();
                            _fsp--;

                            stream_clusterByClause.add(clusterByClause413.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:995:4: ( distributeByClause )?
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( (LA125_0==KW_DISTRIBUTE) ) {
                        alt125=1;
                    }
                    switch (alt125) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:995:4: distributeByClause
                            {
                            pushFollow(FOLLOW_distributeByClause_in_body6919);
                            distributeByClause414=distributeByClause();
                            _fsp--;

                            stream_distributeByClause.add(distributeByClause414.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:996:4: ( sortByClause )?
                    int alt126=2;
                    int LA126_0 = input.LA(1);

                    if ( (LA126_0==KW_SORT) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:996:4: sortByClause
                            {
                            pushFollow(FOLLOW_sortByClause_in_body6925);
                            sortByClause415=sortByClause();
                            _fsp--;

                            stream_sortByClause.add(sortByClause415.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:997:4: ( limitClause )?
                    int alt127=2;
                    int LA127_0 = input.LA(1);

                    if ( (LA127_0==KW_LIMIT) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:997:4: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_body6931);
                            limitClause416=limitClause();
                            _fsp--;

                            stream_limitClause.add(limitClause416.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: distributeByClause, sortByClause, orderByClause, clusterByClause, havingClause, whereClause, insertClause, limitClause, groupByClause, selectClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 997:17: -> ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:997:20: ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INSERT, "TOK_INSERT"), root_1);

                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:997:33: ( insertClause )?
                        if ( stream_insertClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_insertClause.next());

                        }
                        stream_insertClause.reset();
                        adaptor.addChild(root_1, stream_selectClause.next());
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:998:35: ( whereClause )?
                        if ( stream_whereClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whereClause.next());

                        }
                        stream_whereClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:998:48: ( groupByClause )?
                        if ( stream_groupByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_groupByClause.next());

                        }
                        stream_groupByClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:998:63: ( havingClause )?
                        if ( stream_havingClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_havingClause.next());

                        }
                        stream_havingClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:998:77: ( orderByClause )?
                        if ( stream_orderByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_orderByClause.next());

                        }
                        stream_orderByClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:998:92: ( clusterByClause )?
                        if ( stream_clusterByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_clusterByClause.next());

                        }
                        stream_clusterByClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:999:22: ( distributeByClause )?
                        if ( stream_distributeByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_distributeByClause.next());

                        }
                        stream_distributeByClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:999:42: ( sortByClause )?
                        if ( stream_sortByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_sortByClause.next());

                        }
                        stream_sortByClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:999:56: ( limitClause )?
                        if ( stream_limitClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_limitClause.next());

                        }
                        stream_limitClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1001:4: selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
                    {
                    pushFollow(FOLLOW_selectClause_in_body7019);
                    selectClause417=selectClause();
                    _fsp--;

                    stream_selectClause.add(selectClause417.getTree());
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1002:4: ( whereClause )?
                    int alt128=2;
                    int LA128_0 = input.LA(1);

                    if ( (LA128_0==KW_WHERE) ) {
                        alt128=1;
                    }
                    switch (alt128) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1002:4: whereClause
                            {
                            pushFollow(FOLLOW_whereClause_in_body7024);
                            whereClause418=whereClause();
                            _fsp--;

                            stream_whereClause.add(whereClause418.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1003:4: ( groupByClause )?
                    int alt129=2;
                    int LA129_0 = input.LA(1);

                    if ( (LA129_0==KW_GROUP) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1003:4: groupByClause
                            {
                            pushFollow(FOLLOW_groupByClause_in_body7030);
                            groupByClause419=groupByClause();
                            _fsp--;

                            stream_groupByClause.add(groupByClause419.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1004:4: ( havingClause )?
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==KW_HAVING) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1004:4: havingClause
                            {
                            pushFollow(FOLLOW_havingClause_in_body7036);
                            havingClause420=havingClause();
                            _fsp--;

                            stream_havingClause.add(havingClause420.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1005:4: ( orderByClause )?
                    int alt131=2;
                    int LA131_0 = input.LA(1);

                    if ( (LA131_0==KW_ORDER) ) {
                        alt131=1;
                    }
                    switch (alt131) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1005:4: orderByClause
                            {
                            pushFollow(FOLLOW_orderByClause_in_body7042);
                            orderByClause421=orderByClause();
                            _fsp--;

                            stream_orderByClause.add(orderByClause421.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1006:4: ( clusterByClause )?
                    int alt132=2;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==KW_CLUSTER) ) {
                        alt132=1;
                    }
                    switch (alt132) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1006:4: clusterByClause
                            {
                            pushFollow(FOLLOW_clusterByClause_in_body7048);
                            clusterByClause422=clusterByClause();
                            _fsp--;

                            stream_clusterByClause.add(clusterByClause422.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1007:4: ( distributeByClause )?
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==KW_DISTRIBUTE) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1007:4: distributeByClause
                            {
                            pushFollow(FOLLOW_distributeByClause_in_body7054);
                            distributeByClause423=distributeByClause();
                            _fsp--;

                            stream_distributeByClause.add(distributeByClause423.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1008:4: ( sortByClause )?
                    int alt134=2;
                    int LA134_0 = input.LA(1);

                    if ( (LA134_0==KW_SORT) ) {
                        alt134=1;
                    }
                    switch (alt134) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1008:4: sortByClause
                            {
                            pushFollow(FOLLOW_sortByClause_in_body7060);
                            sortByClause424=sortByClause();
                            _fsp--;

                            stream_sortByClause.add(sortByClause424.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1009:4: ( limitClause )?
                    int alt135=2;
                    int LA135_0 = input.LA(1);

                    if ( (LA135_0==KW_LIMIT) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1009:4: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_body7066);
                            limitClause425=limitClause();
                            _fsp--;

                            stream_limitClause.add(limitClause425.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: sortByClause, havingClause, groupByClause, clusterByClause, limitClause, distributeByClause, orderByClause, selectClause, whereClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1009:17: -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1009:20: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INSERT, "TOK_INSERT"), root_1);

                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1009:33: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_2);

                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1009:51: ^( TOK_DIR TOK_TMP_FILE )
                        {
                        CommonTree root_3 = (CommonTree)adaptor.nil();
                        root_3 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DIR, "TOK_DIR"), root_3);

                        adaptor.addChild(root_3, adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_selectClause.next());
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1010:35: ( whereClause )?
                        if ( stream_whereClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whereClause.next());

                        }
                        stream_whereClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1010:48: ( groupByClause )?
                        if ( stream_groupByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_groupByClause.next());

                        }
                        stream_groupByClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1010:63: ( havingClause )?
                        if ( stream_havingClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_havingClause.next());

                        }
                        stream_havingClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1010:77: ( orderByClause )?
                        if ( stream_orderByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_orderByClause.next());

                        }
                        stream_orderByClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1010:92: ( clusterByClause )?
                        if ( stream_clusterByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_clusterByClause.next());

                        }
                        stream_clusterByClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1011:22: ( distributeByClause )?
                        if ( stream_distributeByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_distributeByClause.next());

                        }
                        stream_distributeByClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1011:42: ( sortByClause )?
                        if ( stream_sortByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_sortByClause.next());

                        }
                        stream_sortByClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1011:56: ( limitClause )?
                        if ( stream_limitClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_limitClause.next());

                        }
                        stream_limitClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end body

    public static class insertClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start insertClause
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1014:1: insertClause : KW_INSERT KW_OVERWRITE destination -> ^( TOK_DESTINATION destination ) ;
    public final insertClause_return insertClause() throws RecognitionException {
        insertClause_return retval = new insertClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_INSERT426=null;
        Token KW_OVERWRITE427=null;
        destination_return destination428 = null;


        CommonTree KW_INSERT426_tree=null;
        CommonTree KW_OVERWRITE427_tree=null;
        RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
        RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
        RewriteRuleSubtreeStream stream_destination=new RewriteRuleSubtreeStream(adaptor,"rule destination");
         msgs.push("insert clause"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1017:4: ( KW_INSERT KW_OVERWRITE destination -> ^( TOK_DESTINATION destination ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1018:4: KW_INSERT KW_OVERWRITE destination
            {
            KW_INSERT426=(Token)input.LT(1);
            match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause7179); 
            stream_KW_INSERT.add(KW_INSERT426);

            KW_OVERWRITE427=(Token)input.LT(1);
            match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_insertClause7181); 
            stream_KW_OVERWRITE.add(KW_OVERWRITE427);

            pushFollow(FOLLOW_destination_in_insertClause7183);
            destination428=destination();
            _fsp--;

            stream_destination.add(destination428.getTree());

            // AST REWRITE
            // elements: destination
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1018:39: -> ^( TOK_DESTINATION destination )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1018:42: ^( TOK_DESTINATION destination )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_1);

                adaptor.addChild(root_1, stream_destination.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end insertClause

    public static class destination_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start destination
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1021:1: destination : ( KW_LOCAL KW_DIRECTORY StringLiteral -> ^( TOK_LOCAL_DIR StringLiteral ) | KW_DIRECTORY StringLiteral -> ^( TOK_DIR StringLiteral ) | KW_TABLE tabName -> ^( tabName ) );
    public final destination_return destination() throws RecognitionException {
        destination_return retval = new destination_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_LOCAL429=null;
        Token KW_DIRECTORY430=null;
        Token StringLiteral431=null;
        Token KW_DIRECTORY432=null;
        Token StringLiteral433=null;
        Token KW_TABLE434=null;
        tabName_return tabName435 = null;


        CommonTree KW_LOCAL429_tree=null;
        CommonTree KW_DIRECTORY430_tree=null;
        CommonTree StringLiteral431_tree=null;
        CommonTree KW_DIRECTORY432_tree=null;
        CommonTree StringLiteral433_tree=null;
        CommonTree KW_TABLE434_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_DIRECTORY=new RewriteRuleTokenStream(adaptor,"token KW_DIRECTORY");
        RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName");
         msgs.push("destination specification"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1024:4: ( KW_LOCAL KW_DIRECTORY StringLiteral -> ^( TOK_LOCAL_DIR StringLiteral ) | KW_DIRECTORY StringLiteral -> ^( TOK_DIR StringLiteral ) | KW_TABLE tabName -> ^( tabName ) )
            int alt137=3;
            switch ( input.LA(1) ) {
            case KW_LOCAL:
                {
                alt137=1;
                }
                break;
            case KW_DIRECTORY:
                {
                alt137=2;
                }
                break;
            case KW_TABLE:
                {
                alt137=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1021:1: destination : ( KW_LOCAL KW_DIRECTORY StringLiteral -> ^( TOK_LOCAL_DIR StringLiteral ) | KW_DIRECTORY StringLiteral -> ^( TOK_DIR StringLiteral ) | KW_TABLE tabName -> ^( tabName ) );", 137, 0, input);

                throw nvae;
            }

            switch (alt137) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1025:6: KW_LOCAL KW_DIRECTORY StringLiteral
                    {
                    KW_LOCAL429=(Token)input.LT(1);
                    match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_destination7221); 
                    stream_KW_LOCAL.add(KW_LOCAL429);

                    KW_DIRECTORY430=(Token)input.LT(1);
                    match(input,KW_DIRECTORY,FOLLOW_KW_DIRECTORY_in_destination7223); 
                    stream_KW_DIRECTORY.add(KW_DIRECTORY430);

                    StringLiteral431=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_destination7225); 
                    stream_StringLiteral.add(StringLiteral431);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1025:42: -> ^( TOK_LOCAL_DIR StringLiteral )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1025:45: ^( TOK_LOCAL_DIR StringLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LOCAL_DIR, "TOK_LOCAL_DIR"), root_1);

                        adaptor.addChild(root_1, stream_StringLiteral.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1026:6: KW_DIRECTORY StringLiteral
                    {
                    KW_DIRECTORY432=(Token)input.LT(1);
                    match(input,KW_DIRECTORY,FOLLOW_KW_DIRECTORY_in_destination7240); 
                    stream_KW_DIRECTORY.add(KW_DIRECTORY432);

                    StringLiteral433=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_destination7242); 
                    stream_StringLiteral.add(StringLiteral433);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1026:33: -> ^( TOK_DIR StringLiteral )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1026:36: ^( TOK_DIR StringLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DIR, "TOK_DIR"), root_1);

                        adaptor.addChild(root_1, stream_StringLiteral.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1027:6: KW_TABLE tabName
                    {
                    KW_TABLE434=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_destination7257); 
                    stream_KW_TABLE.add(KW_TABLE434);

                    pushFollow(FOLLOW_tabName_in_destination7259);
                    tabName435=tabName();
                    _fsp--;

                    stream_tabName.add(tabName435.getTree());

                    // AST REWRITE
                    // elements: tabName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1027:23: -> ^( tabName )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1027:26: ^( tabName )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_tabName.nextNode(), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end destination

    public static class limitClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start limitClause
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1030:1: limitClause : KW_LIMIT num= Number -> ^( TOK_LIMIT $num) ;
    public final limitClause_return limitClause() throws RecognitionException {
        limitClause_return retval = new limitClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token num=null;
        Token KW_LIMIT436=null;

        CommonTree num_tree=null;
        CommonTree KW_LIMIT436_tree=null;
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_LIMIT=new RewriteRuleTokenStream(adaptor,"token KW_LIMIT");

         msgs.push("limit clause"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1033:4: ( KW_LIMIT num= Number -> ^( TOK_LIMIT $num) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1034:4: KW_LIMIT num= Number
            {
            KW_LIMIT436=(Token)input.LT(1);
            match(input,KW_LIMIT,FOLLOW_KW_LIMIT_in_limitClause7293); 
            stream_KW_LIMIT.add(KW_LIMIT436);

            num=(Token)input.LT(1);
            match(input,Number,FOLLOW_Number_in_limitClause7297); 
            stream_Number.add(num);


            // AST REWRITE
            // elements: num
            // token labels: num
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1034:24: -> ^( TOK_LIMIT $num)
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1034:27: ^( TOK_LIMIT $num)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LIMIT, "TOK_LIMIT"), root_1);

                adaptor.addChild(root_1, stream_num.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end limitClause

    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectClause
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1039:1: selectClause : ( KW_SELECT ( hintClause )? ( ( ( KW_ALL | dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) ) -> {$transform == null && $dist == null}? ^( TOK_SELECT ( hintClause )? selectList ) -> {$transform == null && $dist != null}? ^( TOK_SELECTDI ( hintClause )? selectList ) -> ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) ) | trfmClause -> ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) ) );
    public final selectClause_return selectClause() throws RecognitionException {
        selectClause_return retval = new selectClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token dist=null;
        Token transform=null;
        Token KW_SELECT437=null;
        Token KW_ALL439=null;
        hintClause_return hintClause438 = null;

        selectList_return selectList440 = null;

        selectTrfmClause_return selectTrfmClause441 = null;

        trfmClause_return trfmClause442 = null;


        CommonTree dist_tree=null;
        CommonTree transform_tree=null;
        CommonTree KW_SELECT437_tree=null;
        CommonTree KW_ALL439_tree=null;
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
        RewriteRuleTokenStream stream_KW_SELECT=new RewriteRuleTokenStream(adaptor,"token KW_SELECT");
        RewriteRuleTokenStream stream_KW_TRANSFORM=new RewriteRuleTokenStream(adaptor,"token KW_TRANSFORM");
        RewriteRuleTokenStream stream_KW_DISTINCT=new RewriteRuleTokenStream(adaptor,"token KW_DISTINCT");
        RewriteRuleSubtreeStream stream_selectList=new RewriteRuleSubtreeStream(adaptor,"rule selectList");
        RewriteRuleSubtreeStream stream_hintClause=new RewriteRuleSubtreeStream(adaptor,"rule hintClause");
        RewriteRuleSubtreeStream stream_trfmClause=new RewriteRuleSubtreeStream(adaptor,"rule trfmClause");
        RewriteRuleSubtreeStream stream_selectTrfmClause=new RewriteRuleSubtreeStream(adaptor,"rule selectTrfmClause");
         msgs.push("select clause"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1042:5: ( KW_SELECT ( hintClause )? ( ( ( KW_ALL | dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) ) -> {$transform == null && $dist == null}? ^( TOK_SELECT ( hintClause )? selectList ) -> {$transform == null && $dist != null}? ^( TOK_SELECTDI ( hintClause )? selectList ) -> ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) ) | trfmClause -> ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) ) )
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==KW_SELECT) ) {
                alt141=1;
            }
            else if ( (LA141_0==KW_MAP||LA141_0==KW_REDUCE) ) {
                alt141=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1039:1: selectClause : ( KW_SELECT ( hintClause )? ( ( ( KW_ALL | dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) ) -> {$transform == null && $dist == null}? ^( TOK_SELECT ( hintClause )? selectList ) -> {$transform == null && $dist != null}? ^( TOK_SELECTDI ( hintClause )? selectList ) -> ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) ) | trfmClause -> ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) ) );", 141, 0, input);

                throw nvae;
            }
            switch (alt141) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1043:5: KW_SELECT ( hintClause )? ( ( ( KW_ALL | dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) )
                    {
                    KW_SELECT437=(Token)input.LT(1);
                    match(input,KW_SELECT,FOLLOW_KW_SELECT_in_selectClause7338); 
                    stream_KW_SELECT.add(KW_SELECT437);

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1043:15: ( hintClause )?
                    int alt138=2;
                    int LA138_0 = input.LA(1);

                    if ( (LA138_0==DIVIDE) ) {
                        alt138=1;
                    }
                    switch (alt138) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1043:15: hintClause
                            {
                            pushFollow(FOLLOW_hintClause_in_selectClause7340);
                            hintClause438=hintClause();
                            _fsp--;

                            stream_hintClause.add(hintClause438.getTree());

                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1043:27: ( ( ( KW_ALL | dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) )
                    int alt140=2;
                    int LA140_0 = input.LA(1);

                    if ( (LA140_0==StringLiteral||LA140_0==KW_IF||LA140_0==KW_NOT||LA140_0==Identifier||LA140_0==LPAREN||LA140_0==Number||LA140_0==KW_MAP||LA140_0==KW_ARRAY||(LA140_0>=KW_STRUCT && LA140_0<=KW_UNIONTYPE)||LA140_0==KW_ALL||LA140_0==KW_DISTINCT||(LA140_0>=STAR && LA140_0<=PLUS)||(LA140_0>=KW_CAST && LA140_0<=KW_CASE)||LA140_0==CharSetName||LA140_0==KW_NULL||(LA140_0>=MINUS && LA140_0<=TILDE)||(LA140_0>=KW_TRUE && LA140_0<=KW_FALSE)) ) {
                        alt140=1;
                    }
                    else if ( (LA140_0==KW_TRANSFORM) ) {
                        alt140=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1043:27: ( ( ( KW_ALL | dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) )", 140, 0, input);

                        throw nvae;
                    }
                    switch (alt140) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1043:28: ( ( KW_ALL | dist= KW_DISTINCT )? selectList )
                            {
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1043:28: ( ( KW_ALL | dist= KW_DISTINCT )? selectList )
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1043:29: ( KW_ALL | dist= KW_DISTINCT )? selectList
                            {
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1043:29: ( KW_ALL | dist= KW_DISTINCT )?
                            int alt139=3;
                            int LA139_0 = input.LA(1);

                            if ( (LA139_0==KW_ALL) ) {
                                alt139=1;
                            }
                            else if ( (LA139_0==KW_DISTINCT) ) {
                                alt139=2;
                            }
                            switch (alt139) {
                                case 1 :
                                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1043:30: KW_ALL
                                    {
                                    KW_ALL439=(Token)input.LT(1);
                                    match(input,KW_ALL,FOLLOW_KW_ALL_in_selectClause7346); 
                                    stream_KW_ALL.add(KW_ALL439);


                                    }
                                    break;
                                case 2 :
                                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1043:39: dist= KW_DISTINCT
                                    {
                                    dist=(Token)input.LT(1);
                                    match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_selectClause7352); 
                                    stream_KW_DISTINCT.add(dist);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_selectList_in_selectClause7356);
                            selectList440=selectList();
                            _fsp--;

                            stream_selectList.add(selectList440.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1044:29: (transform= KW_TRANSFORM selectTrfmClause )
                            {
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1044:29: (transform= KW_TRANSFORM selectTrfmClause )
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1044:30: transform= KW_TRANSFORM selectTrfmClause
                            {
                            transform=(Token)input.LT(1);
                            match(input,KW_TRANSFORM,FOLLOW_KW_TRANSFORM_in_selectClause7391); 
                            stream_KW_TRANSFORM.add(transform);

                            pushFollow(FOLLOW_selectTrfmClause_in_selectClause7393);
                            selectTrfmClause441=selectTrfmClause();
                            _fsp--;

                            stream_selectTrfmClause.add(selectTrfmClause441.getTree());

                            }


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: selectTrfmClause, selectList, hintClause, hintClause, hintClause, selectList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1045:6: -> {$transform == null && $dist == null}? ^( TOK_SELECT ( hintClause )? selectList )
                    if (transform == null && dist == null) {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1045:48: ^( TOK_SELECT ( hintClause )? selectList )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELECT, "TOK_SELECT"), root_1);

                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1045:61: ( hintClause )?
                        if ( stream_hintClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_hintClause.next());

                        }
                        stream_hintClause.reset();
                        adaptor.addChild(root_1, stream_selectList.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1046:6: -> {$transform == null && $dist != null}? ^( TOK_SELECTDI ( hintClause )? selectList )
                    if (transform == null && dist != null) {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1046:48: ^( TOK_SELECTDI ( hintClause )? selectList )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELECTDI, "TOK_SELECTDI"), root_1);

                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1046:63: ( hintClause )?
                        if ( stream_hintClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_hintClause.next());

                        }
                        stream_hintClause.reset();
                        adaptor.addChild(root_1, stream_selectList.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1047:6: -> ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1047:9: ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELECT, "TOK_SELECT"), root_1);

                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1047:22: ( hintClause )?
                        if ( stream_hintClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_hintClause.next());

                        }
                        stream_hintClause.reset();
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1047:34: ^( TOK_SELEXPR selectTrfmClause )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_2);

                        adaptor.addChild(root_2, stream_selectTrfmClause.next());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1049:5: trfmClause
                    {
                    pushFollow(FOLLOW_trfmClause_in_selectClause7464);
                    trfmClause442=trfmClause();
                    _fsp--;

                    stream_trfmClause.add(trfmClause442.getTree());

                    // AST REWRITE
                    // elements: trfmClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1049:17: -> ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1049:19: ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELECT, "TOK_SELECT"), root_1);

                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1049:32: ^( TOK_SELEXPR trfmClause )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_2);

                        adaptor.addChild(root_2, stream_trfmClause.next());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectClause

    public static class selectList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectList
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1052:1: selectList : selectItem ( COMMA selectItem )* -> ( selectItem )+ ;
    public final selectList_return selectList() throws RecognitionException {
        selectList_return retval = new selectList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA444=null;
        selectItem_return selectItem443 = null;

        selectItem_return selectItem445 = null;


        CommonTree COMMA444_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_selectItem=new RewriteRuleSubtreeStream(adaptor,"rule selectItem");
         msgs.push("select list"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1055:5: ( selectItem ( COMMA selectItem )* -> ( selectItem )+ )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1056:5: selectItem ( COMMA selectItem )*
            {
            pushFollow(FOLLOW_selectItem_in_selectList7507);
            selectItem443=selectItem();
            _fsp--;

            stream_selectItem.add(selectItem443.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1056:16: ( COMMA selectItem )*
            loop142:
            do {
                int alt142=2;
                int LA142_0 = input.LA(1);

                if ( (LA142_0==COMMA) ) {
                    alt142=1;
                }


                switch (alt142) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1056:18: COMMA selectItem
            	    {
            	    COMMA444=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_selectList7511); 
            	    stream_COMMA.add(COMMA444);

            	    pushFollow(FOLLOW_selectItem_in_selectList7514);
            	    selectItem445=selectItem();
            	    _fsp--;

            	    stream_selectItem.add(selectItem445.getTree());

            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);


            // AST REWRITE
            // elements: selectItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1056:39: -> ( selectItem )+
            {
                if ( !(stream_selectItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_selectItem.hasNext() ) {
                    adaptor.addChild(root_0, stream_selectItem.next());

                }
                stream_selectItem.reset();

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectList

    public static class selectTrfmClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectTrfmClause
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1059:1: selectTrfmClause : LPAREN selectExpressionList RPAREN inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) ;
    public final selectTrfmClause_return selectTrfmClause() throws RecognitionException {
        selectTrfmClause_return retval = new selectTrfmClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN446=null;
        Token RPAREN448=null;
        Token KW_USING449=null;
        Token StringLiteral450=null;
        Token KW_AS451=null;
        Token LPAREN452=null;
        Token RPAREN455=null;
        rowFormat_return inSerde = null;

        recordWriter_return inRec = null;

        rowFormat_return outSerde = null;

        recordReader_return outRec = null;

        selectExpressionList_return selectExpressionList447 = null;

        aliasList_return aliasList453 = null;

        columnNameTypeList_return columnNameTypeList454 = null;

        aliasList_return aliasList456 = null;

        columnNameTypeList_return columnNameTypeList457 = null;


        CommonTree LPAREN446_tree=null;
        CommonTree RPAREN448_tree=null;
        CommonTree KW_USING449_tree=null;
        CommonTree StringLiteral450_tree=null;
        CommonTree KW_AS451_tree=null;
        CommonTree LPAREN452_tree=null;
        CommonTree RPAREN455_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_rowFormat=new RewriteRuleSubtreeStream(adaptor,"rule rowFormat");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
        RewriteRuleSubtreeStream stream_recordReader=new RewriteRuleSubtreeStream(adaptor,"rule recordReader");
        RewriteRuleSubtreeStream stream_aliasList=new RewriteRuleSubtreeStream(adaptor,"rule aliasList");
        RewriteRuleSubtreeStream stream_selectExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule selectExpressionList");
        RewriteRuleSubtreeStream stream_recordWriter=new RewriteRuleSubtreeStream(adaptor,"rule recordWriter");
         msgs.push("transform clause"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1062:5: ( LPAREN selectExpressionList RPAREN inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1063:5: LPAREN selectExpressionList RPAREN inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader
            {
            LPAREN446=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_selectTrfmClause7557); 
            stream_LPAREN.add(LPAREN446);

            pushFollow(FOLLOW_selectExpressionList_in_selectTrfmClause7559);
            selectExpressionList447=selectExpressionList();
            _fsp--;

            stream_selectExpressionList.add(selectExpressionList447.getTree());
            RPAREN448=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_selectTrfmClause7561); 
            stream_RPAREN.add(RPAREN448);

            pushFollow(FOLLOW_rowFormat_in_selectTrfmClause7569);
            inSerde=rowFormat();
            _fsp--;

            stream_rowFormat.add(inSerde.getTree());
            pushFollow(FOLLOW_recordWriter_in_selectTrfmClause7573);
            inRec=recordWriter();
            _fsp--;

            stream_recordWriter.add(inRec.getTree());
            KW_USING449=(Token)input.LT(1);
            match(input,KW_USING,FOLLOW_KW_USING_in_selectTrfmClause7579); 
            stream_KW_USING.add(KW_USING449);

            StringLiteral450=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_selectTrfmClause7581); 
            stream_StringLiteral.add(StringLiteral450);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1066:5: ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==KW_AS) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1066:7: KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
                    {
                    KW_AS451=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_selectTrfmClause7589); 
                    stream_KW_AS.add(KW_AS451);

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1066:13: ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
                    int alt145=2;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==LPAREN) ) {
                        alt145=1;
                    }
                    else if ( (LA145_0==Identifier) ) {
                        alt145=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1066:13: ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )", 145, 0, input);

                        throw nvae;
                    }
                    switch (alt145) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1066:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
                            {
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1066:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1066:15: LPAREN ( aliasList | columnNameTypeList ) RPAREN
                            {
                            LPAREN452=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_selectTrfmClause7593); 
                            stream_LPAREN.add(LPAREN452);

                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1066:22: ( aliasList | columnNameTypeList )
                            int alt143=2;
                            int LA143_0 = input.LA(1);

                            if ( (LA143_0==Identifier) ) {
                                int LA143_1 = input.LA(2);

                                if ( (LA143_1==RPAREN||LA143_1==COMMA) ) {
                                    alt143=1;
                                }
                                else if ( (LA143_1==KW_MAP||(LA143_1>=KW_TINYINT && LA143_1<=KW_ARRAY)||(LA143_1>=KW_STRUCT && LA143_1<=KW_UNIONTYPE)) ) {
                                    alt143=2;
                                }
                                else {
                                    NoViableAltException nvae =
                                        new NoViableAltException("1066:22: ( aliasList | columnNameTypeList )", 143, 1, input);

                                    throw nvae;
                                }
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("1066:22: ( aliasList | columnNameTypeList )", 143, 0, input);

                                throw nvae;
                            }
                            switch (alt143) {
                                case 1 :
                                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1066:23: aliasList
                                    {
                                    pushFollow(FOLLOW_aliasList_in_selectTrfmClause7596);
                                    aliasList453=aliasList();
                                    _fsp--;

                                    stream_aliasList.add(aliasList453.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1066:35: columnNameTypeList
                                    {
                                    pushFollow(FOLLOW_columnNameTypeList_in_selectTrfmClause7600);
                                    columnNameTypeList454=columnNameTypeList();
                                    _fsp--;

                                    stream_columnNameTypeList.add(columnNameTypeList454.getTree());

                                    }
                                    break;

                            }

                            RPAREN455=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_selectTrfmClause7603); 
                            stream_RPAREN.add(RPAREN455);


                            }


                            }
                            break;
                        case 2 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1066:65: ( aliasList | columnNameTypeList )
                            {
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1066:65: ( aliasList | columnNameTypeList )
                            int alt144=2;
                            int LA144_0 = input.LA(1);

                            if ( (LA144_0==Identifier) ) {
                                switch ( input.LA(2) ) {
                                case EOF:
                                case RPAREN:
                                case COMMA:
                                case KW_FROM:
                                case KW_RECORDREADER:
                                case KW_ROW:
                                case KW_UNION:
                                case KW_INSERT:
                                case KW_LIMIT:
                                case KW_SELECT:
                                case KW_REDUCE:
                                case KW_WHERE:
                                case KW_GROUP:
                                case KW_HAVING:
                                case KW_ORDER:
                                case KW_CLUSTER:
                                case KW_DISTRIBUTE:
                                case KW_SORT:
                                    {
                                    alt144=1;
                                    }
                                    break;
                                case KW_MAP:
                                    {
                                    int LA144_19 = input.LA(3);

                                    if ( (LA144_19==LESSTHAN) ) {
                                        alt144=2;
                                    }
                                    else if ( (LA144_19==StringLiteral||LA144_19==KW_IF||LA144_19==KW_NOT||LA144_19==Identifier||LA144_19==LPAREN||LA144_19==Number||LA144_19==KW_MAP||LA144_19==KW_ARRAY||(LA144_19>=KW_STRUCT && LA144_19<=KW_UNIONTYPE)||(LA144_19>=STAR && LA144_19<=PLUS)||(LA144_19>=KW_CAST && LA144_19<=KW_CASE)||LA144_19==CharSetName||LA144_19==KW_NULL||(LA144_19>=MINUS && LA144_19<=TILDE)||(LA144_19>=KW_TRUE && LA144_19<=KW_FALSE)) ) {
                                        alt144=1;
                                    }
                                    else {
                                        NoViableAltException nvae =
                                            new NoViableAltException("1066:65: ( aliasList | columnNameTypeList )", 144, 19, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case KW_TINYINT:
                                case KW_SMALLINT:
                                case KW_INT:
                                case KW_BIGINT:
                                case KW_BOOLEAN:
                                case KW_FLOAT:
                                case KW_DOUBLE:
                                case KW_DATE:
                                case KW_DATETIME:
                                case KW_TIMESTAMP:
                                case KW_STRING:
                                case KW_ARRAY:
                                case KW_STRUCT:
                                case KW_UNIONTYPE:
                                    {
                                    alt144=2;
                                    }
                                    break;
                                default:
                                    NoViableAltException nvae =
                                        new NoViableAltException("1066:65: ( aliasList | columnNameTypeList )", 144, 1, input);

                                    throw nvae;
                                }

                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("1066:65: ( aliasList | columnNameTypeList )", 144, 0, input);

                                throw nvae;
                            }
                            switch (alt144) {
                                case 1 :
                                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1066:66: aliasList
                                    {
                                    pushFollow(FOLLOW_aliasList_in_selectTrfmClause7609);
                                    aliasList456=aliasList();
                                    _fsp--;

                                    stream_aliasList.add(aliasList456.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1066:78: columnNameTypeList
                                    {
                                    pushFollow(FOLLOW_columnNameTypeList_in_selectTrfmClause7613);
                                    columnNameTypeList457=columnNameTypeList();
                                    _fsp--;

                                    stream_columnNameTypeList.add(columnNameTypeList457.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_rowFormat_in_selectTrfmClause7625);
            outSerde=rowFormat();
            _fsp--;

            stream_rowFormat.add(outSerde.getTree());
            pushFollow(FOLLOW_recordReader_in_selectTrfmClause7629);
            outRec=recordReader();
            _fsp--;

            stream_recordReader.add(outRec.getTree());

            // AST REWRITE
            // elements: columnNameTypeList, aliasList, outSerde, inSerde, outRec, inRec, StringLiteral, selectExpressionList
            // token labels: 
            // rule labels: retval, inRec, inSerde, outRec, outSerde
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_inRec=new RewriteRuleSubtreeStream(adaptor,"token inRec",inRec!=null?inRec.tree:null);
            RewriteRuleSubtreeStream stream_inSerde=new RewriteRuleSubtreeStream(adaptor,"token inSerde",inSerde!=null?inSerde.tree:null);
            RewriteRuleSubtreeStream stream_outRec=new RewriteRuleSubtreeStream(adaptor,"token outRec",outRec!=null?outRec.tree:null);
            RewriteRuleSubtreeStream stream_outSerde=new RewriteRuleSubtreeStream(adaptor,"token outSerde",outSerde!=null?outSerde.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1068:5: -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1068:8: ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TRANSFORM, "TOK_TRANSFORM"), root_1);

                adaptor.addChild(root_1, stream_selectExpressionList.next());
                adaptor.addChild(root_1, stream_inSerde.next());
                adaptor.addChild(root_1, stream_inRec.next());
                adaptor.addChild(root_1, stream_StringLiteral.next());
                adaptor.addChild(root_1, stream_outSerde.next());
                adaptor.addChild(root_1, stream_outRec.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1068:93: ( aliasList )?
                if ( stream_aliasList.hasNext() ) {
                    adaptor.addChild(root_1, stream_aliasList.next());

                }
                stream_aliasList.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1068:104: ( columnNameTypeList )?
                if ( stream_columnNameTypeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameTypeList.next());

                }
                stream_columnNameTypeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectTrfmClause

    public static class hintClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start hintClause
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1071:1: hintClause : DIVIDE STAR PLUS hintList STAR DIVIDE -> ^( TOK_HINTLIST hintList ) ;
    public final hintClause_return hintClause() throws RecognitionException {
        hintClause_return retval = new hintClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DIVIDE458=null;
        Token STAR459=null;
        Token PLUS460=null;
        Token STAR462=null;
        Token DIVIDE463=null;
        hintList_return hintList461 = null;


        CommonTree DIVIDE458_tree=null;
        CommonTree STAR459_tree=null;
        CommonTree PLUS460_tree=null;
        CommonTree STAR462_tree=null;
        CommonTree DIVIDE463_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIVIDE=new RewriteRuleTokenStream(adaptor,"token DIVIDE");
        RewriteRuleSubtreeStream stream_hintList=new RewriteRuleSubtreeStream(adaptor,"rule hintList");
         msgs.push("hint clause"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1074:5: ( DIVIDE STAR PLUS hintList STAR DIVIDE -> ^( TOK_HINTLIST hintList ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1075:5: DIVIDE STAR PLUS hintList STAR DIVIDE
            {
            DIVIDE458=(Token)input.LT(1);
            match(input,DIVIDE,FOLLOW_DIVIDE_in_hintClause7692); 
            stream_DIVIDE.add(DIVIDE458);

            STAR459=(Token)input.LT(1);
            match(input,STAR,FOLLOW_STAR_in_hintClause7694); 
            stream_STAR.add(STAR459);

            PLUS460=(Token)input.LT(1);
            match(input,PLUS,FOLLOW_PLUS_in_hintClause7696); 
            stream_PLUS.add(PLUS460);

            pushFollow(FOLLOW_hintList_in_hintClause7698);
            hintList461=hintList();
            _fsp--;

            stream_hintList.add(hintList461.getTree());
            STAR462=(Token)input.LT(1);
            match(input,STAR,FOLLOW_STAR_in_hintClause7700); 
            stream_STAR.add(STAR462);

            DIVIDE463=(Token)input.LT(1);
            match(input,DIVIDE,FOLLOW_DIVIDE_in_hintClause7702); 
            stream_DIVIDE.add(DIVIDE463);


            // AST REWRITE
            // elements: hintList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1075:43: -> ^( TOK_HINTLIST hintList )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1075:46: ^( TOK_HINTLIST hintList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_HINTLIST, "TOK_HINTLIST"), root_1);

                adaptor.addChild(root_1, stream_hintList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end hintClause

    public static class hintList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start hintList
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1078:1: hintList : hintItem ( COMMA hintItem )* -> ( hintItem )+ ;
    public final hintList_return hintList() throws RecognitionException {
        hintList_return retval = new hintList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA465=null;
        hintItem_return hintItem464 = null;

        hintItem_return hintItem466 = null;


        CommonTree COMMA465_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_hintItem=new RewriteRuleSubtreeStream(adaptor,"rule hintItem");
         msgs.push("hint list"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1081:5: ( hintItem ( COMMA hintItem )* -> ( hintItem )+ )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1082:5: hintItem ( COMMA hintItem )*
            {
            pushFollow(FOLLOW_hintItem_in_hintList7741);
            hintItem464=hintItem();
            _fsp--;

            stream_hintItem.add(hintItem464.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1082:14: ( COMMA hintItem )*
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==COMMA) ) {
                    alt147=1;
                }


                switch (alt147) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1082:15: COMMA hintItem
            	    {
            	    COMMA465=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_hintList7744); 
            	    stream_COMMA.add(COMMA465);

            	    pushFollow(FOLLOW_hintItem_in_hintList7746);
            	    hintItem466=hintItem();
            	    _fsp--;

            	    stream_hintItem.add(hintItem466.getTree());

            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);


            // AST REWRITE
            // elements: hintItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1082:32: -> ( hintItem )+
            {
                if ( !(stream_hintItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_hintItem.hasNext() ) {
                    adaptor.addChild(root_0, stream_hintItem.next());

                }
                stream_hintItem.reset();

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end hintList

    public static class hintItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start hintItem
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1085:1: hintItem : hintName ( LPAREN hintArgs RPAREN )? -> ^( TOK_HINT hintName hintArgs ) ;
    public final hintItem_return hintItem() throws RecognitionException {
        hintItem_return retval = new hintItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN468=null;
        Token RPAREN470=null;
        hintName_return hintName467 = null;

        hintArgs_return hintArgs469 = null;


        CommonTree LPAREN468_tree=null;
        CommonTree RPAREN470_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_hintName=new RewriteRuleSubtreeStream(adaptor,"rule hintName");
        RewriteRuleSubtreeStream stream_hintArgs=new RewriteRuleSubtreeStream(adaptor,"rule hintArgs");
         msgs.push("hint item"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1088:5: ( hintName ( LPAREN hintArgs RPAREN )? -> ^( TOK_HINT hintName hintArgs ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1089:5: hintName ( LPAREN hintArgs RPAREN )?
            {
            pushFollow(FOLLOW_hintName_in_hintItem7784);
            hintName467=hintName();
            _fsp--;

            stream_hintName.add(hintName467.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1089:14: ( LPAREN hintArgs RPAREN )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==LPAREN) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1089:15: LPAREN hintArgs RPAREN
                    {
                    LPAREN468=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_hintItem7787); 
                    stream_LPAREN.add(LPAREN468);

                    pushFollow(FOLLOW_hintArgs_in_hintItem7789);
                    hintArgs469=hintArgs();
                    _fsp--;

                    stream_hintArgs.add(hintArgs469.getTree());
                    RPAREN470=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_hintItem7791); 
                    stream_RPAREN.add(RPAREN470);


                    }
                    break;

            }


            // AST REWRITE
            // elements: hintArgs, hintName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1089:40: -> ^( TOK_HINT hintName hintArgs )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1089:43: ^( TOK_HINT hintName hintArgs )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_HINT, "TOK_HINT"), root_1);

                adaptor.addChild(root_1, stream_hintName.next());
                adaptor.addChild(root_1, stream_hintArgs.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end hintItem

    public static class hintName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start hintName
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1092:1: hintName : ( KW_MAPJOIN -> TOK_MAPJOIN | KW_STREAMTABLE -> TOK_STREAMTABLE );
    public final hintName_return hintName() throws RecognitionException {
        hintName_return retval = new hintName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_MAPJOIN471=null;
        Token KW_STREAMTABLE472=null;

        CommonTree KW_MAPJOIN471_tree=null;
        CommonTree KW_STREAMTABLE472_tree=null;
        RewriteRuleTokenStream stream_KW_MAPJOIN=new RewriteRuleTokenStream(adaptor,"token KW_MAPJOIN");
        RewriteRuleTokenStream stream_KW_STREAMTABLE=new RewriteRuleTokenStream(adaptor,"token KW_STREAMTABLE");

         msgs.push("hint name"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1095:5: ( KW_MAPJOIN -> TOK_MAPJOIN | KW_STREAMTABLE -> TOK_STREAMTABLE )
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==KW_MAPJOIN) ) {
                alt149=1;
            }
            else if ( (LA149_0==KW_STREAMTABLE) ) {
                alt149=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1092:1: hintName : ( KW_MAPJOIN -> TOK_MAPJOIN | KW_STREAMTABLE -> TOK_STREAMTABLE );", 149, 0, input);

                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1096:5: KW_MAPJOIN
                    {
                    KW_MAPJOIN471=(Token)input.LT(1);
                    match(input,KW_MAPJOIN,FOLLOW_KW_MAPJOIN_in_hintName7834); 
                    stream_KW_MAPJOIN.add(KW_MAPJOIN471);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1096:16: -> TOK_MAPJOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_MAPJOIN, "TOK_MAPJOIN"));

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1097:7: KW_STREAMTABLE
                    {
                    KW_STREAMTABLE472=(Token)input.LT(1);
                    match(input,KW_STREAMTABLE,FOLLOW_KW_STREAMTABLE_in_hintName7846); 
                    stream_KW_STREAMTABLE.add(KW_STREAMTABLE472);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1097:22: -> TOK_STREAMTABLE
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_STREAMTABLE, "TOK_STREAMTABLE"));

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end hintName

    public static class hintArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start hintArgs
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1100:1: hintArgs : hintArgName ( COMMA hintArgName )* -> ^( TOK_HINTARGLIST ( hintArgName )+ ) ;
    public final hintArgs_return hintArgs() throws RecognitionException {
        hintArgs_return retval = new hintArgs_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA474=null;
        hintArgName_return hintArgName473 = null;

        hintArgName_return hintArgName475 = null;


        CommonTree COMMA474_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_hintArgName=new RewriteRuleSubtreeStream(adaptor,"rule hintArgName");
         msgs.push("hint arguments"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1103:5: ( hintArgName ( COMMA hintArgName )* -> ^( TOK_HINTARGLIST ( hintArgName )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1104:5: hintArgName ( COMMA hintArgName )*
            {
            pushFollow(FOLLOW_hintArgName_in_hintArgs7881);
            hintArgName473=hintArgName();
            _fsp--;

            stream_hintArgName.add(hintArgName473.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1104:17: ( COMMA hintArgName )*
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==COMMA) ) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1104:18: COMMA hintArgName
            	    {
            	    COMMA474=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_hintArgs7884); 
            	    stream_COMMA.add(COMMA474);

            	    pushFollow(FOLLOW_hintArgName_in_hintArgs7886);
            	    hintArgName475=hintArgName();
            	    _fsp--;

            	    stream_hintArgName.add(hintArgName475.getTree());

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);


            // AST REWRITE
            // elements: hintArgName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1104:38: -> ^( TOK_HINTARGLIST ( hintArgName )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1104:41: ^( TOK_HINTARGLIST ( hintArgName )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_HINTARGLIST, "TOK_HINTARGLIST"), root_1);

                if ( !(stream_hintArgName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_hintArgName.hasNext() ) {
                    adaptor.addChild(root_1, stream_hintArgName.next());

                }
                stream_hintArgName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end hintArgs

    public static class hintArgName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start hintArgName
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1107:1: hintArgName : Identifier ;
    public final hintArgName_return hintArgName() throws RecognitionException {
        hintArgName_return retval = new hintArgName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier476=null;

        CommonTree Identifier476_tree=null;

         msgs.push("hint argument name"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1110:5: ( Identifier )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1111:5: Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            Identifier476=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_hintArgName7928); 
            Identifier476_tree = (CommonTree)adaptor.create(Identifier476);
            adaptor.addChild(root_0, Identifier476_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end hintArgName

    public static class selectItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectItem
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1114:1: selectItem : ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? ) -> ^( TOK_SELEXPR selectExpression ( Identifier )* ) ;
    public final selectItem_return selectItem() throws RecognitionException {
        selectItem_return retval = new selectItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_AS478=null;
        Token Identifier479=null;
        Token KW_AS480=null;
        Token LPAREN481=null;
        Token Identifier482=null;
        Token COMMA483=null;
        Token Identifier484=null;
        Token RPAREN485=null;
        selectExpression_return selectExpression477 = null;


        CommonTree KW_AS478_tree=null;
        CommonTree Identifier479_tree=null;
        CommonTree KW_AS480_tree=null;
        CommonTree LPAREN481_tree=null;
        CommonTree Identifier482_tree=null;
        CommonTree COMMA483_tree=null;
        CommonTree Identifier484_tree=null;
        CommonTree RPAREN485_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_selectExpression=new RewriteRuleSubtreeStream(adaptor,"rule selectExpression");
         msgs.push("selection target"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1117:5: ( ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? ) -> ^( TOK_SELEXPR selectExpression ( Identifier )* ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:5: ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? )
            {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:5: ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:7: selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )?
            {
            pushFollow(FOLLOW_selectExpression_in_selectItem7961);
            selectExpression477=selectExpression();
            _fsp--;

            stream_selectExpression.add(selectExpression477.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:25: ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )?
            int alt153=3;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==KW_AS) ) {
                int LA153_1 = input.LA(2);

                if ( (LA153_1==LPAREN) ) {
                    alt153=2;
                }
                else if ( (LA153_1==Identifier) ) {
                    alt153=1;
                }
            }
            else if ( (LA153_0==Identifier) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:26: ( ( KW_AS )? Identifier )
                    {
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:26: ( ( KW_AS )? Identifier )
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:27: ( KW_AS )? Identifier
                    {
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:27: ( KW_AS )?
                    int alt151=2;
                    int LA151_0 = input.LA(1);

                    if ( (LA151_0==KW_AS) ) {
                        alt151=1;
                    }
                    switch (alt151) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:27: KW_AS
                            {
                            KW_AS478=(Token)input.LT(1);
                            match(input,KW_AS,FOLLOW_KW_AS_in_selectItem7966); 
                            stream_KW_AS.add(KW_AS478);


                            }
                            break;

                    }

                    Identifier479=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_selectItem7969); 
                    stream_Identifier.add(Identifier479);


                    }


                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:48: ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN )
                    {
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:48: ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN )
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:49: KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN
                    {
                    KW_AS480=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_selectItem7975); 
                    stream_KW_AS.add(KW_AS480);

                    LPAREN481=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_selectItem7977); 
                    stream_LPAREN.add(LPAREN481);

                    Identifier482=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_selectItem7979); 
                    stream_Identifier.add(Identifier482);

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:73: ( COMMA Identifier )*
                    loop152:
                    do {
                        int alt152=2;
                        int LA152_0 = input.LA(1);

                        if ( (LA152_0==COMMA) ) {
                            alt152=1;
                        }


                        switch (alt152) {
                    	case 1 :
                    	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:74: COMMA Identifier
                    	    {
                    	    COMMA483=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_selectItem7982); 
                    	    stream_COMMA.add(COMMA483);

                    	    Identifier484=(Token)input.LT(1);
                    	    match(input,Identifier,FOLLOW_Identifier_in_selectItem7984); 
                    	    stream_Identifier.add(Identifier484);


                    	    }
                    	    break;

                    	default :
                    	    break loop152;
                        }
                    } while (true);

                    RPAREN485=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_selectItem7988); 
                    stream_RPAREN.add(RPAREN485);


                    }


                    }
                    break;

            }


            }


            // AST REWRITE
            // elements: selectExpression, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1118:104: -> ^( TOK_SELEXPR selectExpression ( Identifier )* )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:107: ^( TOK_SELEXPR selectExpression ( Identifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_1);

                adaptor.addChild(root_1, stream_selectExpression.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:138: ( Identifier )*
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_Identifier.next());

                }
                stream_Identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectItem

    public static class trfmClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start trfmClause
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1121:1: trfmClause : ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList ) inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) ;
    public final trfmClause_return trfmClause() throws RecognitionException {
        trfmClause_return retval = new trfmClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_MAP486=null;
        Token KW_REDUCE488=null;
        Token KW_USING490=null;
        Token StringLiteral491=null;
        Token KW_AS492=null;
        Token LPAREN493=null;
        Token RPAREN496=null;
        rowFormat_return inSerde = null;

        recordWriter_return inRec = null;

        rowFormat_return outSerde = null;

        recordReader_return outRec = null;

        selectExpressionList_return selectExpressionList487 = null;

        selectExpressionList_return selectExpressionList489 = null;

        aliasList_return aliasList494 = null;

        columnNameTypeList_return columnNameTypeList495 = null;

        aliasList_return aliasList497 = null;

        columnNameTypeList_return columnNameTypeList498 = null;


        CommonTree KW_MAP486_tree=null;
        CommonTree KW_REDUCE488_tree=null;
        CommonTree KW_USING490_tree=null;
        CommonTree StringLiteral491_tree=null;
        CommonTree KW_AS492_tree=null;
        CommonTree LPAREN493_tree=null;
        CommonTree RPAREN496_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_REDUCE=new RewriteRuleTokenStream(adaptor,"token KW_REDUCE");
        RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
        RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_rowFormat=new RewriteRuleSubtreeStream(adaptor,"rule rowFormat");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
        RewriteRuleSubtreeStream stream_recordReader=new RewriteRuleSubtreeStream(adaptor,"rule recordReader");
        RewriteRuleSubtreeStream stream_aliasList=new RewriteRuleSubtreeStream(adaptor,"rule aliasList");
        RewriteRuleSubtreeStream stream_selectExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule selectExpressionList");
        RewriteRuleSubtreeStream stream_recordWriter=new RewriteRuleSubtreeStream(adaptor,"rule recordWriter");
         msgs.push("transform clause"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1124:5: ( ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList ) inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1125:5: ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList ) inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader
            {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1125:5: ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList )
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==KW_MAP) ) {
                alt154=1;
            }
            else if ( (LA154_0==KW_REDUCE) ) {
                alt154=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1125:5: ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList )", 154, 0, input);

                throw nvae;
            }
            switch (alt154) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1125:9: KW_MAP selectExpressionList
                    {
                    KW_MAP486=(Token)input.LT(1);
                    match(input,KW_MAP,FOLLOW_KW_MAP_in_trfmClause8038); 
                    stream_KW_MAP.add(KW_MAP486);

                    pushFollow(FOLLOW_selectExpressionList_in_trfmClause8043);
                    selectExpressionList487=selectExpressionList();
                    _fsp--;

                    stream_selectExpressionList.add(selectExpressionList487.getTree());

                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1126:9: KW_REDUCE selectExpressionList
                    {
                    KW_REDUCE488=(Token)input.LT(1);
                    match(input,KW_REDUCE,FOLLOW_KW_REDUCE_in_trfmClause8053); 
                    stream_KW_REDUCE.add(KW_REDUCE488);

                    pushFollow(FOLLOW_selectExpressionList_in_trfmClause8055);
                    selectExpressionList489=selectExpressionList();
                    _fsp--;

                    stream_selectExpressionList.add(selectExpressionList489.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rowFormat_in_trfmClause8065);
            inSerde=rowFormat();
            _fsp--;

            stream_rowFormat.add(inSerde.getTree());
            pushFollow(FOLLOW_recordWriter_in_trfmClause8069);
            inRec=recordWriter();
            _fsp--;

            stream_recordWriter.add(inRec.getTree());
            KW_USING490=(Token)input.LT(1);
            match(input,KW_USING,FOLLOW_KW_USING_in_trfmClause8075); 
            stream_KW_USING.add(KW_USING490);

            StringLiteral491=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_trfmClause8077); 
            stream_StringLiteral.add(StringLiteral491);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1129:5: ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==KW_AS) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1129:7: KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
                    {
                    KW_AS492=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_trfmClause8085); 
                    stream_KW_AS.add(KW_AS492);

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1129:13: ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
                    int alt157=2;
                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==LPAREN) ) {
                        alt157=1;
                    }
                    else if ( (LA157_0==Identifier) ) {
                        alt157=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1129:13: ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )", 157, 0, input);

                        throw nvae;
                    }
                    switch (alt157) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1129:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
                            {
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1129:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1129:15: LPAREN ( aliasList | columnNameTypeList ) RPAREN
                            {
                            LPAREN493=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_trfmClause8089); 
                            stream_LPAREN.add(LPAREN493);

                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1129:22: ( aliasList | columnNameTypeList )
                            int alt155=2;
                            int LA155_0 = input.LA(1);

                            if ( (LA155_0==Identifier) ) {
                                int LA155_1 = input.LA(2);

                                if ( (LA155_1==RPAREN||LA155_1==COMMA) ) {
                                    alt155=1;
                                }
                                else if ( (LA155_1==KW_MAP||(LA155_1>=KW_TINYINT && LA155_1<=KW_ARRAY)||(LA155_1>=KW_STRUCT && LA155_1<=KW_UNIONTYPE)) ) {
                                    alt155=2;
                                }
                                else {
                                    NoViableAltException nvae =
                                        new NoViableAltException("1129:22: ( aliasList | columnNameTypeList )", 155, 1, input);

                                    throw nvae;
                                }
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("1129:22: ( aliasList | columnNameTypeList )", 155, 0, input);

                                throw nvae;
                            }
                            switch (alt155) {
                                case 1 :
                                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1129:23: aliasList
                                    {
                                    pushFollow(FOLLOW_aliasList_in_trfmClause8092);
                                    aliasList494=aliasList();
                                    _fsp--;

                                    stream_aliasList.add(aliasList494.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1129:35: columnNameTypeList
                                    {
                                    pushFollow(FOLLOW_columnNameTypeList_in_trfmClause8096);
                                    columnNameTypeList495=columnNameTypeList();
                                    _fsp--;

                                    stream_columnNameTypeList.add(columnNameTypeList495.getTree());

                                    }
                                    break;

                            }

                            RPAREN496=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_trfmClause8099); 
                            stream_RPAREN.add(RPAREN496);


                            }


                            }
                            break;
                        case 2 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1129:65: ( aliasList | columnNameTypeList )
                            {
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1129:65: ( aliasList | columnNameTypeList )
                            int alt156=2;
                            int LA156_0 = input.LA(1);

                            if ( (LA156_0==Identifier) ) {
                                switch ( input.LA(2) ) {
                                case KW_TINYINT:
                                case KW_SMALLINT:
                                case KW_INT:
                                case KW_BIGINT:
                                case KW_BOOLEAN:
                                case KW_FLOAT:
                                case KW_DOUBLE:
                                case KW_DATE:
                                case KW_DATETIME:
                                case KW_TIMESTAMP:
                                case KW_STRING:
                                case KW_ARRAY:
                                case KW_STRUCT:
                                case KW_UNIONTYPE:
                                    {
                                    alt156=2;
                                    }
                                    break;
                                case KW_MAP:
                                    {
                                    int LA156_15 = input.LA(3);

                                    if ( (LA156_15==LESSTHAN) ) {
                                        alt156=2;
                                    }
                                    else if ( (LA156_15==StringLiteral||LA156_15==KW_IF||LA156_15==KW_NOT||LA156_15==Identifier||LA156_15==LPAREN||LA156_15==Number||LA156_15==KW_MAP||LA156_15==KW_ARRAY||(LA156_15>=KW_STRUCT && LA156_15<=KW_UNIONTYPE)||(LA156_15>=STAR && LA156_15<=PLUS)||(LA156_15>=KW_CAST && LA156_15<=KW_CASE)||LA156_15==CharSetName||LA156_15==KW_NULL||(LA156_15>=MINUS && LA156_15<=TILDE)||(LA156_15>=KW_TRUE && LA156_15<=KW_FALSE)) ) {
                                        alt156=1;
                                    }
                                    else {
                                        NoViableAltException nvae =
                                            new NoViableAltException("1129:65: ( aliasList | columnNameTypeList )", 156, 15, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case EOF:
                                case RPAREN:
                                case COMMA:
                                case KW_FROM:
                                case KW_RECORDREADER:
                                case KW_ROW:
                                case KW_UNION:
                                case KW_INSERT:
                                case KW_LIMIT:
                                case KW_SELECT:
                                case KW_REDUCE:
                                case KW_WHERE:
                                case KW_GROUP:
                                case KW_HAVING:
                                case KW_ORDER:
                                case KW_CLUSTER:
                                case KW_DISTRIBUTE:
                                case KW_SORT:
                                    {
                                    alt156=1;
                                    }
                                    break;
                                default:
                                    NoViableAltException nvae =
                                        new NoViableAltException("1129:65: ( aliasList | columnNameTypeList )", 156, 1, input);

                                    throw nvae;
                                }

                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("1129:65: ( aliasList | columnNameTypeList )", 156, 0, input);

                                throw nvae;
                            }
                            switch (alt156) {
                                case 1 :
                                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1129:66: aliasList
                                    {
                                    pushFollow(FOLLOW_aliasList_in_trfmClause8105);
                                    aliasList497=aliasList();
                                    _fsp--;

                                    stream_aliasList.add(aliasList497.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1129:78: columnNameTypeList
                                    {
                                    pushFollow(FOLLOW_columnNameTypeList_in_trfmClause8109);
                                    columnNameTypeList498=columnNameTypeList();
                                    _fsp--;

                                    stream_columnNameTypeList.add(columnNameTypeList498.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_rowFormat_in_trfmClause8121);
            outSerde=rowFormat();
            _fsp--;

            stream_rowFormat.add(outSerde.getTree());
            pushFollow(FOLLOW_recordReader_in_trfmClause8125);
            outRec=recordReader();
            _fsp--;

            stream_recordReader.add(outRec.getTree());

            // AST REWRITE
            // elements: StringLiteral, inSerde, columnNameTypeList, aliasList, inRec, selectExpressionList, outSerde, outRec
            // token labels: 
            // rule labels: retval, inRec, inSerde, outRec, outSerde
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_inRec=new RewriteRuleSubtreeStream(adaptor,"token inRec",inRec!=null?inRec.tree:null);
            RewriteRuleSubtreeStream stream_inSerde=new RewriteRuleSubtreeStream(adaptor,"token inSerde",inSerde!=null?inSerde.tree:null);
            RewriteRuleSubtreeStream stream_outRec=new RewriteRuleSubtreeStream(adaptor,"token outRec",outRec!=null?outRec.tree:null);
            RewriteRuleSubtreeStream stream_outSerde=new RewriteRuleSubtreeStream(adaptor,"token outSerde",outSerde!=null?outSerde.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1131:5: -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1131:8: ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TRANSFORM, "TOK_TRANSFORM"), root_1);

                adaptor.addChild(root_1, stream_selectExpressionList.next());
                adaptor.addChild(root_1, stream_inSerde.next());
                adaptor.addChild(root_1, stream_inRec.next());
                adaptor.addChild(root_1, stream_StringLiteral.next());
                adaptor.addChild(root_1, stream_outSerde.next());
                adaptor.addChild(root_1, stream_outRec.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1131:93: ( aliasList )?
                if ( stream_aliasList.hasNext() ) {
                    adaptor.addChild(root_1, stream_aliasList.next());

                }
                stream_aliasList.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1131:104: ( columnNameTypeList )?
                if ( stream_columnNameTypeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameTypeList.next());

                }
                stream_columnNameTypeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end trfmClause

    public static class selectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectExpression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1134:1: selectExpression : ( expression | tableAllColumns );
    public final selectExpression_return selectExpression() throws RecognitionException {
        selectExpression_return retval = new selectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        expression_return expression499 = null;

        tableAllColumns_return tableAllColumns500 = null;



         msgs.push("select expression"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1137:5: ( expression | tableAllColumns )
            int alt159=2;
            switch ( input.LA(1) ) {
            case StringLiteral:
            case KW_IF:
            case KW_NOT:
            case LPAREN:
            case Number:
            case KW_MAP:
            case KW_ARRAY:
            case KW_STRUCT:
            case KW_UNIONTYPE:
            case PLUS:
            case KW_CAST:
            case KW_CASE:
            case CharSetName:
            case KW_NULL:
            case MINUS:
            case TILDE:
            case KW_TRUE:
            case KW_FALSE:
                {
                alt159=1;
                }
                break;
            case Identifier:
                {
                int LA159_9 = input.LA(2);

                if ( (LA159_9==DOT) ) {
                    int LA159_15 = input.LA(3);

                    if ( (LA159_15==Identifier) ) {
                        alt159=1;
                    }
                    else if ( (LA159_15==STAR) ) {
                        alt159=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1134:1: selectExpression : ( expression | tableAllColumns );", 159, 15, input);

                        throw nvae;
                    }
                }
                else if ( (LA159_9==EOF||LA159_9==Identifier||(LA159_9>=KW_LIKE && LA159_9<=KW_AS)||LA159_9==COMMA||(LA159_9>=KW_FROM && LA159_9<=KW_IN)||(LA159_9>=KW_RECORDWRITER && LA159_9<=KW_ROW)||LA159_9==EQUAL||LA159_9==KW_MAP||(LA159_9>=LESSTHAN && LA159_9<=GREATERTHAN)||LA159_9==KW_UNION||LA159_9==KW_INSERT||(LA159_9>=KW_LIMIT && LA159_9<=KW_SELECT)||(LA159_9>=KW_USING && LA159_9<=PLUS)||LA159_9==KW_REDUCE||(LA159_9>=KW_WHERE && LA159_9<=KW_SORT)||LA159_9==LSQUARE||LA159_9==MINUS||(LA159_9>=KW_IS && LA159_9<=KW_OR)) ) {
                    alt159=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1134:1: selectExpression : ( expression | tableAllColumns );", 159, 9, input);

                    throw nvae;
                }
                }
                break;
            case STAR:
                {
                alt159=2;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1134:1: selectExpression : ( expression | tableAllColumns );", 159, 0, input);

                throw nvae;
            }

            switch (alt159) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1138:5: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_selectExpression8188);
                    expression499=expression();
                    _fsp--;

                    adaptor.addChild(root_0, expression499.getTree());

                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1138:18: tableAllColumns
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_tableAllColumns_in_selectExpression8192);
                    tableAllColumns500=tableAllColumns();
                    _fsp--;

                    adaptor.addChild(root_0, tableAllColumns500.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectExpression

    public static class selectExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectExpressionList
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1141:1: selectExpressionList : selectExpression ( COMMA selectExpression )* -> ^( TOK_EXPLIST ( selectExpression )+ ) ;
    public final selectExpressionList_return selectExpressionList() throws RecognitionException {
        selectExpressionList_return retval = new selectExpressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA502=null;
        selectExpression_return selectExpression501 = null;

        selectExpression_return selectExpression503 = null;


        CommonTree COMMA502_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_selectExpression=new RewriteRuleSubtreeStream(adaptor,"rule selectExpression");
         msgs.push("select expression list"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1144:5: ( selectExpression ( COMMA selectExpression )* -> ^( TOK_EXPLIST ( selectExpression )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1145:5: selectExpression ( COMMA selectExpression )*
            {
            pushFollow(FOLLOW_selectExpression_in_selectExpressionList8223);
            selectExpression501=selectExpression();
            _fsp--;

            stream_selectExpression.add(selectExpression501.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1145:22: ( COMMA selectExpression )*
            loop160:
            do {
                int alt160=2;
                int LA160_0 = input.LA(1);

                if ( (LA160_0==COMMA) ) {
                    alt160=1;
                }


                switch (alt160) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1145:23: COMMA selectExpression
            	    {
            	    COMMA502=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_selectExpressionList8226); 
            	    stream_COMMA.add(COMMA502);

            	    pushFollow(FOLLOW_selectExpression_in_selectExpressionList8228);
            	    selectExpression503=selectExpression();
            	    _fsp--;

            	    stream_selectExpression.add(selectExpression503.getTree());

            	    }
            	    break;

            	default :
            	    break loop160;
                }
            } while (true);


            // AST REWRITE
            // elements: selectExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1145:48: -> ^( TOK_EXPLIST ( selectExpression )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1145:51: ^( TOK_EXPLIST ( selectExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_EXPLIST, "TOK_EXPLIST"), root_1);

                if ( !(stream_selectExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_selectExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_selectExpression.next());

                }
                stream_selectExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectExpressionList

    public static class tableAllColumns_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableAllColumns
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1151:1: tableAllColumns : ( STAR -> ^( TOK_ALLCOLREF ) | Identifier DOT STAR -> ^( TOK_ALLCOLREF Identifier ) );
    public final tableAllColumns_return tableAllColumns() throws RecognitionException {
        tableAllColumns_return retval = new tableAllColumns_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR504=null;
        Token Identifier505=null;
        Token DOT506=null;
        Token STAR507=null;

        CommonTree STAR504_tree=null;
        CommonTree Identifier505_tree=null;
        CommonTree DOT506_tree=null;
        CommonTree STAR507_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1152:5: ( STAR -> ^( TOK_ALLCOLREF ) | Identifier DOT STAR -> ^( TOK_ALLCOLREF Identifier ) )
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==STAR) ) {
                alt161=1;
            }
            else if ( (LA161_0==Identifier) ) {
                alt161=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1151:1: tableAllColumns : ( STAR -> ^( TOK_ALLCOLREF ) | Identifier DOT STAR -> ^( TOK_ALLCOLREF Identifier ) );", 161, 0, input);

                throw nvae;
            }
            switch (alt161) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1153:5: STAR
                    {
                    STAR504=(Token)input.LT(1);
                    match(input,STAR,FOLLOW_STAR_in_tableAllColumns8263); 
                    stream_STAR.add(STAR504);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1153:10: -> ^( TOK_ALLCOLREF )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1153:13: ^( TOK_ALLCOLREF )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1154:7: Identifier DOT STAR
                    {
                    Identifier505=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_tableAllColumns8277); 
                    stream_Identifier.add(Identifier505);

                    DOT506=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_tableAllColumns8279); 
                    stream_DOT.add(DOT506);

                    STAR507=(Token)input.LT(1);
                    match(input,STAR,FOLLOW_STAR_in_tableAllColumns8281); 
                    stream_STAR.add(STAR507);


                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1154:27: -> ^( TOK_ALLCOLREF Identifier )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1154:30: ^( TOK_ALLCOLREF Identifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF"), root_1);

                        adaptor.addChild(root_1, stream_Identifier.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableAllColumns

    public static class tableOrColumn_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableOrColumn
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1158:1: tableOrColumn : Identifier -> ^( TOK_TABLE_OR_COL Identifier ) ;
    public final tableOrColumn_return tableOrColumn() throws RecognitionException {
        tableOrColumn_return retval = new tableOrColumn_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier508=null;

        CommonTree Identifier508_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("table or column identifier"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1161:5: ( Identifier -> ^( TOK_TABLE_OR_COL Identifier ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1162:5: Identifier
            {
            Identifier508=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_tableOrColumn8321); 
            stream_Identifier.add(Identifier508);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1162:16: -> ^( TOK_TABLE_OR_COL Identifier )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1162:19: ^( TOK_TABLE_OR_COL Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLE_OR_COL, "TOK_TABLE_OR_COL"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableOrColumn

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expressionList
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1165:1: expressionList : expression ( COMMA expression )* -> ^( TOK_EXPLIST ( expression )+ ) ;
    public final expressionList_return expressionList() throws RecognitionException {
        expressionList_return retval = new expressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA510=null;
        expression_return expression509 = null;

        expression_return expression511 = null;


        CommonTree COMMA510_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("expression list"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1168:5: ( expression ( COMMA expression )* -> ^( TOK_EXPLIST ( expression )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1169:5: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_expressionList8360);
            expression509=expression();
            _fsp--;

            stream_expression.add(expression509.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1169:16: ( COMMA expression )*
            loop162:
            do {
                int alt162=2;
                int LA162_0 = input.LA(1);

                if ( (LA162_0==COMMA) ) {
                    alt162=1;
                }


                switch (alt162) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1169:17: COMMA expression
            	    {
            	    COMMA510=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_expressionList8363); 
            	    stream_COMMA.add(COMMA510);

            	    pushFollow(FOLLOW_expression_in_expressionList8365);
            	    expression511=expression();
            	    _fsp--;

            	    stream_expression.add(expression511.getTree());

            	    }
            	    break;

            	default :
            	    break loop162;
                }
            } while (true);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1169:36: -> ^( TOK_EXPLIST ( expression )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1169:39: ^( TOK_EXPLIST ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_EXPLIST, "TOK_EXPLIST"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.next());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expressionList

    public static class aliasList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start aliasList
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1172:1: aliasList : Identifier ( COMMA Identifier )* -> ^( TOK_ALIASLIST ( Identifier )+ ) ;
    public final aliasList_return aliasList() throws RecognitionException {
        aliasList_return retval = new aliasList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier512=null;
        Token COMMA513=null;
        Token Identifier514=null;

        CommonTree Identifier512_tree=null;
        CommonTree COMMA513_tree=null;
        CommonTree Identifier514_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("alias list"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1175:5: ( Identifier ( COMMA Identifier )* -> ^( TOK_ALIASLIST ( Identifier )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1176:5: Identifier ( COMMA Identifier )*
            {
            Identifier512=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_aliasList8407); 
            stream_Identifier.add(Identifier512);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1176:16: ( COMMA Identifier )*
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==COMMA) ) {
                    alt163=1;
                }


                switch (alt163) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1176:17: COMMA Identifier
            	    {
            	    COMMA513=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_aliasList8410); 
            	    stream_COMMA.add(COMMA513);

            	    Identifier514=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_aliasList8412); 
            	    stream_Identifier.add(Identifier514);


            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1176:36: -> ^( TOK_ALIASLIST ( Identifier )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1176:39: ^( TOK_ALIASLIST ( Identifier )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALIASLIST, "TOK_ALIASLIST"), root_1);

                if ( !(stream_Identifier.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_Identifier.next());

                }
                stream_Identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end aliasList

    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start fromClause
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1181:1: fromClause : KW_FROM joinSource -> ^( TOK_FROM joinSource ) ;
    public final fromClause_return fromClause() throws RecognitionException {
        fromClause_return retval = new fromClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_FROM515=null;
        joinSource_return joinSource516 = null;


        CommonTree KW_FROM515_tree=null;
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_joinSource=new RewriteRuleSubtreeStream(adaptor,"rule joinSource");
         msgs.push("from clause"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1184:5: ( KW_FROM joinSource -> ^( TOK_FROM joinSource ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1185:5: KW_FROM joinSource
            {
            KW_FROM515=(Token)input.LT(1);
            match(input,KW_FROM,FOLLOW_KW_FROM_in_fromClause8456); 
            stream_KW_FROM.add(KW_FROM515);

            pushFollow(FOLLOW_joinSource_in_fromClause8458);
            joinSource516=joinSource();
            _fsp--;

            stream_joinSource.add(joinSource516.getTree());

            // AST REWRITE
            // elements: joinSource
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1185:24: -> ^( TOK_FROM joinSource )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1185:27: ^( TOK_FROM joinSource )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FROM, "TOK_FROM"), root_1);

                adaptor.addChild(root_1, stream_joinSource.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end fromClause

    public static class joinSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start joinSource
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1188:1: joinSource : ( fromSource ( joinToken fromSource ( KW_ON expression )? )* | uniqueJoinToken uniqueJoinSource ( COMMA uniqueJoinSource )+ );
    public final joinSource_return joinSource() throws RecognitionException {
        joinSource_return retval = new joinSource_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ON520=null;
        Token COMMA524=null;
        fromSource_return fromSource517 = null;

        joinToken_return joinToken518 = null;

        fromSource_return fromSource519 = null;

        expression_return expression521 = null;

        uniqueJoinToken_return uniqueJoinToken522 = null;

        uniqueJoinSource_return uniqueJoinSource523 = null;

        uniqueJoinSource_return uniqueJoinSource525 = null;


        CommonTree KW_ON520_tree=null;
        CommonTree COMMA524_tree=null;

         msgs.push("join source"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1191:5: ( fromSource ( joinToken fromSource ( KW_ON expression )? )* | uniqueJoinToken uniqueJoinSource ( COMMA uniqueJoinSource )+ )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==Identifier||LA167_0==LPAREN) ) {
                alt167=1;
            }
            else if ( (LA167_0==KW_UNIQUEJOIN) ) {
                alt167=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1188:1: joinSource : ( fromSource ( joinToken fromSource ( KW_ON expression )? )* | uniqueJoinToken uniqueJoinSource ( COMMA uniqueJoinSource )+ );", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1191:7: fromSource ( joinToken fromSource ( KW_ON expression )? )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_fromSource_in_joinSource8493);
                    fromSource517=fromSource();
                    _fsp--;

                    adaptor.addChild(root_0, fromSource517.getTree());
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1191:18: ( joinToken fromSource ( KW_ON expression )? )*
                    loop165:
                    do {
                        int alt165=2;
                        int LA165_0 = input.LA(1);

                        if ( ((LA165_0>=KW_JOIN && LA165_0<=KW_LEFT)||(LA165_0>=KW_RIGHT && LA165_0<=KW_FULL)) ) {
                            alt165=1;
                        }


                        switch (alt165) {
                    	case 1 :
                    	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1191:20: joinToken fromSource ( KW_ON expression )?
                    	    {
                    	    pushFollow(FOLLOW_joinToken_in_joinSource8497);
                    	    joinToken518=joinToken();
                    	    _fsp--;

                    	    root_0 = (CommonTree)adaptor.becomeRoot(joinToken518.getTree(), root_0);
                    	    pushFollow(FOLLOW_fromSource_in_joinSource8500);
                    	    fromSource519=fromSource();
                    	    _fsp--;

                    	    adaptor.addChild(root_0, fromSource519.getTree());
                    	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1191:42: ( KW_ON expression )?
                    	    int alt164=2;
                    	    int LA164_0 = input.LA(1);

                    	    if ( (LA164_0==KW_ON) ) {
                    	        alt164=1;
                    	    }
                    	    switch (alt164) {
                    	        case 1 :
                    	            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1191:43: KW_ON expression
                    	            {
                    	            KW_ON520=(Token)input.LT(1);
                    	            match(input,KW_ON,FOLLOW_KW_ON_in_joinSource8503); 
                    	            pushFollow(FOLLOW_expression_in_joinSource8506);
                    	            expression521=expression();
                    	            _fsp--;

                    	            adaptor.addChild(root_0, expression521.getTree());

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop165;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1192:7: uniqueJoinToken uniqueJoinSource ( COMMA uniqueJoinSource )+
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_uniqueJoinToken_in_joinSource8519);
                    uniqueJoinToken522=uniqueJoinToken();
                    _fsp--;

                    root_0 = (CommonTree)adaptor.becomeRoot(uniqueJoinToken522.getTree(), root_0);
                    pushFollow(FOLLOW_uniqueJoinSource_in_joinSource8522);
                    uniqueJoinSource523=uniqueJoinSource();
                    _fsp--;

                    adaptor.addChild(root_0, uniqueJoinSource523.getTree());
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1192:41: ( COMMA uniqueJoinSource )+
                    int cnt166=0;
                    loop166:
                    do {
                        int alt166=2;
                        int LA166_0 = input.LA(1);

                        if ( (LA166_0==COMMA) ) {
                            alt166=1;
                        }


                        switch (alt166) {
                    	case 1 :
                    	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1192:42: COMMA uniqueJoinSource
                    	    {
                    	    COMMA524=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_joinSource8525); 
                    	    pushFollow(FOLLOW_uniqueJoinSource_in_joinSource8528);
                    	    uniqueJoinSource525=uniqueJoinSource();
                    	    _fsp--;

                    	    adaptor.addChild(root_0, uniqueJoinSource525.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt166 >= 1 ) break loop166;
                                EarlyExitException eee =
                                    new EarlyExitException(166, input);
                                throw eee;
                        }
                        cnt166++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end joinSource

    public static class uniqueJoinSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start uniqueJoinSource
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1195:1: uniqueJoinSource : ( KW_PRESERVE )? fromSource uniqueJoinExpr ;
    public final uniqueJoinSource_return uniqueJoinSource() throws RecognitionException {
        uniqueJoinSource_return retval = new uniqueJoinSource_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_PRESERVE526=null;
        fromSource_return fromSource527 = null;

        uniqueJoinExpr_return uniqueJoinExpr528 = null;


        CommonTree KW_PRESERVE526_tree=null;

         msgs.push("join source"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1198:5: ( ( KW_PRESERVE )? fromSource uniqueJoinExpr )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1198:7: ( KW_PRESERVE )? fromSource uniqueJoinExpr
            {
            root_0 = (CommonTree)adaptor.nil();

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1198:7: ( KW_PRESERVE )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==KW_PRESERVE) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1198:7: KW_PRESERVE
                    {
                    KW_PRESERVE526=(Token)input.LT(1);
                    match(input,KW_PRESERVE,FOLLOW_KW_PRESERVE_in_uniqueJoinSource8557); 
                    KW_PRESERVE526_tree = (CommonTree)adaptor.create(KW_PRESERVE526);
                    adaptor.addChild(root_0, KW_PRESERVE526_tree);


                    }
                    break;

            }

            pushFollow(FOLLOW_fromSource_in_uniqueJoinSource8560);
            fromSource527=fromSource();
            _fsp--;

            adaptor.addChild(root_0, fromSource527.getTree());
            pushFollow(FOLLOW_uniqueJoinExpr_in_uniqueJoinSource8562);
            uniqueJoinExpr528=uniqueJoinExpr();
            _fsp--;

            adaptor.addChild(root_0, uniqueJoinExpr528.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end uniqueJoinSource

    public static class uniqueJoinExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start uniqueJoinExpr
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1201:1: uniqueJoinExpr : LPAREN e1+= expression ( COMMA e1+= expression )* RPAREN -> ^( TOK_EXPLIST ( $e1)* ) ;
    public final uniqueJoinExpr_return uniqueJoinExpr() throws RecognitionException {
        uniqueJoinExpr_return retval = new uniqueJoinExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN529=null;
        Token COMMA530=null;
        Token RPAREN531=null;
        List list_e1=null;
        RuleReturnScope e1 = null;
        CommonTree LPAREN529_tree=null;
        CommonTree COMMA530_tree=null;
        CommonTree RPAREN531_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("unique join expression list"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1204:5: ( LPAREN e1+= expression ( COMMA e1+= expression )* RPAREN -> ^( TOK_EXPLIST ( $e1)* ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1204:7: LPAREN e1+= expression ( COMMA e1+= expression )* RPAREN
            {
            LPAREN529=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_uniqueJoinExpr8589); 
            stream_LPAREN.add(LPAREN529);

            pushFollow(FOLLOW_expression_in_uniqueJoinExpr8593);
            e1=expression();
            _fsp--;

            stream_expression.add(e1.getTree());
            if (list_e1==null) list_e1=new ArrayList();
            list_e1.add(e1);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1204:29: ( COMMA e1+= expression )*
            loop169:
            do {
                int alt169=2;
                int LA169_0 = input.LA(1);

                if ( (LA169_0==COMMA) ) {
                    alt169=1;
                }


                switch (alt169) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1204:30: COMMA e1+= expression
            	    {
            	    COMMA530=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_uniqueJoinExpr8596); 
            	    stream_COMMA.add(COMMA530);

            	    pushFollow(FOLLOW_expression_in_uniqueJoinExpr8600);
            	    e1=expression();
            	    _fsp--;

            	    stream_expression.add(e1.getTree());
            	    if (list_e1==null) list_e1=new ArrayList();
            	    list_e1.add(e1);


            	    }
            	    break;

            	default :
            	    break loop169;
                }
            } while (true);

            RPAREN531=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_uniqueJoinExpr8604); 
            stream_RPAREN.add(RPAREN531);


            // AST REWRITE
            // elements: e1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: e1
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"token e1",list_e1);
            root_0 = (CommonTree)adaptor.nil();
            // 1205:7: -> ^( TOK_EXPLIST ( $e1)* )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1205:10: ^( TOK_EXPLIST ( $e1)* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_EXPLIST, "TOK_EXPLIST"), root_1);

                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1205:24: ( $e1)*
                while ( stream_e1.hasNext() ) {
                    adaptor.addChild(root_1, ((ParserRuleReturnScope)stream_e1.next()).getTree());

                }
                stream_e1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end uniqueJoinExpr

    public static class uniqueJoinToken_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start uniqueJoinToken
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1208:1: uniqueJoinToken : KW_UNIQUEJOIN -> TOK_UNIQUEJOIN ;
    public final uniqueJoinToken_return uniqueJoinToken() throws RecognitionException {
        uniqueJoinToken_return retval = new uniqueJoinToken_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_UNIQUEJOIN532=null;

        CommonTree KW_UNIQUEJOIN532_tree=null;
        RewriteRuleTokenStream stream_KW_UNIQUEJOIN=new RewriteRuleTokenStream(adaptor,"token KW_UNIQUEJOIN");

         msgs.push("unique join"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1211:5: ( KW_UNIQUEJOIN -> TOK_UNIQUEJOIN )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1211:7: KW_UNIQUEJOIN
            {
            KW_UNIQUEJOIN532=(Token)input.LT(1);
            match(input,KW_UNIQUEJOIN,FOLLOW_KW_UNIQUEJOIN_in_uniqueJoinToken8647); 
            stream_KW_UNIQUEJOIN.add(KW_UNIQUEJOIN532);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1211:21: -> TOK_UNIQUEJOIN
            {
                adaptor.addChild(root_0, adaptor.create(TOK_UNIQUEJOIN, "TOK_UNIQUEJOIN"));

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end uniqueJoinToken

    public static class joinToken_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start joinToken
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1213:1: joinToken : ( KW_JOIN -> TOK_JOIN | KW_LEFT KW_OUTER KW_JOIN -> TOK_LEFTOUTERJOIN | KW_RIGHT KW_OUTER KW_JOIN -> TOK_RIGHTOUTERJOIN | KW_FULL KW_OUTER KW_JOIN -> TOK_FULLOUTERJOIN | KW_LEFT KW_SEMI KW_JOIN -> TOK_LEFTSEMIJOIN );
    public final joinToken_return joinToken() throws RecognitionException {
        joinToken_return retval = new joinToken_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_JOIN533=null;
        Token KW_LEFT534=null;
        Token KW_OUTER535=null;
        Token KW_JOIN536=null;
        Token KW_RIGHT537=null;
        Token KW_OUTER538=null;
        Token KW_JOIN539=null;
        Token KW_FULL540=null;
        Token KW_OUTER541=null;
        Token KW_JOIN542=null;
        Token KW_LEFT543=null;
        Token KW_SEMI544=null;
        Token KW_JOIN545=null;

        CommonTree KW_JOIN533_tree=null;
        CommonTree KW_LEFT534_tree=null;
        CommonTree KW_OUTER535_tree=null;
        CommonTree KW_JOIN536_tree=null;
        CommonTree KW_RIGHT537_tree=null;
        CommonTree KW_OUTER538_tree=null;
        CommonTree KW_JOIN539_tree=null;
        CommonTree KW_FULL540_tree=null;
        CommonTree KW_OUTER541_tree=null;
        CommonTree KW_JOIN542_tree=null;
        CommonTree KW_LEFT543_tree=null;
        CommonTree KW_SEMI544_tree=null;
        CommonTree KW_JOIN545_tree=null;
        RewriteRuleTokenStream stream_KW_RIGHT=new RewriteRuleTokenStream(adaptor,"token KW_RIGHT");
        RewriteRuleTokenStream stream_KW_OUTER=new RewriteRuleTokenStream(adaptor,"token KW_OUTER");
        RewriteRuleTokenStream stream_KW_JOIN=new RewriteRuleTokenStream(adaptor,"token KW_JOIN");
        RewriteRuleTokenStream stream_KW_LEFT=new RewriteRuleTokenStream(adaptor,"token KW_LEFT");
        RewriteRuleTokenStream stream_KW_SEMI=new RewriteRuleTokenStream(adaptor,"token KW_SEMI");
        RewriteRuleTokenStream stream_KW_FULL=new RewriteRuleTokenStream(adaptor,"token KW_FULL");

         msgs.push("join type specifier"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1216:5: ( KW_JOIN -> TOK_JOIN | KW_LEFT KW_OUTER KW_JOIN -> TOK_LEFTOUTERJOIN | KW_RIGHT KW_OUTER KW_JOIN -> TOK_RIGHTOUTERJOIN | KW_FULL KW_OUTER KW_JOIN -> TOK_FULLOUTERJOIN | KW_LEFT KW_SEMI KW_JOIN -> TOK_LEFTSEMIJOIN )
            int alt170=5;
            switch ( input.LA(1) ) {
            case KW_JOIN:
                {
                alt170=1;
                }
                break;
            case KW_LEFT:
                {
                int LA170_2 = input.LA(2);

                if ( (LA170_2==KW_OUTER) ) {
                    alt170=2;
                }
                else if ( (LA170_2==KW_SEMI) ) {
                    alt170=5;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1213:1: joinToken : ( KW_JOIN -> TOK_JOIN | KW_LEFT KW_OUTER KW_JOIN -> TOK_LEFTOUTERJOIN | KW_RIGHT KW_OUTER KW_JOIN -> TOK_RIGHTOUTERJOIN | KW_FULL KW_OUTER KW_JOIN -> TOK_FULLOUTERJOIN | KW_LEFT KW_SEMI KW_JOIN -> TOK_LEFTSEMIJOIN );", 170, 2, input);

                    throw nvae;
                }
                }
                break;
            case KW_RIGHT:
                {
                alt170=3;
                }
                break;
            case KW_FULL:
                {
                alt170=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1213:1: joinToken : ( KW_JOIN -> TOK_JOIN | KW_LEFT KW_OUTER KW_JOIN -> TOK_LEFTOUTERJOIN | KW_RIGHT KW_OUTER KW_JOIN -> TOK_RIGHTOUTERJOIN | KW_FULL KW_OUTER KW_JOIN -> TOK_FULLOUTERJOIN | KW_LEFT KW_SEMI KW_JOIN -> TOK_LEFTSEMIJOIN );", 170, 0, input);

                throw nvae;
            }

            switch (alt170) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1217:7: KW_JOIN
                    {
                    KW_JOIN533=(Token)input.LT(1);
                    match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken8679); 
                    stream_KW_JOIN.add(KW_JOIN533);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1217:35: -> TOK_JOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_JOIN, "TOK_JOIN"));

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1218:7: KW_LEFT KW_OUTER KW_JOIN
                    {
                    KW_LEFT534=(Token)input.LT(1);
                    match(input,KW_LEFT,FOLLOW_KW_LEFT_in_joinToken8711); 
                    stream_KW_LEFT.add(KW_LEFT534);

                    KW_OUTER535=(Token)input.LT(1);
                    match(input,KW_OUTER,FOLLOW_KW_OUTER_in_joinToken8714); 
                    stream_KW_OUTER.add(KW_OUTER535);

                    KW_JOIN536=(Token)input.LT(1);
                    match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken8716); 
                    stream_KW_JOIN.add(KW_JOIN536);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1218:35: -> TOK_LEFTOUTERJOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_LEFTOUTERJOIN, "TOK_LEFTOUTERJOIN"));

                    }



                    }
                    break;
                case 3 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1219:7: KW_RIGHT KW_OUTER KW_JOIN
                    {
                    KW_RIGHT537=(Token)input.LT(1);
                    match(input,KW_RIGHT,FOLLOW_KW_RIGHT_in_joinToken8730); 
                    stream_KW_RIGHT.add(KW_RIGHT537);

                    KW_OUTER538=(Token)input.LT(1);
                    match(input,KW_OUTER,FOLLOW_KW_OUTER_in_joinToken8732); 
                    stream_KW_OUTER.add(KW_OUTER538);

                    KW_JOIN539=(Token)input.LT(1);
                    match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken8734); 
                    stream_KW_JOIN.add(KW_JOIN539);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1219:35: -> TOK_RIGHTOUTERJOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_RIGHTOUTERJOIN, "TOK_RIGHTOUTERJOIN"));

                    }



                    }
                    break;
                case 4 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1220:7: KW_FULL KW_OUTER KW_JOIN
                    {
                    KW_FULL540=(Token)input.LT(1);
                    match(input,KW_FULL,FOLLOW_KW_FULL_in_joinToken8748); 
                    stream_KW_FULL.add(KW_FULL540);

                    KW_OUTER541=(Token)input.LT(1);
                    match(input,KW_OUTER,FOLLOW_KW_OUTER_in_joinToken8751); 
                    stream_KW_OUTER.add(KW_OUTER541);

                    KW_JOIN542=(Token)input.LT(1);
                    match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken8753); 
                    stream_KW_JOIN.add(KW_JOIN542);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1220:35: -> TOK_FULLOUTERJOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_FULLOUTERJOIN, "TOK_FULLOUTERJOIN"));

                    }



                    }
                    break;
                case 5 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1221:7: KW_LEFT KW_SEMI KW_JOIN
                    {
                    KW_LEFT543=(Token)input.LT(1);
                    match(input,KW_LEFT,FOLLOW_KW_LEFT_in_joinToken8767); 
                    stream_KW_LEFT.add(KW_LEFT543);

                    KW_SEMI544=(Token)input.LT(1);
                    match(input,KW_SEMI,FOLLOW_KW_SEMI_in_joinToken8770); 
                    stream_KW_SEMI.add(KW_SEMI544);

                    KW_JOIN545=(Token)input.LT(1);
                    match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken8773); 
                    stream_KW_JOIN.add(KW_JOIN545);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1221:35: -> TOK_LEFTSEMIJOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_LEFTSEMIJOIN, "TOK_LEFTSEMIJOIN"));

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end joinToken

    public static class lateralView_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start lateralView
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1224:1: lateralView : KW_LATERAL KW_VIEW function tableAlias KW_AS Identifier ( COMMA Identifier )* -> ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) ) ;
    public final lateralView_return lateralView() throws RecognitionException {
        lateralView_return retval = new lateralView_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_LATERAL546=null;
        Token KW_VIEW547=null;
        Token KW_AS550=null;
        Token Identifier551=null;
        Token COMMA552=null;
        Token Identifier553=null;
        function_return function548 = null;

        tableAlias_return tableAlias549 = null;


        CommonTree KW_LATERAL546_tree=null;
        CommonTree KW_VIEW547_tree=null;
        CommonTree KW_AS550_tree=null;
        CommonTree Identifier551_tree=null;
        CommonTree COMMA552_tree=null;
        CommonTree Identifier553_tree=null;
        RewriteRuleTokenStream stream_KW_LATERAL=new RewriteRuleTokenStream(adaptor,"token KW_LATERAL");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_tableAlias=new RewriteRuleSubtreeStream(adaptor,"rule tableAlias");
        RewriteRuleSubtreeStream stream_function=new RewriteRuleSubtreeStream(adaptor,"rule function");
        msgs.push("lateral view"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1227:2: ( KW_LATERAL KW_VIEW function tableAlias KW_AS Identifier ( COMMA Identifier )* -> ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1228:2: KW_LATERAL KW_VIEW function tableAlias KW_AS Identifier ( COMMA Identifier )*
            {
            KW_LATERAL546=(Token)input.LT(1);
            match(input,KW_LATERAL,FOLLOW_KW_LATERAL_in_lateralView8804); 
            stream_KW_LATERAL.add(KW_LATERAL546);

            KW_VIEW547=(Token)input.LT(1);
            match(input,KW_VIEW,FOLLOW_KW_VIEW_in_lateralView8806); 
            stream_KW_VIEW.add(KW_VIEW547);

            pushFollow(FOLLOW_function_in_lateralView8808);
            function548=function();
            _fsp--;

            stream_function.add(function548.getTree());
            pushFollow(FOLLOW_tableAlias_in_lateralView8810);
            tableAlias549=tableAlias();
            _fsp--;

            stream_tableAlias.add(tableAlias549.getTree());
            KW_AS550=(Token)input.LT(1);
            match(input,KW_AS,FOLLOW_KW_AS_in_lateralView8812); 
            stream_KW_AS.add(KW_AS550);

            Identifier551=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_lateralView8814); 
            stream_Identifier.add(Identifier551);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1228:58: ( COMMA Identifier )*
            loop171:
            do {
                int alt171=2;
                int LA171_0 = input.LA(1);

                if ( (LA171_0==COMMA) ) {
                    alt171=1;
                }


                switch (alt171) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1228:59: COMMA Identifier
            	    {
            	    COMMA552=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_lateralView8817); 
            	    stream_COMMA.add(COMMA552);

            	    Identifier553=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_lateralView8819); 
            	    stream_Identifier.add(Identifier553);


            	    }
            	    break;

            	default :
            	    break loop171;
                }
            } while (true);


            // AST REWRITE
            // elements: function, Identifier, tableAlias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1228:78: -> ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1228:81: ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LATERAL_VIEW, "TOK_LATERAL_VIEW"), root_1);

                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1228:100: ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELECT, "TOK_SELECT"), root_2);

                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1228:113: ^( TOK_SELEXPR function ( Identifier )+ tableAlias )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_3);

                adaptor.addChild(root_3, stream_function.next());
                if ( !(stream_Identifier.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_3, stream_Identifier.next());

                }
                stream_Identifier.reset();
                adaptor.addChild(root_3, stream_tableAlias.next());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end lateralView

    public static class tableAlias_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableAlias
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1231:1: tableAlias : Identifier -> ^( TOK_TABALIAS Identifier ) ;
    public final tableAlias_return tableAlias() throws RecognitionException {
        tableAlias_return retval = new tableAlias_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier554=null;

        CommonTree Identifier554_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

        msgs.push("table alias"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1234:5: ( Identifier -> ^( TOK_TABALIAS Identifier ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1235:5: Identifier
            {
            Identifier554=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_tableAlias8870); 
            stream_Identifier.add(Identifier554);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1235:16: -> ^( TOK_TABALIAS Identifier )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1235:19: ^( TOK_TABALIAS Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABALIAS, "TOK_TABALIAS"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableAlias

    public static class fromSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start fromSource
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1238:1: fromSource : ( tableSource | subQuerySource ) ( lateralView )* ;
    public final fromSource_return fromSource() throws RecognitionException {
        fromSource_return retval = new fromSource_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        tableSource_return tableSource555 = null;

        subQuerySource_return subQuerySource556 = null;

        lateralView_return lateralView557 = null;



         msgs.push("from source"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1241:5: ( ( tableSource | subQuerySource ) ( lateralView )* )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1242:5: ( tableSource | subQuerySource ) ( lateralView )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1242:5: ( tableSource | subQuerySource )
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==Identifier) ) {
                alt172=1;
            }
            else if ( (LA172_0==LPAREN) ) {
                alt172=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1242:5: ( tableSource | subQuerySource )", 172, 0, input);

                throw nvae;
            }
            switch (alt172) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1242:6: tableSource
                    {
                    pushFollow(FOLLOW_tableSource_in_fromSource8910);
                    tableSource555=tableSource();
                    _fsp--;

                    adaptor.addChild(root_0, tableSource555.getTree());

                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1242:20: subQuerySource
                    {
                    pushFollow(FOLLOW_subQuerySource_in_fromSource8914);
                    subQuerySource556=subQuerySource();
                    _fsp--;

                    adaptor.addChild(root_0, subQuerySource556.getTree());

                    }
                    break;

            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1242:36: ( lateralView )*
            loop173:
            do {
                int alt173=2;
                int LA173_0 = input.LA(1);

                if ( (LA173_0==KW_LATERAL) ) {
                    alt173=1;
                }


                switch (alt173) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1242:37: lateralView
            	    {
            	    pushFollow(FOLLOW_lateralView_in_fromSource8918);
            	    lateralView557=lateralView();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(lateralView557.getTree(), root_0);

            	    }
            	    break;

            	default :
            	    break loop173;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end fromSource

    public static class tableSample_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableSample
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1245:1: tableSample : KW_TABLESAMPLE LPAREN KW_BUCKET (numerator= Number ) KW_OUT KW_OF (denominator= Number ) ( KW_ON expr+= expression ( COMMA expr+= expression )* )? RPAREN -> ^( TOK_TABLESAMPLE $numerator $denominator ( $expr)* ) ;
    public final tableSample_return tableSample() throws RecognitionException {
        tableSample_return retval = new tableSample_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token numerator=null;
        Token denominator=null;
        Token KW_TABLESAMPLE558=null;
        Token LPAREN559=null;
        Token KW_BUCKET560=null;
        Token KW_OUT561=null;
        Token KW_OF562=null;
        Token KW_ON563=null;
        Token COMMA564=null;
        Token RPAREN565=null;
        List list_expr=null;
        RuleReturnScope expr = null;
        CommonTree numerator_tree=null;
        CommonTree denominator_tree=null;
        CommonTree KW_TABLESAMPLE558_tree=null;
        CommonTree LPAREN559_tree=null;
        CommonTree KW_BUCKET560_tree=null;
        CommonTree KW_OUT561_tree=null;
        CommonTree KW_OF562_tree=null;
        CommonTree KW_ON563_tree=null;
        CommonTree COMMA564_tree=null;
        CommonTree RPAREN565_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_OUT=new RewriteRuleTokenStream(adaptor,"token KW_OUT");
        RewriteRuleTokenStream stream_KW_OF=new RewriteRuleTokenStream(adaptor,"token KW_OF");
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_BUCKET=new RewriteRuleTokenStream(adaptor,"token KW_BUCKET");
        RewriteRuleTokenStream stream_KW_TABLESAMPLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLESAMPLE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("table sample specification"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1248:5: ( KW_TABLESAMPLE LPAREN KW_BUCKET (numerator= Number ) KW_OUT KW_OF (denominator= Number ) ( KW_ON expr+= expression ( COMMA expr+= expression )* )? RPAREN -> ^( TOK_TABLESAMPLE $numerator $denominator ( $expr)* ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1249:5: KW_TABLESAMPLE LPAREN KW_BUCKET (numerator= Number ) KW_OUT KW_OF (denominator= Number ) ( KW_ON expr+= expression ( COMMA expr+= expression )* )? RPAREN
            {
            KW_TABLESAMPLE558=(Token)input.LT(1);
            match(input,KW_TABLESAMPLE,FOLLOW_KW_TABLESAMPLE_in_tableSample8952); 
            stream_KW_TABLESAMPLE.add(KW_TABLESAMPLE558);

            LPAREN559=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_tableSample8954); 
            stream_LPAREN.add(LPAREN559);

            KW_BUCKET560=(Token)input.LT(1);
            match(input,KW_BUCKET,FOLLOW_KW_BUCKET_in_tableSample8956); 
            stream_KW_BUCKET.add(KW_BUCKET560);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1249:37: (numerator= Number )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1249:38: numerator= Number
            {
            numerator=(Token)input.LT(1);
            match(input,Number,FOLLOW_Number_in_tableSample8961); 
            stream_Number.add(numerator);


            }

            KW_OUT561=(Token)input.LT(1);
            match(input,KW_OUT,FOLLOW_KW_OUT_in_tableSample8964); 
            stream_KW_OUT.add(KW_OUT561);

            KW_OF562=(Token)input.LT(1);
            match(input,KW_OF,FOLLOW_KW_OF_in_tableSample8966); 
            stream_KW_OF.add(KW_OF562);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1249:69: (denominator= Number )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1249:70: denominator= Number
            {
            denominator=(Token)input.LT(1);
            match(input,Number,FOLLOW_Number_in_tableSample8971); 
            stream_Number.add(denominator);


            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1249:90: ( KW_ON expr+= expression ( COMMA expr+= expression )* )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==KW_ON) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1249:91: KW_ON expr+= expression ( COMMA expr+= expression )*
                    {
                    KW_ON563=(Token)input.LT(1);
                    match(input,KW_ON,FOLLOW_KW_ON_in_tableSample8975); 
                    stream_KW_ON.add(KW_ON563);

                    pushFollow(FOLLOW_expression_in_tableSample8979);
                    expr=expression();
                    _fsp--;

                    stream_expression.add(expr.getTree());
                    if (list_expr==null) list_expr=new ArrayList();
                    list_expr.add(expr);

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1249:114: ( COMMA expr+= expression )*
                    loop174:
                    do {
                        int alt174=2;
                        int LA174_0 = input.LA(1);

                        if ( (LA174_0==COMMA) ) {
                            alt174=1;
                        }


                        switch (alt174) {
                    	case 1 :
                    	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1249:115: COMMA expr+= expression
                    	    {
                    	    COMMA564=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_tableSample8982); 
                    	    stream_COMMA.add(COMMA564);

                    	    pushFollow(FOLLOW_expression_in_tableSample8986);
                    	    expr=expression();
                    	    _fsp--;

                    	    stream_expression.add(expr.getTree());
                    	    if (list_expr==null) list_expr=new ArrayList();
                    	    list_expr.add(expr);


                    	    }
                    	    break;

                    	default :
                    	    break loop174;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN565=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_tableSample8992); 
            stream_RPAREN.add(RPAREN565);


            // AST REWRITE
            // elements: expr, denominator, numerator
            // token labels: numerator, denominator
            // rule labels: retval
            // token list labels: 
            // rule list labels: expr
            retval.tree = root_0;
            RewriteRuleTokenStream stream_numerator=new RewriteRuleTokenStream(adaptor,"token numerator",numerator);
            RewriteRuleTokenStream stream_denominator=new RewriteRuleTokenStream(adaptor,"token denominator",denominator);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"token expr",list_expr);
            root_0 = (CommonTree)adaptor.nil();
            // 1249:149: -> ^( TOK_TABLESAMPLE $numerator $denominator ( $expr)* )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1249:152: ^( TOK_TABLESAMPLE $numerator $denominator ( $expr)* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLESAMPLE, "TOK_TABLESAMPLE"), root_1);

                adaptor.addChild(root_1, stream_numerator.next());
                adaptor.addChild(root_1, stream_denominator.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1249:194: ( $expr)*
                while ( stream_expr.hasNext() ) {
                    adaptor.addChild(root_1, ((ParserRuleReturnScope)stream_expr.next()).getTree());

                }
                stream_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableSample

    public static class tableSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableSource
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1252:1: tableSource : tabname= Identifier (ts= tableSample )? (alias= Identifier )? -> ^( TOK_TABREF $tabname ( $ts)? ( $alias)? ) ;
    public final tableSource_return tableSource() throws RecognitionException {
        tableSource_return retval = new tableSource_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token tabname=null;
        Token alias=null;
        tableSample_return ts = null;


        CommonTree tabname_tree=null;
        CommonTree alias_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_tableSample=new RewriteRuleSubtreeStream(adaptor,"rule tableSample");
         msgs.push("table source"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1255:5: (tabname= Identifier (ts= tableSample )? (alias= Identifier )? -> ^( TOK_TABREF $tabname ( $ts)? ( $alias)? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1256:5: tabname= Identifier (ts= tableSample )? (alias= Identifier )?
            {
            tabname=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_tableSource9041); 
            stream_Identifier.add(tabname);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1256:24: (ts= tableSample )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==KW_TABLESAMPLE) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1256:25: ts= tableSample
                    {
                    pushFollow(FOLLOW_tableSample_in_tableSource9046);
                    ts=tableSample();
                    _fsp--;

                    stream_tableSample.add(ts.getTree());

                    }
                    break;

            }

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1256:42: (alias= Identifier )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==Identifier) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1256:43: alias= Identifier
                    {
                    alias=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_tableSource9053); 
                    stream_Identifier.add(alias);


                    }
                    break;

            }


            // AST REWRITE
            // elements: alias, tabname, ts
            // token labels: alias, tabname
            // rule labels: retval, ts
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_alias=new RewriteRuleTokenStream(adaptor,"token alias",alias);
            RewriteRuleTokenStream stream_tabname=new RewriteRuleTokenStream(adaptor,"token tabname",tabname);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_ts=new RewriteRuleSubtreeStream(adaptor,"token ts",ts!=null?ts.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1256:62: -> ^( TOK_TABREF $tabname ( $ts)? ( $alias)? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1256:65: ^( TOK_TABREF $tabname ( $ts)? ( $alias)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABREF, "TOK_TABREF"), root_1);

                adaptor.addChild(root_1, stream_tabname.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1256:87: ( $ts)?
                if ( stream_ts.hasNext() ) {
                    adaptor.addChild(root_1, stream_ts.next());

                }
                stream_ts.reset();
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1256:92: ( $alias)?
                if ( stream_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_alias.next());

                }
                stream_alias.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableSource

    public static class subQuerySource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start subQuerySource
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1260:1: subQuerySource : LPAREN queryStatementExpression RPAREN Identifier -> ^( TOK_SUBQUERY queryStatementExpression Identifier ) ;
    public final subQuerySource_return subQuerySource() throws RecognitionException {
        subQuerySource_return retval = new subQuerySource_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN566=null;
        Token RPAREN568=null;
        Token Identifier569=null;
        queryStatementExpression_return queryStatementExpression567 = null;


        CommonTree LPAREN566_tree=null;
        CommonTree RPAREN568_tree=null;
        CommonTree Identifier569_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_queryStatementExpression=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpression");
         msgs.push("subquery source"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1263:5: ( LPAREN queryStatementExpression RPAREN Identifier -> ^( TOK_SUBQUERY queryStatementExpression Identifier ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1264:5: LPAREN queryStatementExpression RPAREN Identifier
            {
            LPAREN566=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_subQuerySource9104); 
            stream_LPAREN.add(LPAREN566);

            pushFollow(FOLLOW_queryStatementExpression_in_subQuerySource9106);
            queryStatementExpression567=queryStatementExpression();
            _fsp--;

            stream_queryStatementExpression.add(queryStatementExpression567.getTree());
            RPAREN568=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_subQuerySource9108); 
            stream_RPAREN.add(RPAREN568);

            Identifier569=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_subQuerySource9110); 
            stream_Identifier.add(Identifier569);


            // AST REWRITE
            // elements: Identifier, queryStatementExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1264:55: -> ^( TOK_SUBQUERY queryStatementExpression Identifier )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1264:58: ^( TOK_SUBQUERY queryStatementExpression Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_1);

                adaptor.addChild(root_1, stream_queryStatementExpression.next());
                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end subQuerySource

    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start whereClause
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1269:1: whereClause : KW_WHERE searchCondition -> ^( TOK_WHERE searchCondition ) ;
    public final whereClause_return whereClause() throws RecognitionException {
        whereClause_return retval = new whereClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_WHERE570=null;
        searchCondition_return searchCondition571 = null;


        CommonTree KW_WHERE570_tree=null;
        RewriteRuleTokenStream stream_KW_WHERE=new RewriteRuleTokenStream(adaptor,"token KW_WHERE");
        RewriteRuleSubtreeStream stream_searchCondition=new RewriteRuleSubtreeStream(adaptor,"rule searchCondition");
         msgs.push("where clause"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1272:5: ( KW_WHERE searchCondition -> ^( TOK_WHERE searchCondition ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1273:5: KW_WHERE searchCondition
            {
            KW_WHERE570=(Token)input.LT(1);
            match(input,KW_WHERE,FOLLOW_KW_WHERE_in_whereClause9153); 
            stream_KW_WHERE.add(KW_WHERE570);

            pushFollow(FOLLOW_searchCondition_in_whereClause9155);
            searchCondition571=searchCondition();
            _fsp--;

            stream_searchCondition.add(searchCondition571.getTree());

            // AST REWRITE
            // elements: searchCondition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1273:30: -> ^( TOK_WHERE searchCondition )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1273:33: ^( TOK_WHERE searchCondition )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_WHERE, "TOK_WHERE"), root_1);

                adaptor.addChild(root_1, stream_searchCondition.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end whereClause

    public static class searchCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start searchCondition
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1276:1: searchCondition : expression ;
    public final searchCondition_return searchCondition() throws RecognitionException {
        searchCondition_return retval = new searchCondition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        expression_return expression572 = null;



         msgs.push("search condition"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1279:5: ( expression )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1280:5: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_searchCondition9194);
            expression572=expression();
            _fsp--;

            adaptor.addChild(root_0, expression572.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end searchCondition

    public static class groupByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start groupByClause
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1286:1: groupByClause : KW_GROUP KW_BY groupByExpression ( COMMA groupByExpression )* -> ^( TOK_GROUPBY ( groupByExpression )+ ) ;
    public final groupByClause_return groupByClause() throws RecognitionException {
        groupByClause_return retval = new groupByClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_GROUP573=null;
        Token KW_BY574=null;
        Token COMMA576=null;
        groupByExpression_return groupByExpression575 = null;

        groupByExpression_return groupByExpression577 = null;


        CommonTree KW_GROUP573_tree=null;
        CommonTree KW_BY574_tree=null;
        CommonTree COMMA576_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_GROUP=new RewriteRuleTokenStream(adaptor,"token KW_GROUP");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_groupByExpression=new RewriteRuleSubtreeStream(adaptor,"rule groupByExpression");
         msgs.push("group by clause"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1289:5: ( KW_GROUP KW_BY groupByExpression ( COMMA groupByExpression )* -> ^( TOK_GROUPBY ( groupByExpression )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1290:5: KW_GROUP KW_BY groupByExpression ( COMMA groupByExpression )*
            {
            KW_GROUP573=(Token)input.LT(1);
            match(input,KW_GROUP,FOLLOW_KW_GROUP_in_groupByClause9228); 
            stream_KW_GROUP.add(KW_GROUP573);

            KW_BY574=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_groupByClause9230); 
            stream_KW_BY.add(KW_BY574);

            pushFollow(FOLLOW_groupByExpression_in_groupByClause9236);
            groupByExpression575=groupByExpression();
            _fsp--;

            stream_groupByExpression.add(groupByExpression575.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1292:5: ( COMMA groupByExpression )*
            loop178:
            do {
                int alt178=2;
                int LA178_0 = input.LA(1);

                if ( (LA178_0==COMMA) ) {
                    alt178=1;
                }


                switch (alt178) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1292:7: COMMA groupByExpression
            	    {
            	    COMMA576=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_groupByClause9244); 
            	    stream_COMMA.add(COMMA576);

            	    pushFollow(FOLLOW_groupByExpression_in_groupByClause9246);
            	    groupByExpression577=groupByExpression();
            	    _fsp--;

            	    stream_groupByExpression.add(groupByExpression577.getTree());

            	    }
            	    break;

            	default :
            	    break loop178;
                }
            } while (true);


            // AST REWRITE
            // elements: groupByExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1293:5: -> ^( TOK_GROUPBY ( groupByExpression )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1293:8: ^( TOK_GROUPBY ( groupByExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_GROUPBY, "TOK_GROUPBY"), root_1);

                if ( !(stream_groupByExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_groupByExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByExpression.next());

                }
                stream_groupByExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end groupByClause

    public static class groupByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start groupByExpression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1296:1: groupByExpression : expression ;
    public final groupByExpression_return groupByExpression() throws RecognitionException {
        groupByExpression_return retval = new groupByExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        expression_return expression578 = null;



         msgs.push("group by expression"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1299:5: ( expression )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1300:5: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_groupByExpression9293);
            expression578=expression();
            _fsp--;

            adaptor.addChild(root_0, expression578.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end groupByExpression

    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start havingClause
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1303:1: havingClause : KW_HAVING havingCondition -> ^( TOK_HAVING havingCondition ) ;
    public final havingClause_return havingClause() throws RecognitionException {
        havingClause_return retval = new havingClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_HAVING579=null;
        havingCondition_return havingCondition580 = null;


        CommonTree KW_HAVING579_tree=null;
        RewriteRuleTokenStream stream_KW_HAVING=new RewriteRuleTokenStream(adaptor,"token KW_HAVING");
        RewriteRuleSubtreeStream stream_havingCondition=new RewriteRuleSubtreeStream(adaptor,"rule havingCondition");
         msgs.push("having clause"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1306:5: ( KW_HAVING havingCondition -> ^( TOK_HAVING havingCondition ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1307:5: KW_HAVING havingCondition
            {
            KW_HAVING579=(Token)input.LT(1);
            match(input,KW_HAVING,FOLLOW_KW_HAVING_in_havingClause9324); 
            stream_KW_HAVING.add(KW_HAVING579);

            pushFollow(FOLLOW_havingCondition_in_havingClause9326);
            havingCondition580=havingCondition();
            _fsp--;

            stream_havingCondition.add(havingCondition580.getTree());

            // AST REWRITE
            // elements: havingCondition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1307:31: -> ^( TOK_HAVING havingCondition )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1307:34: ^( TOK_HAVING havingCondition )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_HAVING, "TOK_HAVING"), root_1);

                adaptor.addChild(root_1, stream_havingCondition.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end havingClause

    public static class havingCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start havingCondition
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1310:1: havingCondition : expression ;
    public final havingCondition_return havingCondition() throws RecognitionException {
        havingCondition_return retval = new havingCondition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        expression_return expression581 = null;



         msgs.push("having condition"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1313:5: ( expression )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1314:5: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_havingCondition9365);
            expression581=expression();
            _fsp--;

            adaptor.addChild(root_0, expression581.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end havingCondition

    public static class orderByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderByClause
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1318:1: orderByClause : KW_ORDER KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_ORDERBY ( columnRefOrder )+ ) ;
    public final orderByClause_return orderByClause() throws RecognitionException {
        orderByClause_return retval = new orderByClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ORDER582=null;
        Token KW_BY583=null;
        Token COMMA585=null;
        columnRefOrder_return columnRefOrder584 = null;

        columnRefOrder_return columnRefOrder586 = null;


        CommonTree KW_ORDER582_tree=null;
        CommonTree KW_BY583_tree=null;
        CommonTree COMMA585_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_ORDER=new RewriteRuleTokenStream(adaptor,"token KW_ORDER");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_columnRefOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnRefOrder");
         msgs.push("order by clause"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1321:5: ( KW_ORDER KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_ORDERBY ( columnRefOrder )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1322:5: KW_ORDER KW_BY columnRefOrder ( COMMA columnRefOrder )*
            {
            KW_ORDER582=(Token)input.LT(1);
            match(input,KW_ORDER,FOLLOW_KW_ORDER_in_orderByClause9397); 
            stream_KW_ORDER.add(KW_ORDER582);

            KW_BY583=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_orderByClause9399); 
            stream_KW_BY.add(KW_BY583);

            pushFollow(FOLLOW_columnRefOrder_in_orderByClause9405);
            columnRefOrder584=columnRefOrder();
            _fsp--;

            stream_columnRefOrder.add(columnRefOrder584.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1324:5: ( COMMA columnRefOrder )*
            loop179:
            do {
                int alt179=2;
                int LA179_0 = input.LA(1);

                if ( (LA179_0==COMMA) ) {
                    alt179=1;
                }


                switch (alt179) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1324:7: COMMA columnRefOrder
            	    {
            	    COMMA585=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_orderByClause9413); 
            	    stream_COMMA.add(COMMA585);

            	    pushFollow(FOLLOW_columnRefOrder_in_orderByClause9415);
            	    columnRefOrder586=columnRefOrder();
            	    _fsp--;

            	    stream_columnRefOrder.add(columnRefOrder586.getTree());

            	    }
            	    break;

            	default :
            	    break loop179;
                }
            } while (true);


            // AST REWRITE
            // elements: columnRefOrder
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1324:30: -> ^( TOK_ORDERBY ( columnRefOrder )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1324:33: ^( TOK_ORDERBY ( columnRefOrder )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ORDERBY, "TOK_ORDERBY"), root_1);

                if ( !(stream_columnRefOrder.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnRefOrder.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnRefOrder.next());

                }
                stream_columnRefOrder.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderByClause

    public static class clusterByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start clusterByClause
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1327:1: clusterByClause : KW_CLUSTER KW_BY expression ( COMMA expression )* -> ^( TOK_CLUSTERBY ( expression )+ ) ;
    public final clusterByClause_return clusterByClause() throws RecognitionException {
        clusterByClause_return retval = new clusterByClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CLUSTER587=null;
        Token KW_BY588=null;
        Token COMMA590=null;
        expression_return expression589 = null;

        expression_return expression591 = null;


        CommonTree KW_CLUSTER587_tree=null;
        CommonTree KW_BY588_tree=null;
        CommonTree COMMA590_tree=null;
        RewriteRuleTokenStream stream_KW_CLUSTER=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTER");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("cluster by clause"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1330:5: ( KW_CLUSTER KW_BY expression ( COMMA expression )* -> ^( TOK_CLUSTERBY ( expression )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1331:5: KW_CLUSTER KW_BY expression ( COMMA expression )*
            {
            KW_CLUSTER587=(Token)input.LT(1);
            match(input,KW_CLUSTER,FOLLOW_KW_CLUSTER_in_clusterByClause9457); 
            stream_KW_CLUSTER.add(KW_CLUSTER587);

            KW_BY588=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_clusterByClause9459); 
            stream_KW_BY.add(KW_BY588);

            pushFollow(FOLLOW_expression_in_clusterByClause9465);
            expression589=expression();
            _fsp--;

            stream_expression.add(expression589.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1333:5: ( COMMA expression )*
            loop180:
            do {
                int alt180=2;
                int LA180_0 = input.LA(1);

                if ( (LA180_0==COMMA) ) {
                    alt180=1;
                }


                switch (alt180) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1333:7: COMMA expression
            	    {
            	    COMMA590=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_clusterByClause9473); 
            	    stream_COMMA.add(COMMA590);

            	    pushFollow(FOLLOW_expression_in_clusterByClause9475);
            	    expression591=expression();
            	    _fsp--;

            	    stream_expression.add(expression591.getTree());

            	    }
            	    break;

            	default :
            	    break loop180;
                }
            } while (true);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1333:27: -> ^( TOK_CLUSTERBY ( expression )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1333:30: ^( TOK_CLUSTERBY ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CLUSTERBY, "TOK_CLUSTERBY"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.next());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end clusterByClause

    public static class distributeByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start distributeByClause
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1336:1: distributeByClause : KW_DISTRIBUTE KW_BY expression ( COMMA expression )* -> ^( TOK_DISTRIBUTEBY ( expression )+ ) ;
    public final distributeByClause_return distributeByClause() throws RecognitionException {
        distributeByClause_return retval = new distributeByClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_DISTRIBUTE592=null;
        Token KW_BY593=null;
        Token COMMA595=null;
        expression_return expression594 = null;

        expression_return expression596 = null;


        CommonTree KW_DISTRIBUTE592_tree=null;
        CommonTree KW_BY593_tree=null;
        CommonTree COMMA595_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_DISTRIBUTE=new RewriteRuleTokenStream(adaptor,"token KW_DISTRIBUTE");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("distribute by clause"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1339:5: ( KW_DISTRIBUTE KW_BY expression ( COMMA expression )* -> ^( TOK_DISTRIBUTEBY ( expression )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1340:5: KW_DISTRIBUTE KW_BY expression ( COMMA expression )*
            {
            KW_DISTRIBUTE592=(Token)input.LT(1);
            match(input,KW_DISTRIBUTE,FOLLOW_KW_DISTRIBUTE_in_distributeByClause9518); 
            stream_KW_DISTRIBUTE.add(KW_DISTRIBUTE592);

            KW_BY593=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_distributeByClause9520); 
            stream_KW_BY.add(KW_BY593);

            pushFollow(FOLLOW_expression_in_distributeByClause9526);
            expression594=expression();
            _fsp--;

            stream_expression.add(expression594.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1341:16: ( COMMA expression )*
            loop181:
            do {
                int alt181=2;
                int LA181_0 = input.LA(1);

                if ( (LA181_0==COMMA) ) {
                    alt181=1;
                }


                switch (alt181) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1341:17: COMMA expression
            	    {
            	    COMMA595=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_distributeByClause9529); 
            	    stream_COMMA.add(COMMA595);

            	    pushFollow(FOLLOW_expression_in_distributeByClause9531);
            	    expression596=expression();
            	    _fsp--;

            	    stream_expression.add(expression596.getTree());

            	    }
            	    break;

            	default :
            	    break loop181;
                }
            } while (true);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1341:36: -> ^( TOK_DISTRIBUTEBY ( expression )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1341:39: ^( TOK_DISTRIBUTEBY ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DISTRIBUTEBY, "TOK_DISTRIBUTEBY"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.next());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end distributeByClause

    public static class sortByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start sortByClause
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1344:1: sortByClause : KW_SORT KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_SORTBY ( columnRefOrder )+ ) ;
    public final sortByClause_return sortByClause() throws RecognitionException {
        sortByClause_return retval = new sortByClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_SORT597=null;
        Token KW_BY598=null;
        Token COMMA600=null;
        columnRefOrder_return columnRefOrder599 = null;

        columnRefOrder_return columnRefOrder601 = null;


        CommonTree KW_SORT597_tree=null;
        CommonTree KW_BY598_tree=null;
        CommonTree COMMA600_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_SORT=new RewriteRuleTokenStream(adaptor,"token KW_SORT");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_columnRefOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnRefOrder");
         msgs.push("sort by clause"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1347:5: ( KW_SORT KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_SORTBY ( columnRefOrder )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1348:5: KW_SORT KW_BY columnRefOrder ( COMMA columnRefOrder )*
            {
            KW_SORT597=(Token)input.LT(1);
            match(input,KW_SORT,FOLLOW_KW_SORT_in_sortByClause9573); 
            stream_KW_SORT.add(KW_SORT597);

            KW_BY598=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_sortByClause9575); 
            stream_KW_BY.add(KW_BY598);

            pushFollow(FOLLOW_columnRefOrder_in_sortByClause9581);
            columnRefOrder599=columnRefOrder();
            _fsp--;

            stream_columnRefOrder.add(columnRefOrder599.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1350:5: ( COMMA columnRefOrder )*
            loop182:
            do {
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==COMMA) ) {
                    alt182=1;
                }


                switch (alt182) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1350:7: COMMA columnRefOrder
            	    {
            	    COMMA600=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_sortByClause9589); 
            	    stream_COMMA.add(COMMA600);

            	    pushFollow(FOLLOW_columnRefOrder_in_sortByClause9591);
            	    columnRefOrder601=columnRefOrder();
            	    _fsp--;

            	    stream_columnRefOrder.add(columnRefOrder601.getTree());

            	    }
            	    break;

            	default :
            	    break loop182;
                }
            } while (true);


            // AST REWRITE
            // elements: columnRefOrder
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1350:30: -> ^( TOK_SORTBY ( columnRefOrder )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1350:33: ^( TOK_SORTBY ( columnRefOrder )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SORTBY, "TOK_SORTBY"), root_1);

                if ( !(stream_columnRefOrder.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnRefOrder.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnRefOrder.next());

                }
                stream_columnRefOrder.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end sortByClause

    public static class function_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start function
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1354:1: function : functionName LPAREN ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? ) RPAREN -> {$star != null}? ^( TOK_FUNCTIONSTAR functionName ) -> {$dist == null}? ^( TOK_FUNCTION functionName ( ( expression )+ )? ) -> ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? ) ;
    public final function_return function() throws RecognitionException {
        function_return retval = new function_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token star=null;
        Token dist=null;
        Token LPAREN603=null;
        Token COMMA605=null;
        Token RPAREN607=null;
        functionName_return functionName602 = null;

        expression_return expression604 = null;

        expression_return expression606 = null;


        CommonTree star_tree=null;
        CommonTree dist_tree=null;
        CommonTree LPAREN603_tree=null;
        CommonTree COMMA605_tree=null;
        CommonTree RPAREN607_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_DISTINCT=new RewriteRuleTokenStream(adaptor,"token KW_DISTINCT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_functionName=new RewriteRuleSubtreeStream(adaptor,"rule functionName");
         msgs.push("function specification"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1357:5: ( functionName LPAREN ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? ) RPAREN -> {$star != null}? ^( TOK_FUNCTIONSTAR functionName ) -> {$dist == null}? ^( TOK_FUNCTION functionName ( ( expression )+ )? ) -> ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1358:5: functionName LPAREN ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? ) RPAREN
            {
            pushFollow(FOLLOW_functionName_in_function9634);
            functionName602=functionName();
            _fsp--;

            stream_functionName.add(functionName602.getTree());
            LPAREN603=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_function9640); 
            stream_LPAREN.add(LPAREN603);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1360:7: ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? )
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==STAR) ) {
                alt186=1;
            }
            else if ( (LA186_0==StringLiteral||LA186_0==KW_IF||LA186_0==KW_NOT||LA186_0==Identifier||(LA186_0>=LPAREN && LA186_0<=RPAREN)||LA186_0==Number||LA186_0==KW_MAP||LA186_0==KW_ARRAY||(LA186_0>=KW_STRUCT && LA186_0<=KW_UNIONTYPE)||LA186_0==KW_DISTINCT||LA186_0==PLUS||(LA186_0>=KW_CAST && LA186_0<=KW_CASE)||LA186_0==CharSetName||LA186_0==KW_NULL||(LA186_0>=MINUS && LA186_0<=TILDE)||(LA186_0>=KW_TRUE && LA186_0<=KW_FALSE)) ) {
                alt186=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1360:7: ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? )", 186, 0, input);

                throw nvae;
            }
            switch (alt186) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1361:9: (star= STAR )
                    {
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1361:9: (star= STAR )
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1361:10: star= STAR
                    {
                    star=(Token)input.LT(1);
                    match(input,STAR,FOLLOW_STAR_in_function9661); 
                    stream_STAR.add(star);


                    }


                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1362:11: (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )?
                    {
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1362:11: (dist= KW_DISTINCT )?
                    int alt183=2;
                    int LA183_0 = input.LA(1);

                    if ( (LA183_0==KW_DISTINCT) ) {
                        alt183=1;
                    }
                    switch (alt183) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1362:12: dist= KW_DISTINCT
                            {
                            dist=(Token)input.LT(1);
                            match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_function9677); 
                            stream_KW_DISTINCT.add(dist);


                            }
                            break;

                    }

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1362:31: ( expression ( COMMA expression )* )?
                    int alt185=2;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==StringLiteral||LA185_0==KW_IF||LA185_0==KW_NOT||LA185_0==Identifier||LA185_0==LPAREN||LA185_0==Number||LA185_0==KW_MAP||LA185_0==KW_ARRAY||(LA185_0>=KW_STRUCT && LA185_0<=KW_UNIONTYPE)||LA185_0==PLUS||(LA185_0>=KW_CAST && LA185_0<=KW_CASE)||LA185_0==CharSetName||LA185_0==KW_NULL||(LA185_0>=MINUS && LA185_0<=TILDE)||(LA185_0>=KW_TRUE && LA185_0<=KW_FALSE)) ) {
                        alt185=1;
                    }
                    switch (alt185) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1362:32: expression ( COMMA expression )*
                            {
                            pushFollow(FOLLOW_expression_in_function9682);
                            expression604=expression();
                            _fsp--;

                            stream_expression.add(expression604.getTree());
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1362:43: ( COMMA expression )*
                            loop184:
                            do {
                                int alt184=2;
                                int LA184_0 = input.LA(1);

                                if ( (LA184_0==COMMA) ) {
                                    alt184=1;
                                }


                                switch (alt184) {
                            	case 1 :
                            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1362:44: COMMA expression
                            	    {
                            	    COMMA605=(Token)input.LT(1);
                            	    match(input,COMMA,FOLLOW_COMMA_in_function9685); 
                            	    stream_COMMA.add(COMMA605);

                            	    pushFollow(FOLLOW_expression_in_function9687);
                            	    expression606=expression();
                            	    _fsp--;

                            	    stream_expression.add(expression606.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop184;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RPAREN607=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_function9705); 
            stream_RPAREN.add(RPAREN607);


            // AST REWRITE
            // elements: functionName, functionName, expression, expression, functionName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1364:12: -> {$star != null}? ^( TOK_FUNCTIONSTAR functionName )
            if (star != null) {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1364:32: ^( TOK_FUNCTIONSTAR functionName )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTIONSTAR, "TOK_FUNCTIONSTAR"), root_1);

                adaptor.addChild(root_1, stream_functionName.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1365:12: -> {$dist == null}? ^( TOK_FUNCTION functionName ( ( expression )+ )? )
            if (dist == null) {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1365:32: ^( TOK_FUNCTION functionName ( ( expression )+ )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_functionName.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1365:60: ( ( expression )+ )?
                if ( stream_expression.hasNext() ) {
                    if ( !(stream_expression.hasNext()) ) {
                        throw new RewriteEarlyExitException();
                    }
                    while ( stream_expression.hasNext() ) {
                        adaptor.addChild(root_1, stream_expression.next());

                    }
                    stream_expression.reset();

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1366:29: -> ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1366:32: ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTIONDI, "TOK_FUNCTIONDI"), root_1);

                adaptor.addChild(root_1, stream_functionName.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1366:62: ( ( expression )+ )?
                if ( stream_expression.hasNext() ) {
                    if ( !(stream_expression.hasNext()) ) {
                        throw new RewriteEarlyExitException();
                    }
                    while ( stream_expression.hasNext() ) {
                        adaptor.addChild(root_1, stream_expression.next());

                    }
                    stream_expression.reset();

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end function

    public static class functionName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start functionName
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1369:1: functionName : ( Identifier | KW_IF | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE );
    public final functionName_return functionName() throws RecognitionException {
        functionName_return retval = new functionName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set608=null;

        CommonTree set608_tree=null;

         msgs.push("function name"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1372:5: ( Identifier | KW_IF | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set608=(Token)input.LT(1);
            if ( input.LA(1)==KW_IF||input.LA(1)==Identifier||input.LA(1)==KW_MAP||input.LA(1)==KW_ARRAY||(input.LA(1)>=KW_STRUCT && input.LA(1)<=KW_UNIONTYPE) ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set608));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_functionName0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end functionName

    public static class castExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start castExpression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1376:1: castExpression : KW_CAST LPAREN expression KW_AS primitiveType RPAREN -> ^( TOK_FUNCTION primitiveType expression ) ;
    public final castExpression_return castExpression() throws RecognitionException {
        castExpression_return retval = new castExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CAST609=null;
        Token LPAREN610=null;
        Token KW_AS612=null;
        Token RPAREN614=null;
        expression_return expression611 = null;

        primitiveType_return primitiveType613 = null;


        CommonTree KW_CAST609_tree=null;
        CommonTree LPAREN610_tree=null;
        CommonTree KW_AS612_tree=null;
        CommonTree RPAREN614_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_CAST=new RewriteRuleTokenStream(adaptor,"token KW_CAST");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
         msgs.push("cast expression"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1379:5: ( KW_CAST LPAREN expression KW_AS primitiveType RPAREN -> ^( TOK_FUNCTION primitiveType expression ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1380:5: KW_CAST LPAREN expression KW_AS primitiveType RPAREN
            {
            KW_CAST609=(Token)input.LT(1);
            match(input,KW_CAST,FOLLOW_KW_CAST_in_castExpression9867); 
            stream_KW_CAST.add(KW_CAST609);

            LPAREN610=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_castExpression9873); 
            stream_LPAREN.add(LPAREN610);

            pushFollow(FOLLOW_expression_in_castExpression9885);
            expression611=expression();
            _fsp--;

            stream_expression.add(expression611.getTree());
            KW_AS612=(Token)input.LT(1);
            match(input,KW_AS,FOLLOW_KW_AS_in_castExpression9897); 
            stream_KW_AS.add(KW_AS612);

            pushFollow(FOLLOW_primitiveType_in_castExpression9909);
            primitiveType613=primitiveType();
            _fsp--;

            stream_primitiveType.add(primitiveType613.getTree());
            RPAREN614=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_castExpression9915); 
            stream_RPAREN.add(RPAREN614);


            // AST REWRITE
            // elements: expression, primitiveType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1385:12: -> ^( TOK_FUNCTION primitiveType expression )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1385:15: ^( TOK_FUNCTION primitiveType expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_primitiveType.next());
                adaptor.addChild(root_1, stream_expression.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end castExpression

    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start caseExpression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1388:1: caseExpression : KW_CASE expression ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_CASE ( expression )* ) ;
    public final caseExpression_return caseExpression() throws RecognitionException {
        caseExpression_return retval = new caseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CASE615=null;
        Token KW_WHEN617=null;
        Token KW_THEN619=null;
        Token KW_ELSE621=null;
        Token KW_END623=null;
        expression_return expression616 = null;

        expression_return expression618 = null;

        expression_return expression620 = null;

        expression_return expression622 = null;


        CommonTree KW_CASE615_tree=null;
        CommonTree KW_WHEN617_tree=null;
        CommonTree KW_THEN619_tree=null;
        CommonTree KW_ELSE621_tree=null;
        CommonTree KW_END623_tree=null;
        RewriteRuleTokenStream stream_KW_THEN=new RewriteRuleTokenStream(adaptor,"token KW_THEN");
        RewriteRuleTokenStream stream_KW_CASE=new RewriteRuleTokenStream(adaptor,"token KW_CASE");
        RewriteRuleTokenStream stream_KW_WHEN=new RewriteRuleTokenStream(adaptor,"token KW_WHEN");
        RewriteRuleTokenStream stream_KW_END=new RewriteRuleTokenStream(adaptor,"token KW_END");
        RewriteRuleTokenStream stream_KW_ELSE=new RewriteRuleTokenStream(adaptor,"token KW_ELSE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("case expression"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1391:5: ( KW_CASE expression ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_CASE ( expression )* ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1392:5: KW_CASE expression ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END
            {
            KW_CASE615=(Token)input.LT(1);
            match(input,KW_CASE,FOLLOW_KW_CASE_in_caseExpression9956); 
            stream_KW_CASE.add(KW_CASE615);

            pushFollow(FOLLOW_expression_in_caseExpression9958);
            expression616=expression();
            _fsp--;

            stream_expression.add(expression616.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1393:5: ( KW_WHEN expression KW_THEN expression )+
            int cnt187=0;
            loop187:
            do {
                int alt187=2;
                int LA187_0 = input.LA(1);

                if ( (LA187_0==KW_WHEN) ) {
                    alt187=1;
                }


                switch (alt187) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1393:6: KW_WHEN expression KW_THEN expression
            	    {
            	    KW_WHEN617=(Token)input.LT(1);
            	    match(input,KW_WHEN,FOLLOW_KW_WHEN_in_caseExpression9965); 
            	    stream_KW_WHEN.add(KW_WHEN617);

            	    pushFollow(FOLLOW_expression_in_caseExpression9967);
            	    expression618=expression();
            	    _fsp--;

            	    stream_expression.add(expression618.getTree());
            	    KW_THEN619=(Token)input.LT(1);
            	    match(input,KW_THEN,FOLLOW_KW_THEN_in_caseExpression9969); 
            	    stream_KW_THEN.add(KW_THEN619);

            	    pushFollow(FOLLOW_expression_in_caseExpression9971);
            	    expression620=expression();
            	    _fsp--;

            	    stream_expression.add(expression620.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt187 >= 1 ) break loop187;
                        EarlyExitException eee =
                            new EarlyExitException(187, input);
                        throw eee;
                }
                cnt187++;
            } while (true);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1394:5: ( KW_ELSE expression )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==KW_ELSE) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1394:6: KW_ELSE expression
                    {
                    KW_ELSE621=(Token)input.LT(1);
                    match(input,KW_ELSE,FOLLOW_KW_ELSE_in_caseExpression9980); 
                    stream_KW_ELSE.add(KW_ELSE621);

                    pushFollow(FOLLOW_expression_in_caseExpression9982);
                    expression622=expression();
                    _fsp--;

                    stream_expression.add(expression622.getTree());

                    }
                    break;

            }

            KW_END623=(Token)input.LT(1);
            match(input,KW_END,FOLLOW_KW_END_in_caseExpression9990); 
            stream_KW_END.add(KW_END623);


            // AST REWRITE
            // elements: expression, KW_CASE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1395:12: -> ^( TOK_FUNCTION KW_CASE ( expression )* )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1395:15: ^( TOK_FUNCTION KW_CASE ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_KW_CASE.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1395:38: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.next());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end caseExpression

    public static class whenExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start whenExpression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1398:1: whenExpression : KW_CASE ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_WHEN ( expression )* ) ;
    public final whenExpression_return whenExpression() throws RecognitionException {
        whenExpression_return retval = new whenExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CASE624=null;
        Token KW_WHEN625=null;
        Token KW_THEN627=null;
        Token KW_ELSE629=null;
        Token KW_END631=null;
        expression_return expression626 = null;

        expression_return expression628 = null;

        expression_return expression630 = null;


        CommonTree KW_CASE624_tree=null;
        CommonTree KW_WHEN625_tree=null;
        CommonTree KW_THEN627_tree=null;
        CommonTree KW_ELSE629_tree=null;
        CommonTree KW_END631_tree=null;
        RewriteRuleTokenStream stream_KW_THEN=new RewriteRuleTokenStream(adaptor,"token KW_THEN");
        RewriteRuleTokenStream stream_KW_CASE=new RewriteRuleTokenStream(adaptor,"token KW_CASE");
        RewriteRuleTokenStream stream_KW_WHEN=new RewriteRuleTokenStream(adaptor,"token KW_WHEN");
        RewriteRuleTokenStream stream_KW_END=new RewriteRuleTokenStream(adaptor,"token KW_END");
        RewriteRuleTokenStream stream_KW_ELSE=new RewriteRuleTokenStream(adaptor,"token KW_ELSE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("case expression"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1401:5: ( KW_CASE ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_WHEN ( expression )* ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1402:5: KW_CASE ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END
            {
            KW_CASE624=(Token)input.LT(1);
            match(input,KW_CASE,FOLLOW_KW_CASE_in_whenExpression10032); 
            stream_KW_CASE.add(KW_CASE624);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1403:6: ( KW_WHEN expression KW_THEN expression )+
            int cnt189=0;
            loop189:
            do {
                int alt189=2;
                int LA189_0 = input.LA(1);

                if ( (LA189_0==KW_WHEN) ) {
                    alt189=1;
                }


                switch (alt189) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1403:8: KW_WHEN expression KW_THEN expression
            	    {
            	    KW_WHEN625=(Token)input.LT(1);
            	    match(input,KW_WHEN,FOLLOW_KW_WHEN_in_whenExpression10041); 
            	    stream_KW_WHEN.add(KW_WHEN625);

            	    pushFollow(FOLLOW_expression_in_whenExpression10043);
            	    expression626=expression();
            	    _fsp--;

            	    stream_expression.add(expression626.getTree());
            	    KW_THEN627=(Token)input.LT(1);
            	    match(input,KW_THEN,FOLLOW_KW_THEN_in_whenExpression10045); 
            	    stream_KW_THEN.add(KW_THEN627);

            	    pushFollow(FOLLOW_expression_in_whenExpression10047);
            	    expression628=expression();
            	    _fsp--;

            	    stream_expression.add(expression628.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt189 >= 1 ) break loop189;
                        EarlyExitException eee =
                            new EarlyExitException(189, input);
                        throw eee;
                }
                cnt189++;
            } while (true);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1404:5: ( KW_ELSE expression )?
            int alt190=2;
            int LA190_0 = input.LA(1);

            if ( (LA190_0==KW_ELSE) ) {
                alt190=1;
            }
            switch (alt190) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1404:6: KW_ELSE expression
                    {
                    KW_ELSE629=(Token)input.LT(1);
                    match(input,KW_ELSE,FOLLOW_KW_ELSE_in_whenExpression10056); 
                    stream_KW_ELSE.add(KW_ELSE629);

                    pushFollow(FOLLOW_expression_in_whenExpression10058);
                    expression630=expression();
                    _fsp--;

                    stream_expression.add(expression630.getTree());

                    }
                    break;

            }

            KW_END631=(Token)input.LT(1);
            match(input,KW_END,FOLLOW_KW_END_in_whenExpression10066); 
            stream_KW_END.add(KW_END631);


            // AST REWRITE
            // elements: KW_WHEN, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1405:12: -> ^( TOK_FUNCTION KW_WHEN ( expression )* )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1405:15: ^( TOK_FUNCTION KW_WHEN ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_KW_WHEN.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1405:38: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.next());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end whenExpression

    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start constant
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1408:1: constant : ( Number | StringLiteral | charSetStringLiteral | booleanValue );
    public final constant_return constant() throws RecognitionException {
        constant_return retval = new constant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Number632=null;
        Token StringLiteral633=null;
        charSetStringLiteral_return charSetStringLiteral634 = null;

        booleanValue_return booleanValue635 = null;


        CommonTree Number632_tree=null;
        CommonTree StringLiteral633_tree=null;

         msgs.push("constant"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1411:5: ( Number | StringLiteral | charSetStringLiteral | booleanValue )
            int alt191=4;
            switch ( input.LA(1) ) {
            case Number:
                {
                alt191=1;
                }
                break;
            case StringLiteral:
                {
                alt191=2;
                }
                break;
            case CharSetName:
                {
                alt191=3;
                }
                break;
            case KW_TRUE:
            case KW_FALSE:
                {
                alt191=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1408:1: constant : ( Number | StringLiteral | charSetStringLiteral | booleanValue );", 191, 0, input);

                throw nvae;
            }

            switch (alt191) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1412:5: Number
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Number632=(Token)input.LT(1);
                    match(input,Number,FOLLOW_Number_in_constant10108); 
                    Number632_tree = (CommonTree)adaptor.create(Number632);
                    adaptor.addChild(root_0, Number632_tree);


                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1413:7: StringLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    StringLiteral633=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_constant10116); 
                    StringLiteral633_tree = (CommonTree)adaptor.create(StringLiteral633);
                    adaptor.addChild(root_0, StringLiteral633_tree);


                    }
                    break;
                case 3 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1414:7: charSetStringLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_charSetStringLiteral_in_constant10124);
                    charSetStringLiteral634=charSetStringLiteral();
                    _fsp--;

                    adaptor.addChild(root_0, charSetStringLiteral634.getTree());

                    }
                    break;
                case 4 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1415:7: booleanValue
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_booleanValue_in_constant10132);
                    booleanValue635=booleanValue();
                    _fsp--;

                    adaptor.addChild(root_0, booleanValue635.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end constant

    public static class charSetStringLiteral_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start charSetStringLiteral
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1418:1: charSetStringLiteral : csName= CharSetName csLiteral= CharSetLiteral -> ^( TOK_CHARSETLITERAL $csName $csLiteral) ;
    public final charSetStringLiteral_return charSetStringLiteral() throws RecognitionException {
        charSetStringLiteral_return retval = new charSetStringLiteral_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token csName=null;
        Token csLiteral=null;

        CommonTree csName_tree=null;
        CommonTree csLiteral_tree=null;
        RewriteRuleTokenStream stream_CharSetLiteral=new RewriteRuleTokenStream(adaptor,"token CharSetLiteral");
        RewriteRuleTokenStream stream_CharSetName=new RewriteRuleTokenStream(adaptor,"token CharSetName");

         msgs.push("character string literal"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1421:5: (csName= CharSetName csLiteral= CharSetLiteral -> ^( TOK_CHARSETLITERAL $csName $csLiteral) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1422:5: csName= CharSetName csLiteral= CharSetLiteral
            {
            csName=(Token)input.LT(1);
            match(input,CharSetName,FOLLOW_CharSetName_in_charSetStringLiteral10165); 
            stream_CharSetName.add(csName);

            csLiteral=(Token)input.LT(1);
            match(input,CharSetLiteral,FOLLOW_CharSetLiteral_in_charSetStringLiteral10169); 
            stream_CharSetLiteral.add(csLiteral);


            // AST REWRITE
            // elements: csLiteral, csName
            // token labels: csName, csLiteral
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_csName=new RewriteRuleTokenStream(adaptor,"token csName",csName);
            RewriteRuleTokenStream stream_csLiteral=new RewriteRuleTokenStream(adaptor,"token csLiteral",csLiteral);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1422:49: -> ^( TOK_CHARSETLITERAL $csName $csLiteral)
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1422:52: ^( TOK_CHARSETLITERAL $csName $csLiteral)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CHARSETLITERAL, "TOK_CHARSETLITERAL"), root_1);

                adaptor.addChild(root_1, stream_csName.next());
                adaptor.addChild(root_1, stream_csLiteral.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end charSetStringLiteral

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1425:1: expression : precedenceOrExpression ;
    public final expression_return expression() throws RecognitionException {
        expression_return retval = new expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceOrExpression_return precedenceOrExpression636 = null;



         msgs.push("expression specification"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1428:5: ( precedenceOrExpression )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1429:5: precedenceOrExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceOrExpression_in_expression10212);
            precedenceOrExpression636=precedenceOrExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceOrExpression636.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expression

    public static class atomExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start atomExpression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1432:1: atomExpression : ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN expression RPAREN );
    public final atomExpression_return atomExpression() throws RecognitionException {
        atomExpression_return retval = new atomExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_NULL637=null;
        Token LPAREN644=null;
        Token RPAREN646=null;
        constant_return constant638 = null;

        function_return function639 = null;

        castExpression_return castExpression640 = null;

        caseExpression_return caseExpression641 = null;

        whenExpression_return whenExpression642 = null;

        tableOrColumn_return tableOrColumn643 = null;

        expression_return expression645 = null;


        CommonTree KW_NULL637_tree=null;
        CommonTree LPAREN644_tree=null;
        CommonTree RPAREN646_tree=null;
        RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1433:5: ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN expression RPAREN )
            int alt192=8;
            switch ( input.LA(1) ) {
            case KW_NULL:
                {
                alt192=1;
                }
                break;
            case StringLiteral:
            case Number:
            case CharSetName:
            case KW_TRUE:
            case KW_FALSE:
                {
                alt192=2;
                }
                break;
            case Identifier:
                {
                int LA192_7 = input.LA(2);

                if ( (LA192_7==EOF||LA192_7==Identifier||LA192_7==KW_LIKE||(LA192_7>=RPAREN && LA192_7<=KW_AS)||LA192_7==COMMA||LA192_7==DOT||LA192_7==KW_DESC||(LA192_7>=KW_FROM && LA192_7<=KW_IN)||(LA192_7>=KW_RECORDWRITER && LA192_7<=KW_ROW)||LA192_7==EQUAL||LA192_7==KW_MAP||LA192_7==KW_ASC||(LA192_7>=LESSTHAN && LA192_7<=GREATERTHAN)||LA192_7==KW_UNION||LA192_7==KW_INSERT||(LA192_7>=KW_LIMIT && LA192_7<=KW_SELECT)||(LA192_7>=KW_USING && LA192_7<=PLUS)||LA192_7==KW_REDUCE||(LA192_7>=KW_JOIN && LA192_7<=KW_LEFT)||(LA192_7>=KW_RIGHT && LA192_7<=KW_FULL)||(LA192_7>=KW_WHERE && LA192_7<=KW_SORT)||(LA192_7>=KW_WHEN && LA192_7<=KW_END)||(LA192_7>=LSQUARE && LA192_7<=MINUS)||(LA192_7>=KW_IS && LA192_7<=KW_OR)) ) {
                    alt192=7;
                }
                else if ( (LA192_7==LPAREN) ) {
                    alt192=3;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1432:1: atomExpression : ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN expression RPAREN );", 192, 7, input);

                    throw nvae;
                }
                }
                break;
            case KW_CAST:
                {
                alt192=4;
                }
                break;
            case KW_CASE:
                {
                int LA192_9 = input.LA(2);

                if ( (LA192_9==KW_WHEN) ) {
                    alt192=6;
                }
                else if ( (LA192_9==StringLiteral||LA192_9==KW_IF||LA192_9==KW_NOT||LA192_9==Identifier||LA192_9==LPAREN||LA192_9==Number||LA192_9==KW_MAP||LA192_9==KW_ARRAY||(LA192_9>=KW_STRUCT && LA192_9<=KW_UNIONTYPE)||LA192_9==PLUS||(LA192_9>=KW_CAST && LA192_9<=KW_CASE)||LA192_9==CharSetName||LA192_9==KW_NULL||(LA192_9>=MINUS && LA192_9<=TILDE)||(LA192_9>=KW_TRUE && LA192_9<=KW_FALSE)) ) {
                    alt192=5;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1432:1: atomExpression : ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN expression RPAREN );", 192, 9, input);

                    throw nvae;
                }
                }
                break;
            case KW_IF:
            case KW_MAP:
            case KW_ARRAY:
            case KW_STRUCT:
            case KW_UNIONTYPE:
                {
                alt192=3;
                }
                break;
            case LPAREN:
                {
                alt192=8;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1432:1: atomExpression : ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN expression RPAREN );", 192, 0, input);

                throw nvae;
            }

            switch (alt192) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1434:5: KW_NULL
                    {
                    KW_NULL637=(Token)input.LT(1);
                    match(input,KW_NULL,FOLLOW_KW_NULL_in_atomExpression10233); 
                    stream_KW_NULL.add(KW_NULL637);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1434:13: -> TOK_NULL
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_NULL, "TOK_NULL"));

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1435:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_atomExpression10245);
                    constant638=constant();
                    _fsp--;

                    adaptor.addChild(root_0, constant638.getTree());

                    }
                    break;
                case 3 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1436:7: function
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_function_in_atomExpression10253);
                    function639=function();
                    _fsp--;

                    adaptor.addChild(root_0, function639.getTree());

                    }
                    break;
                case 4 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1437:7: castExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_atomExpression10261);
                    castExpression640=castExpression();
                    _fsp--;

                    adaptor.addChild(root_0, castExpression640.getTree());

                    }
                    break;
                case 5 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1438:7: caseExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_caseExpression_in_atomExpression10269);
                    caseExpression641=caseExpression();
                    _fsp--;

                    adaptor.addChild(root_0, caseExpression641.getTree());

                    }
                    break;
                case 6 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1439:7: whenExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_whenExpression_in_atomExpression10277);
                    whenExpression642=whenExpression();
                    _fsp--;

                    adaptor.addChild(root_0, whenExpression642.getTree());

                    }
                    break;
                case 7 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1440:7: tableOrColumn
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_tableOrColumn_in_atomExpression10285);
                    tableOrColumn643=tableOrColumn();
                    _fsp--;

                    adaptor.addChild(root_0, tableOrColumn643.getTree());

                    }
                    break;
                case 8 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1441:7: LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN644=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_atomExpression10293); 
                    pushFollow(FOLLOW_expression_in_atomExpression10296);
                    expression645=expression();
                    _fsp--;

                    adaptor.addChild(root_0, expression645.getTree());
                    RPAREN646=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_atomExpression10298); 

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end atomExpression

    public static class precedenceFieldExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceFieldExpression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1445:1: precedenceFieldExpression : atomExpression ( ( LSQUARE expression RSQUARE ) | ( DOT Identifier ) )* ;
    public final precedenceFieldExpression_return precedenceFieldExpression() throws RecognitionException {
        precedenceFieldExpression_return retval = new precedenceFieldExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LSQUARE648=null;
        Token RSQUARE650=null;
        Token DOT651=null;
        Token Identifier652=null;
        atomExpression_return atomExpression647 = null;

        expression_return expression649 = null;


        CommonTree LSQUARE648_tree=null;
        CommonTree RSQUARE650_tree=null;
        CommonTree DOT651_tree=null;
        CommonTree Identifier652_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1446:5: ( atomExpression ( ( LSQUARE expression RSQUARE ) | ( DOT Identifier ) )* )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1447:5: atomExpression ( ( LSQUARE expression RSQUARE ) | ( DOT Identifier ) )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_atomExpression_in_precedenceFieldExpression10321);
            atomExpression647=atomExpression();
            _fsp--;

            adaptor.addChild(root_0, atomExpression647.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1447:20: ( ( LSQUARE expression RSQUARE ) | ( DOT Identifier ) )*
            loop193:
            do {
                int alt193=3;
                int LA193_0 = input.LA(1);

                if ( (LA193_0==LSQUARE) ) {
                    alt193=1;
                }
                else if ( (LA193_0==DOT) ) {
                    alt193=2;
                }


                switch (alt193) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1447:21: ( LSQUARE expression RSQUARE )
            	    {
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1447:21: ( LSQUARE expression RSQUARE )
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1447:22: LSQUARE expression RSQUARE
            	    {
            	    LSQUARE648=(Token)input.LT(1);
            	    match(input,LSQUARE,FOLLOW_LSQUARE_in_precedenceFieldExpression10325); 
            	    LSQUARE648_tree = (CommonTree)adaptor.create(LSQUARE648);
            	    root_0 = (CommonTree)adaptor.becomeRoot(LSQUARE648_tree, root_0);

            	    pushFollow(FOLLOW_expression_in_precedenceFieldExpression10328);
            	    expression649=expression();
            	    _fsp--;

            	    adaptor.addChild(root_0, expression649.getTree());
            	    RSQUARE650=(Token)input.LT(1);
            	    match(input,RSQUARE,FOLLOW_RSQUARE_in_precedenceFieldExpression10330); 

            	    }


            	    }
            	    break;
            	case 2 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1447:54: ( DOT Identifier )
            	    {
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1447:54: ( DOT Identifier )
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1447:55: DOT Identifier
            	    {
            	    DOT651=(Token)input.LT(1);
            	    match(input,DOT,FOLLOW_DOT_in_precedenceFieldExpression10337); 
            	    DOT651_tree = (CommonTree)adaptor.create(DOT651);
            	    root_0 = (CommonTree)adaptor.becomeRoot(DOT651_tree, root_0);

            	    Identifier652=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_precedenceFieldExpression10340); 
            	    Identifier652_tree = (CommonTree)adaptor.create(Identifier652);
            	    adaptor.addChild(root_0, Identifier652_tree);


            	    }


            	    }
            	    break;

            	default :
            	    break loop193;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceFieldExpression

    public static class precedenceUnaryOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceUnaryOperator
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1450:1: precedenceUnaryOperator : ( PLUS | MINUS | TILDE );
    public final precedenceUnaryOperator_return precedenceUnaryOperator() throws RecognitionException {
        precedenceUnaryOperator_return retval = new precedenceUnaryOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set653=null;

        CommonTree set653_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1451:5: ( PLUS | MINUS | TILDE )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set653=(Token)input.LT(1);
            if ( input.LA(1)==PLUS||(input.LA(1)>=MINUS && input.LA(1)<=TILDE) ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set653));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_precedenceUnaryOperator0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceUnaryOperator

    public static class nullCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start nullCondition
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1455:1: nullCondition : ( KW_NULL -> ^( TOK_ISNULL ) | KW_NOT KW_NULL -> ^( TOK_ISNOTNULL ) );
    public final nullCondition_return nullCondition() throws RecognitionException {
        nullCondition_return retval = new nullCondition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_NULL654=null;
        Token KW_NOT655=null;
        Token KW_NULL656=null;

        CommonTree KW_NULL654_tree=null;
        CommonTree KW_NOT655_tree=null;
        CommonTree KW_NULL656_tree=null;
        RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1456:5: ( KW_NULL -> ^( TOK_ISNULL ) | KW_NOT KW_NULL -> ^( TOK_ISNOTNULL ) )
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==KW_NULL) ) {
                alt194=1;
            }
            else if ( (LA194_0==KW_NOT) ) {
                alt194=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1455:1: nullCondition : ( KW_NULL -> ^( TOK_ISNULL ) | KW_NOT KW_NULL -> ^( TOK_ISNOTNULL ) );", 194, 0, input);

                throw nvae;
            }
            switch (alt194) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1457:5: KW_NULL
                    {
                    KW_NULL654=(Token)input.LT(1);
                    match(input,KW_NULL,FOLLOW_KW_NULL_in_nullCondition10393); 
                    stream_KW_NULL.add(KW_NULL654);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1457:13: -> ^( TOK_ISNULL )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1457:16: ^( TOK_ISNULL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ISNULL, "TOK_ISNULL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1458:7: KW_NOT KW_NULL
                    {
                    KW_NOT655=(Token)input.LT(1);
                    match(input,KW_NOT,FOLLOW_KW_NOT_in_nullCondition10407); 
                    stream_KW_NOT.add(KW_NOT655);

                    KW_NULL656=(Token)input.LT(1);
                    match(input,KW_NULL,FOLLOW_KW_NULL_in_nullCondition10409); 
                    stream_KW_NULL.add(KW_NULL656);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1458:22: -> ^( TOK_ISNOTNULL )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1458:25: ^( TOK_ISNOTNULL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ISNOTNULL, "TOK_ISNOTNULL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end nullCondition

    public static class precedenceUnaryPrefixExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceUnaryPrefixExpression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1461:1: precedenceUnaryPrefixExpression : ( precedenceUnaryOperator )* precedenceFieldExpression ;
    public final precedenceUnaryPrefixExpression_return precedenceUnaryPrefixExpression() throws RecognitionException {
        precedenceUnaryPrefixExpression_return retval = new precedenceUnaryPrefixExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceUnaryOperator_return precedenceUnaryOperator657 = null;

        precedenceFieldExpression_return precedenceFieldExpression658 = null;



        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1462:5: ( ( precedenceUnaryOperator )* precedenceFieldExpression )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1463:5: ( precedenceUnaryOperator )* precedenceFieldExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1463:5: ( precedenceUnaryOperator )*
            loop195:
            do {
                int alt195=2;
                int LA195_0 = input.LA(1);

                if ( (LA195_0==PLUS||(LA195_0>=MINUS && LA195_0<=TILDE)) ) {
                    alt195=1;
                }


                switch (alt195) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1463:6: precedenceUnaryOperator
            	    {
            	    pushFollow(FOLLOW_precedenceUnaryOperator_in_precedenceUnaryPrefixExpression10437);
            	    precedenceUnaryOperator657=precedenceUnaryOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceUnaryOperator657.getTree(), root_0);

            	    }
            	    break;

            	default :
            	    break loop195;
                }
            } while (true);

            pushFollow(FOLLOW_precedenceFieldExpression_in_precedenceUnaryPrefixExpression10442);
            precedenceFieldExpression658=precedenceFieldExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceFieldExpression658.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceUnaryPrefixExpression

    public static class precedenceUnarySuffixExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceUnarySuffixExpression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1466:1: precedenceUnarySuffixExpression : precedenceUnaryPrefixExpression (a= KW_IS nullCondition )? -> {$a != null}? ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression ) -> precedenceUnaryPrefixExpression ;
    public final precedenceUnarySuffixExpression_return precedenceUnarySuffixExpression() throws RecognitionException {
        precedenceUnarySuffixExpression_return retval = new precedenceUnarySuffixExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        precedenceUnaryPrefixExpression_return precedenceUnaryPrefixExpression659 = null;

        nullCondition_return nullCondition660 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_KW_IS=new RewriteRuleTokenStream(adaptor,"token KW_IS");
        RewriteRuleSubtreeStream stream_precedenceUnaryPrefixExpression=new RewriteRuleSubtreeStream(adaptor,"rule precedenceUnaryPrefixExpression");
        RewriteRuleSubtreeStream stream_nullCondition=new RewriteRuleSubtreeStream(adaptor,"rule nullCondition");
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1467:5: ( precedenceUnaryPrefixExpression (a= KW_IS nullCondition )? -> {$a != null}? ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression ) -> precedenceUnaryPrefixExpression )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1467:7: precedenceUnaryPrefixExpression (a= KW_IS nullCondition )?
            {
            pushFollow(FOLLOW_precedenceUnaryPrefixExpression_in_precedenceUnarySuffixExpression10459);
            precedenceUnaryPrefixExpression659=precedenceUnaryPrefixExpression();
            _fsp--;

            stream_precedenceUnaryPrefixExpression.add(precedenceUnaryPrefixExpression659.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1467:39: (a= KW_IS nullCondition )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==KW_IS) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1467:40: a= KW_IS nullCondition
                    {
                    a=(Token)input.LT(1);
                    match(input,KW_IS,FOLLOW_KW_IS_in_precedenceUnarySuffixExpression10464); 
                    stream_KW_IS.add(a);

                    pushFollow(FOLLOW_nullCondition_in_precedenceUnarySuffixExpression10466);
                    nullCondition660=nullCondition();
                    _fsp--;

                    stream_nullCondition.add(nullCondition660.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: precedenceUnaryPrefixExpression, precedenceUnaryPrefixExpression, nullCondition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1468:5: -> {$a != null}? ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression )
            if (a != null) {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1468:22: ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_nullCondition.next());
                adaptor.addChild(root_1, stream_precedenceUnaryPrefixExpression.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1469:5: -> precedenceUnaryPrefixExpression
            {
                adaptor.addChild(root_0, stream_precedenceUnaryPrefixExpression.next());

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceUnarySuffixExpression

    public static class precedenceBitwiseXorOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceBitwiseXorOperator
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1473:1: precedenceBitwiseXorOperator : BITWISEXOR ;
    public final precedenceBitwiseXorOperator_return precedenceBitwiseXorOperator() throws RecognitionException {
        precedenceBitwiseXorOperator_return retval = new precedenceBitwiseXorOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BITWISEXOR661=null;

        CommonTree BITWISEXOR661_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1474:5: ( BITWISEXOR )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1475:5: BITWISEXOR
            {
            root_0 = (CommonTree)adaptor.nil();

            BITWISEXOR661=(Token)input.LT(1);
            match(input,BITWISEXOR,FOLLOW_BITWISEXOR_in_precedenceBitwiseXorOperator10514); 
            BITWISEXOR661_tree = (CommonTree)adaptor.create(BITWISEXOR661);
            adaptor.addChild(root_0, BITWISEXOR661_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceBitwiseXorOperator

    public static class precedenceBitwiseXorExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceBitwiseXorExpression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1478:1: precedenceBitwiseXorExpression : precedenceUnarySuffixExpression ( precedenceBitwiseXorOperator precedenceUnarySuffixExpression )* ;
    public final precedenceBitwiseXorExpression_return precedenceBitwiseXorExpression() throws RecognitionException {
        precedenceBitwiseXorExpression_return retval = new precedenceBitwiseXorExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceUnarySuffixExpression_return precedenceUnarySuffixExpression662 = null;

        precedenceBitwiseXorOperator_return precedenceBitwiseXorOperator663 = null;

        precedenceUnarySuffixExpression_return precedenceUnarySuffixExpression664 = null;



        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1479:5: ( precedenceUnarySuffixExpression ( precedenceBitwiseXorOperator precedenceUnarySuffixExpression )* )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1480:5: precedenceUnarySuffixExpression ( precedenceBitwiseXorOperator precedenceUnarySuffixExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression10535);
            precedenceUnarySuffixExpression662=precedenceUnarySuffixExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceUnarySuffixExpression662.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1480:37: ( precedenceBitwiseXorOperator precedenceUnarySuffixExpression )*
            loop197:
            do {
                int alt197=2;
                int LA197_0 = input.LA(1);

                if ( (LA197_0==BITWISEXOR) ) {
                    alt197=1;
                }


                switch (alt197) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1480:38: precedenceBitwiseXorOperator precedenceUnarySuffixExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseXorOperator_in_precedenceBitwiseXorExpression10538);
            	    precedenceBitwiseXorOperator663=precedenceBitwiseXorOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceBitwiseXorOperator663.getTree(), root_0);
            	    pushFollow(FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression10541);
            	    precedenceUnarySuffixExpression664=precedenceUnarySuffixExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedenceUnarySuffixExpression664.getTree());

            	    }
            	    break;

            	default :
            	    break loop197;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceBitwiseXorExpression

    public static class precedenceStarOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceStarOperator
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1484:1: precedenceStarOperator : ( STAR | DIVIDE | MOD | DIV );
    public final precedenceStarOperator_return precedenceStarOperator() throws RecognitionException {
        precedenceStarOperator_return retval = new precedenceStarOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set665=null;

        CommonTree set665_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1485:5: ( STAR | DIVIDE | MOD | DIV )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set665=(Token)input.LT(1);
            if ( (input.LA(1)>=DIVIDE && input.LA(1)<=STAR)||(input.LA(1)>=MOD && input.LA(1)<=DIV) ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set665));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_precedenceStarOperator0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceStarOperator

    public static class precedenceStarExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceStarExpression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1489:1: precedenceStarExpression : precedenceBitwiseXorExpression ( precedenceStarOperator precedenceBitwiseXorExpression )* ;
    public final precedenceStarExpression_return precedenceStarExpression() throws RecognitionException {
        precedenceStarExpression_return retval = new precedenceStarExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceBitwiseXorExpression_return precedenceBitwiseXorExpression666 = null;

        precedenceStarOperator_return precedenceStarOperator667 = null;

        precedenceBitwiseXorExpression_return precedenceBitwiseXorExpression668 = null;



        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1490:5: ( precedenceBitwiseXorExpression ( precedenceStarOperator precedenceBitwiseXorExpression )* )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1491:5: precedenceBitwiseXorExpression ( precedenceStarOperator precedenceBitwiseXorExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression10598);
            precedenceBitwiseXorExpression666=precedenceBitwiseXorExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceBitwiseXorExpression666.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1491:36: ( precedenceStarOperator precedenceBitwiseXorExpression )*
            loop198:
            do {
                int alt198=2;
                int LA198_0 = input.LA(1);

                if ( ((LA198_0>=DIVIDE && LA198_0<=STAR)||(LA198_0>=MOD && LA198_0<=DIV)) ) {
                    alt198=1;
                }


                switch (alt198) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1491:37: precedenceStarOperator precedenceBitwiseXorExpression
            	    {
            	    pushFollow(FOLLOW_precedenceStarOperator_in_precedenceStarExpression10601);
            	    precedenceStarOperator667=precedenceStarOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceStarOperator667.getTree(), root_0);
            	    pushFollow(FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression10604);
            	    precedenceBitwiseXorExpression668=precedenceBitwiseXorExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedenceBitwiseXorExpression668.getTree());

            	    }
            	    break;

            	default :
            	    break loop198;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceStarExpression

    public static class precedencePlusOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedencePlusOperator
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1495:1: precedencePlusOperator : ( PLUS | MINUS );
    public final precedencePlusOperator_return precedencePlusOperator() throws RecognitionException {
        precedencePlusOperator_return retval = new precedencePlusOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set669=null;

        CommonTree set669_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1496:5: ( PLUS | MINUS )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set669=(Token)input.LT(1);
            if ( input.LA(1)==PLUS||input.LA(1)==MINUS ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set669));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_precedencePlusOperator0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedencePlusOperator

    public static class precedencePlusExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedencePlusExpression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1500:1: precedencePlusExpression : precedenceStarExpression ( precedencePlusOperator precedenceStarExpression )* ;
    public final precedencePlusExpression_return precedencePlusExpression() throws RecognitionException {
        precedencePlusExpression_return retval = new precedencePlusExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceStarExpression_return precedenceStarExpression670 = null;

        precedencePlusOperator_return precedencePlusOperator671 = null;

        precedenceStarExpression_return precedenceStarExpression672 = null;



        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1501:5: ( precedenceStarExpression ( precedencePlusOperator precedenceStarExpression )* )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1502:5: precedenceStarExpression ( precedencePlusOperator precedenceStarExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceStarExpression_in_precedencePlusExpression10653);
            precedenceStarExpression670=precedenceStarExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceStarExpression670.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1502:30: ( precedencePlusOperator precedenceStarExpression )*
            loop199:
            do {
                int alt199=2;
                int LA199_0 = input.LA(1);

                if ( (LA199_0==PLUS||LA199_0==MINUS) ) {
                    alt199=1;
                }


                switch (alt199) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1502:31: precedencePlusOperator precedenceStarExpression
            	    {
            	    pushFollow(FOLLOW_precedencePlusOperator_in_precedencePlusExpression10656);
            	    precedencePlusOperator671=precedencePlusOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedencePlusOperator671.getTree(), root_0);
            	    pushFollow(FOLLOW_precedenceStarExpression_in_precedencePlusExpression10659);
            	    precedenceStarExpression672=precedenceStarExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedenceStarExpression672.getTree());

            	    }
            	    break;

            	default :
            	    break loop199;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedencePlusExpression

    public static class precedenceAmpersandOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceAmpersandOperator
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1506:1: precedenceAmpersandOperator : AMPERSAND ;
    public final precedenceAmpersandOperator_return precedenceAmpersandOperator() throws RecognitionException {
        precedenceAmpersandOperator_return retval = new precedenceAmpersandOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AMPERSAND673=null;

        CommonTree AMPERSAND673_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1507:5: ( AMPERSAND )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1508:5: AMPERSAND
            {
            root_0 = (CommonTree)adaptor.nil();

            AMPERSAND673=(Token)input.LT(1);
            match(input,AMPERSAND,FOLLOW_AMPERSAND_in_precedenceAmpersandOperator10683); 
            AMPERSAND673_tree = (CommonTree)adaptor.create(AMPERSAND673);
            adaptor.addChild(root_0, AMPERSAND673_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceAmpersandOperator

    public static class precedenceAmpersandExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceAmpersandExpression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1511:1: precedenceAmpersandExpression : precedencePlusExpression ( precedenceAmpersandOperator precedencePlusExpression )* ;
    public final precedenceAmpersandExpression_return precedenceAmpersandExpression() throws RecognitionException {
        precedenceAmpersandExpression_return retval = new precedenceAmpersandExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedencePlusExpression_return precedencePlusExpression674 = null;

        precedenceAmpersandOperator_return precedenceAmpersandOperator675 = null;

        precedencePlusExpression_return precedencePlusExpression676 = null;



        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1512:5: ( precedencePlusExpression ( precedenceAmpersandOperator precedencePlusExpression )* )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1513:5: precedencePlusExpression ( precedenceAmpersandOperator precedencePlusExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression10704);
            precedencePlusExpression674=precedencePlusExpression();
            _fsp--;

            adaptor.addChild(root_0, precedencePlusExpression674.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1513:30: ( precedenceAmpersandOperator precedencePlusExpression )*
            loop200:
            do {
                int alt200=2;
                int LA200_0 = input.LA(1);

                if ( (LA200_0==AMPERSAND) ) {
                    alt200=1;
                }


                switch (alt200) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1513:31: precedenceAmpersandOperator precedencePlusExpression
            	    {
            	    pushFollow(FOLLOW_precedenceAmpersandOperator_in_precedenceAmpersandExpression10707);
            	    precedenceAmpersandOperator675=precedenceAmpersandOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceAmpersandOperator675.getTree(), root_0);
            	    pushFollow(FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression10710);
            	    precedencePlusExpression676=precedencePlusExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedencePlusExpression676.getTree());

            	    }
            	    break;

            	default :
            	    break loop200;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceAmpersandExpression

    public static class precedenceBitwiseOrOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceBitwiseOrOperator
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1517:1: precedenceBitwiseOrOperator : BITWISEOR ;
    public final precedenceBitwiseOrOperator_return precedenceBitwiseOrOperator() throws RecognitionException {
        precedenceBitwiseOrOperator_return retval = new precedenceBitwiseOrOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BITWISEOR677=null;

        CommonTree BITWISEOR677_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1518:5: ( BITWISEOR )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1519:5: BITWISEOR
            {
            root_0 = (CommonTree)adaptor.nil();

            BITWISEOR677=(Token)input.LT(1);
            match(input,BITWISEOR,FOLLOW_BITWISEOR_in_precedenceBitwiseOrOperator10734); 
            BITWISEOR677_tree = (CommonTree)adaptor.create(BITWISEOR677);
            adaptor.addChild(root_0, BITWISEOR677_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceBitwiseOrOperator

    public static class precedenceBitwiseOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceBitwiseOrExpression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1522:1: precedenceBitwiseOrExpression : precedenceAmpersandExpression ( precedenceBitwiseOrOperator precedenceAmpersandExpression )* ;
    public final precedenceBitwiseOrExpression_return precedenceBitwiseOrExpression() throws RecognitionException {
        precedenceBitwiseOrExpression_return retval = new precedenceBitwiseOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceAmpersandExpression_return precedenceAmpersandExpression678 = null;

        precedenceBitwiseOrOperator_return precedenceBitwiseOrOperator679 = null;

        precedenceAmpersandExpression_return precedenceAmpersandExpression680 = null;



        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1523:5: ( precedenceAmpersandExpression ( precedenceBitwiseOrOperator precedenceAmpersandExpression )* )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1524:5: precedenceAmpersandExpression ( precedenceBitwiseOrOperator precedenceAmpersandExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression10755);
            precedenceAmpersandExpression678=precedenceAmpersandExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceAmpersandExpression678.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1524:35: ( precedenceBitwiseOrOperator precedenceAmpersandExpression )*
            loop201:
            do {
                int alt201=2;
                int LA201_0 = input.LA(1);

                if ( (LA201_0==BITWISEOR) ) {
                    alt201=1;
                }


                switch (alt201) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1524:36: precedenceBitwiseOrOperator precedenceAmpersandExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseOrOperator_in_precedenceBitwiseOrExpression10758);
            	    precedenceBitwiseOrOperator679=precedenceBitwiseOrOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceBitwiseOrOperator679.getTree(), root_0);
            	    pushFollow(FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression10761);
            	    precedenceAmpersandExpression680=precedenceAmpersandExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedenceAmpersandExpression680.getTree());

            	    }
            	    break;

            	default :
            	    break loop201;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceBitwiseOrExpression

    public static class precedenceEqualOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceEqualOperator
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1528:1: precedenceEqualOperator : ( EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN | KW_LIKE | KW_RLIKE | KW_REGEXP );
    public final precedenceEqualOperator_return precedenceEqualOperator() throws RecognitionException {
        precedenceEqualOperator_return retval = new precedenceEqualOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set681=null;

        CommonTree set681_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1529:5: ( EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN | KW_LIKE | KW_RLIKE | KW_REGEXP )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set681=(Token)input.LT(1);
            if ( input.LA(1)==KW_LIKE||input.LA(1)==EQUAL||(input.LA(1)>=LESSTHAN && input.LA(1)<=GREATERTHAN)||(input.LA(1)>=NOTEQUAL && input.LA(1)<=KW_REGEXP) ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set681));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_precedenceEqualOperator0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceEqualOperator

    public static class precedenceEqualExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceEqualExpression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1534:1: precedenceEqualExpression : precedenceBitwiseOrExpression ( ( precedenceEqualOperator precedenceBitwiseOrExpression ) | ( inOperator expressions ) )* ;
    public final precedenceEqualExpression_return precedenceEqualExpression() throws RecognitionException {
        precedenceEqualExpression_return retval = new precedenceEqualExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceBitwiseOrExpression_return precedenceBitwiseOrExpression682 = null;

        precedenceEqualOperator_return precedenceEqualOperator683 = null;

        precedenceBitwiseOrExpression_return precedenceBitwiseOrExpression684 = null;

        inOperator_return inOperator685 = null;

        expressions_return expressions686 = null;



        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1535:5: ( precedenceBitwiseOrExpression ( ( precedenceEqualOperator precedenceBitwiseOrExpression ) | ( inOperator expressions ) )* )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1536:5: precedenceBitwiseOrExpression ( ( precedenceEqualOperator precedenceBitwiseOrExpression ) | ( inOperator expressions ) )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression10842);
            precedenceBitwiseOrExpression682=precedenceBitwiseOrExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceBitwiseOrExpression682.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1536:35: ( ( precedenceEqualOperator precedenceBitwiseOrExpression ) | ( inOperator expressions ) )*
            loop202:
            do {
                int alt202=3;
                int LA202_0 = input.LA(1);

                if ( (LA202_0==KW_LIKE||LA202_0==EQUAL||(LA202_0>=LESSTHAN && LA202_0<=GREATERTHAN)||(LA202_0>=NOTEQUAL && LA202_0<=KW_REGEXP)) ) {
                    alt202=1;
                }
                else if ( (LA202_0==KW_IN) ) {
                    alt202=2;
                }


                switch (alt202) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1536:37: ( precedenceEqualOperator precedenceBitwiseOrExpression )
            	    {
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1536:37: ( precedenceEqualOperator precedenceBitwiseOrExpression )
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1536:38: precedenceEqualOperator precedenceBitwiseOrExpression
            	    {
            	    pushFollow(FOLLOW_precedenceEqualOperator_in_precedenceEqualExpression10847);
            	    precedenceEqualOperator683=precedenceEqualOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceEqualOperator683.getTree(), root_0);
            	    pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression10850);
            	    precedenceBitwiseOrExpression684=precedenceBitwiseOrExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedenceBitwiseOrExpression684.getTree());

            	    }


            	    }
            	    break;
            	case 2 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1536:96: ( inOperator expressions )
            	    {
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1536:96: ( inOperator expressions )
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1536:97: inOperator expressions
            	    {
            	    pushFollow(FOLLOW_inOperator_in_precedenceEqualExpression10856);
            	    inOperator685=inOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(inOperator685.getTree(), root_0);
            	    pushFollow(FOLLOW_expressions_in_precedenceEqualExpression10859);
            	    expressions686=expressions();
            	    _fsp--;

            	    adaptor.addChild(root_0, expressions686.getTree());

            	    }


            	    }
            	    break;

            	default :
            	    break loop202;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceEqualExpression

    public static class inOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start inOperator
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1539:1: inOperator : KW_IN -> ^( TOK_FUNCTION KW_IN ) ;
    public final inOperator_return inOperator() throws RecognitionException {
        inOperator_return retval = new inOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_IN687=null;

        CommonTree KW_IN687_tree=null;
        RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1540:5: ( KW_IN -> ^( TOK_FUNCTION KW_IN ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1541:5: KW_IN
            {
            KW_IN687=(Token)input.LT(1);
            match(input,KW_IN,FOLLOW_KW_IN_in_inOperator10884); 
            stream_KW_IN.add(KW_IN687);


            // AST REWRITE
            // elements: KW_IN
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1541:11: -> ^( TOK_FUNCTION KW_IN )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1541:14: ^( TOK_FUNCTION KW_IN )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_KW_IN.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end inOperator

    public static class expressions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expressions
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1544:1: expressions : LPAREN expression ( COMMA expression )* RPAREN -> ( expression )* ;
    public final expressions_return expressions() throws RecognitionException {
        expressions_return retval = new expressions_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN688=null;
        Token COMMA690=null;
        Token RPAREN692=null;
        expression_return expression689 = null;

        expression_return expression691 = null;


        CommonTree LPAREN688_tree=null;
        CommonTree COMMA690_tree=null;
        CommonTree RPAREN692_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1545:5: ( LPAREN expression ( COMMA expression )* RPAREN -> ( expression )* )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1546:5: LPAREN expression ( COMMA expression )* RPAREN
            {
            LPAREN688=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_expressions10913); 
            stream_LPAREN.add(LPAREN688);

            pushFollow(FOLLOW_expression_in_expressions10915);
            expression689=expression();
            _fsp--;

            stream_expression.add(expression689.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1546:23: ( COMMA expression )*
            loop203:
            do {
                int alt203=2;
                int LA203_0 = input.LA(1);

                if ( (LA203_0==COMMA) ) {
                    alt203=1;
                }


                switch (alt203) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1546:24: COMMA expression
            	    {
            	    COMMA690=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_expressions10918); 
            	    stream_COMMA.add(COMMA690);

            	    pushFollow(FOLLOW_expression_in_expressions10920);
            	    expression691=expression();
            	    _fsp--;

            	    stream_expression.add(expression691.getTree());

            	    }
            	    break;

            	default :
            	    break loop203;
                }
            } while (true);

            RPAREN692=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_expressions10924); 
            stream_RPAREN.add(RPAREN692);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1546:50: -> ( expression )*
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1546:53: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_0, stream_expression.next());

                }
                stream_expression.reset();

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expressions

    public static class precedenceNotOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceNotOperator
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1549:1: precedenceNotOperator : KW_NOT ;
    public final precedenceNotOperator_return precedenceNotOperator() throws RecognitionException {
        precedenceNotOperator_return retval = new precedenceNotOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_NOT693=null;

        CommonTree KW_NOT693_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1550:5: ( KW_NOT )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1551:5: KW_NOT
            {
            root_0 = (CommonTree)adaptor.nil();

            KW_NOT693=(Token)input.LT(1);
            match(input,KW_NOT,FOLLOW_KW_NOT_in_precedenceNotOperator10950); 
            KW_NOT693_tree = (CommonTree)adaptor.create(KW_NOT693);
            adaptor.addChild(root_0, KW_NOT693_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceNotOperator

    public static class precedenceNotExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceNotExpression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1554:1: precedenceNotExpression : ( precedenceNotOperator )* precedenceEqualExpression ;
    public final precedenceNotExpression_return precedenceNotExpression() throws RecognitionException {
        precedenceNotExpression_return retval = new precedenceNotExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceNotOperator_return precedenceNotOperator694 = null;

        precedenceEqualExpression_return precedenceEqualExpression695 = null;



        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1555:5: ( ( precedenceNotOperator )* precedenceEqualExpression )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1556:5: ( precedenceNotOperator )* precedenceEqualExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1556:5: ( precedenceNotOperator )*
            loop204:
            do {
                int alt204=2;
                int LA204_0 = input.LA(1);

                if ( (LA204_0==KW_NOT) ) {
                    alt204=1;
                }


                switch (alt204) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1556:6: precedenceNotOperator
            	    {
            	    pushFollow(FOLLOW_precedenceNotOperator_in_precedenceNotExpression10972);
            	    precedenceNotOperator694=precedenceNotOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceNotOperator694.getTree(), root_0);

            	    }
            	    break;

            	default :
            	    break loop204;
                }
            } while (true);

            pushFollow(FOLLOW_precedenceEqualExpression_in_precedenceNotExpression10977);
            precedenceEqualExpression695=precedenceEqualExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceEqualExpression695.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceNotExpression

    public static class precedenceAndOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceAndOperator
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1560:1: precedenceAndOperator : KW_AND ;
    public final precedenceAndOperator_return precedenceAndOperator() throws RecognitionException {
        precedenceAndOperator_return retval = new precedenceAndOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_AND696=null;

        CommonTree KW_AND696_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1561:5: ( KW_AND )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1562:5: KW_AND
            {
            root_0 = (CommonTree)adaptor.nil();

            KW_AND696=(Token)input.LT(1);
            match(input,KW_AND,FOLLOW_KW_AND_in_precedenceAndOperator10999); 
            KW_AND696_tree = (CommonTree)adaptor.create(KW_AND696);
            adaptor.addChild(root_0, KW_AND696_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceAndOperator

    public static class precedenceAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceAndExpression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1565:1: precedenceAndExpression : precedenceNotExpression ( precedenceAndOperator precedenceNotExpression )* ;
    public final precedenceAndExpression_return precedenceAndExpression() throws RecognitionException {
        precedenceAndExpression_return retval = new precedenceAndExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceNotExpression_return precedenceNotExpression697 = null;

        precedenceAndOperator_return precedenceAndOperator698 = null;

        precedenceNotExpression_return precedenceNotExpression699 = null;



        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1566:5: ( precedenceNotExpression ( precedenceAndOperator precedenceNotExpression )* )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1567:5: precedenceNotExpression ( precedenceAndOperator precedenceNotExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceNotExpression_in_precedenceAndExpression11020);
            precedenceNotExpression697=precedenceNotExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceNotExpression697.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1567:29: ( precedenceAndOperator precedenceNotExpression )*
            loop205:
            do {
                int alt205=2;
                int LA205_0 = input.LA(1);

                if ( (LA205_0==KW_AND) ) {
                    alt205=1;
                }


                switch (alt205) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1567:30: precedenceAndOperator precedenceNotExpression
            	    {
            	    pushFollow(FOLLOW_precedenceAndOperator_in_precedenceAndExpression11023);
            	    precedenceAndOperator698=precedenceAndOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceAndOperator698.getTree(), root_0);
            	    pushFollow(FOLLOW_precedenceNotExpression_in_precedenceAndExpression11026);
            	    precedenceNotExpression699=precedenceNotExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedenceNotExpression699.getTree());

            	    }
            	    break;

            	default :
            	    break loop205;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceAndExpression

    public static class precedenceOrOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceOrOperator
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1571:1: precedenceOrOperator : KW_OR ;
    public final precedenceOrOperator_return precedenceOrOperator() throws RecognitionException {
        precedenceOrOperator_return retval = new precedenceOrOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_OR700=null;

        CommonTree KW_OR700_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1572:5: ( KW_OR )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1573:5: KW_OR
            {
            root_0 = (CommonTree)adaptor.nil();

            KW_OR700=(Token)input.LT(1);
            match(input,KW_OR,FOLLOW_KW_OR_in_precedenceOrOperator11050); 
            KW_OR700_tree = (CommonTree)adaptor.create(KW_OR700);
            adaptor.addChild(root_0, KW_OR700_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceOrOperator

    public static class precedenceOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceOrExpression
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1576:1: precedenceOrExpression : precedenceAndExpression ( precedenceOrOperator precedenceAndExpression )* ;
    public final precedenceOrExpression_return precedenceOrExpression() throws RecognitionException {
        precedenceOrExpression_return retval = new precedenceOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceAndExpression_return precedenceAndExpression701 = null;

        precedenceOrOperator_return precedenceOrOperator702 = null;

        precedenceAndExpression_return precedenceAndExpression703 = null;



        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1577:5: ( precedenceAndExpression ( precedenceOrOperator precedenceAndExpression )* )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1578:5: precedenceAndExpression ( precedenceOrOperator precedenceAndExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceAndExpression_in_precedenceOrExpression11071);
            precedenceAndExpression701=precedenceAndExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceAndExpression701.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1578:29: ( precedenceOrOperator precedenceAndExpression )*
            loop206:
            do {
                int alt206=2;
                int LA206_0 = input.LA(1);

                if ( (LA206_0==KW_OR) ) {
                    alt206=1;
                }


                switch (alt206) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1578:30: precedenceOrOperator precedenceAndExpression
            	    {
            	    pushFollow(FOLLOW_precedenceOrOperator_in_precedenceOrExpression11074);
            	    precedenceOrOperator702=precedenceOrOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceOrOperator702.getTree(), root_0);
            	    pushFollow(FOLLOW_precedenceAndExpression_in_precedenceOrExpression11077);
            	    precedenceAndExpression703=precedenceAndExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedenceAndExpression703.getTree());

            	    }
            	    break;

            	default :
            	    break loop206;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceOrExpression

    public static class booleanValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start booleanValue
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1582:1: booleanValue : ( KW_TRUE | KW_FALSE );
    public final booleanValue_return booleanValue() throws RecognitionException {
        booleanValue_return retval = new booleanValue_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_TRUE704=null;
        Token KW_FALSE705=null;

        CommonTree KW_TRUE704_tree=null;
        CommonTree KW_FALSE705_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1583:5: ( KW_TRUE | KW_FALSE )
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==KW_TRUE) ) {
                alt207=1;
            }
            else if ( (LA207_0==KW_FALSE) ) {
                alt207=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1582:1: booleanValue : ( KW_TRUE | KW_FALSE );", 207, 0, input);

                throw nvae;
            }
            switch (alt207) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1584:5: KW_TRUE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    KW_TRUE704=(Token)input.LT(1);
                    match(input,KW_TRUE,FOLLOW_KW_TRUE_in_booleanValue11101); 
                    KW_TRUE704_tree = (CommonTree)adaptor.create(KW_TRUE704);
                    root_0 = (CommonTree)adaptor.becomeRoot(KW_TRUE704_tree, root_0);


                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1584:16: KW_FALSE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    KW_FALSE705=(Token)input.LT(1);
                    match(input,KW_FALSE,FOLLOW_KW_FALSE_in_booleanValue11106); 
                    KW_FALSE705_tree = (CommonTree)adaptor.create(KW_FALSE705);
                    root_0 = (CommonTree)adaptor.becomeRoot(KW_FALSE705_tree, root_0);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end booleanValue

    public static class tabName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tabName
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1587:1: tabName : Identifier ( partitionSpec )? -> ^( TOK_TAB Identifier ( partitionSpec )? ) ;
    public final tabName_return tabName() throws RecognitionException {
        tabName_return retval = new tabName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier706=null;
        partitionSpec_return partitionSpec707 = null;


        CommonTree Identifier706_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1588:4: ( Identifier ( partitionSpec )? -> ^( TOK_TAB Identifier ( partitionSpec )? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1589:4: Identifier ( partitionSpec )?
            {
            Identifier706=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_tabName11126); 
            stream_Identifier.add(Identifier706);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1589:15: ( partitionSpec )?
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==KW_PARTITION) ) {
                alt208=1;
            }
            switch (alt208) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1589:15: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_tabName11128);
                    partitionSpec707=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec707.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: Identifier, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1589:30: -> ^( TOK_TAB Identifier ( partitionSpec )? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1589:33: ^( TOK_TAB Identifier ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TAB, "TOK_TAB"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1589:54: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tabName

    public static class partitionSpec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start partitionSpec
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1592:1: partitionSpec : KW_PARTITION LPAREN partitionVal ( COMMA partitionVal )* RPAREN -> ^( TOK_PARTSPEC ( partitionVal )+ ) ;
    public final partitionSpec_return partitionSpec() throws RecognitionException {
        partitionSpec_return retval = new partitionSpec_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_PARTITION708=null;
        Token LPAREN709=null;
        Token COMMA711=null;
        Token RPAREN713=null;
        partitionVal_return partitionVal710 = null;

        partitionVal_return partitionVal712 = null;


        CommonTree KW_PARTITION708_tree=null;
        CommonTree LPAREN709_tree=null;
        CommonTree COMMA711_tree=null;
        CommonTree RPAREN713_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_PARTITION=new RewriteRuleTokenStream(adaptor,"token KW_PARTITION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_partitionVal=new RewriteRuleSubtreeStream(adaptor,"rule partitionVal");
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1593:5: ( KW_PARTITION LPAREN partitionVal ( COMMA partitionVal )* RPAREN -> ^( TOK_PARTSPEC ( partitionVal )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1594:5: KW_PARTITION LPAREN partitionVal ( COMMA partitionVal )* RPAREN
            {
            KW_PARTITION708=(Token)input.LT(1);
            match(input,KW_PARTITION,FOLLOW_KW_PARTITION_in_partitionSpec11160); 
            stream_KW_PARTITION.add(KW_PARTITION708);

            LPAREN709=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_partitionSpec11167); 
            stream_LPAREN.add(LPAREN709);

            pushFollow(FOLLOW_partitionVal_in_partitionSpec11169);
            partitionVal710=partitionVal();
            _fsp--;

            stream_partitionVal.add(partitionVal710.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1595:26: ( COMMA partitionVal )*
            loop209:
            do {
                int alt209=2;
                int LA209_0 = input.LA(1);

                if ( (LA209_0==COMMA) ) {
                    alt209=1;
                }


                switch (alt209) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1595:27: COMMA partitionVal
            	    {
            	    COMMA711=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_partitionSpec11172); 
            	    stream_COMMA.add(COMMA711);

            	    pushFollow(FOLLOW_partitionVal_in_partitionSpec11175);
            	    partitionVal712=partitionVal();
            	    _fsp--;

            	    stream_partitionVal.add(partitionVal712.getTree());

            	    }
            	    break;

            	default :
            	    break loop209;
                }
            } while (true);

            RPAREN713=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_partitionSpec11180); 
            stream_RPAREN.add(RPAREN713);


            // AST REWRITE
            // elements: partitionVal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1595:57: -> ^( TOK_PARTSPEC ( partitionVal )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1595:60: ^( TOK_PARTSPEC ( partitionVal )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PARTSPEC, "TOK_PARTSPEC"), root_1);

                if ( !(stream_partitionVal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_partitionVal.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionVal.next());

                }
                stream_partitionVal.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end partitionSpec

    public static class partitionVal_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start partitionVal
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1598:1: partitionVal : Identifier ( EQUAL constant )? -> ^( TOK_PARTVAL Identifier ( constant )? ) ;
    public final partitionVal_return partitionVal() throws RecognitionException {
        partitionVal_return retval = new partitionVal_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier714=null;
        Token EQUAL715=null;
        constant_return constant716 = null;


        CommonTree Identifier714_tree=null;
        CommonTree EQUAL715_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1599:5: ( Identifier ( EQUAL constant )? -> ^( TOK_PARTVAL Identifier ( constant )? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1600:5: Identifier ( EQUAL constant )?
            {
            Identifier714=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_partitionVal11211); 
            stream_Identifier.add(Identifier714);

            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1600:16: ( EQUAL constant )?
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==EQUAL) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1600:17: EQUAL constant
                    {
                    EQUAL715=(Token)input.LT(1);
                    match(input,EQUAL,FOLLOW_EQUAL_in_partitionVal11214); 
                    stream_EQUAL.add(EQUAL715);

                    pushFollow(FOLLOW_constant_in_partitionVal11216);
                    constant716=constant();
                    _fsp--;

                    stream_constant.add(constant716.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: constant, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1600:34: -> ^( TOK_PARTVAL Identifier ( constant )? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1600:37: ^( TOK_PARTVAL Identifier ( constant )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PARTVAL, "TOK_PARTVAL"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1600:62: ( constant )?
                if ( stream_constant.hasNext() ) {
                    adaptor.addChild(root_1, stream_constant.next());

                }
                stream_constant.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end partitionVal

    public static class sysFuncNames_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start sysFuncNames
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1603:1: sysFuncNames : ( KW_AND | KW_OR | KW_NOT | KW_LIKE | KW_IF | KW_CASE | KW_WHEN | KW_TINYINT | KW_SMALLINT | KW_INT | KW_BIGINT | KW_FLOAT | KW_DOUBLE | KW_BOOLEAN | KW_STRING | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE | EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN | DIVIDE | PLUS | MINUS | STAR | MOD | DIV | AMPERSAND | TILDE | BITWISEOR | BITWISEXOR | KW_RLIKE | KW_REGEXP | KW_IN );
    public final sysFuncNames_return sysFuncNames() throws RecognitionException {
        sysFuncNames_return retval = new sysFuncNames_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set717=null;

        CommonTree set717_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1604:5: ( KW_AND | KW_OR | KW_NOT | KW_LIKE | KW_IF | KW_CASE | KW_WHEN | KW_TINYINT | KW_SMALLINT | KW_INT | KW_BIGINT | KW_FLOAT | KW_DOUBLE | KW_BOOLEAN | KW_STRING | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE | EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN | DIVIDE | PLUS | MINUS | STAR | MOD | DIV | AMPERSAND | TILDE | BITWISEOR | BITWISEXOR | KW_RLIKE | KW_REGEXP | KW_IN )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set717=(Token)input.LT(1);
            if ( input.LA(1)==KW_IF||input.LA(1)==KW_NOT||input.LA(1)==KW_LIKE||input.LA(1)==KW_IN||input.LA(1)==EQUAL||input.LA(1)==KW_MAP||(input.LA(1)>=KW_TINYINT && input.LA(1)<=KW_DOUBLE)||(input.LA(1)>=KW_STRING && input.LA(1)<=KW_UNIONTYPE)||(input.LA(1)>=DIVIDE && input.LA(1)<=PLUS)||(input.LA(1)>=KW_CASE && input.LA(1)<=KW_WHEN)||(input.LA(1)>=MINUS && input.LA(1)<=TILDE)||(input.LA(1)>=BITWISEXOR && input.LA(1)<=KW_OR) ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set717));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_sysFuncNames0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end sysFuncNames

    public static class descFuncNames_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start descFuncNames
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1645:1: descFuncNames : ( sysFuncNames | StringLiteral | Identifier );
    public final descFuncNames_return descFuncNames() throws RecognitionException {
        descFuncNames_return retval = new descFuncNames_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token StringLiteral719=null;
        Token Identifier720=null;
        sysFuncNames_return sysFuncNames718 = null;


        CommonTree StringLiteral719_tree=null;
        CommonTree Identifier720_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1646:5: ( sysFuncNames | StringLiteral | Identifier )
            int alt211=3;
            switch ( input.LA(1) ) {
            case KW_IF:
            case KW_NOT:
            case KW_LIKE:
            case KW_IN:
            case EQUAL:
            case KW_MAP:
            case KW_TINYINT:
            case KW_SMALLINT:
            case KW_INT:
            case KW_BIGINT:
            case KW_BOOLEAN:
            case KW_FLOAT:
            case KW_DOUBLE:
            case KW_STRING:
            case KW_ARRAY:
            case LESSTHAN:
            case GREATERTHAN:
            case KW_STRUCT:
            case KW_UNIONTYPE:
            case DIVIDE:
            case STAR:
            case PLUS:
            case KW_CASE:
            case KW_WHEN:
            case MINUS:
            case TILDE:
            case BITWISEXOR:
            case MOD:
            case DIV:
            case AMPERSAND:
            case BITWISEOR:
            case NOTEQUAL:
            case LESSTHANOREQUALTO:
            case GREATERTHANOREQUALTO:
            case KW_RLIKE:
            case KW_REGEXP:
            case KW_AND:
            case KW_OR:
                {
                alt211=1;
                }
                break;
            case StringLiteral:
                {
                alt211=2;
                }
                break;
            case Identifier:
                {
                alt211=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1645:1: descFuncNames : ( sysFuncNames | StringLiteral | Identifier );", 211, 0, input);

                throw nvae;
            }

            switch (alt211) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1647:7: sysFuncNames
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sysFuncNames_in_descFuncNames11571);
                    sysFuncNames718=sysFuncNames();
                    _fsp--;

                    adaptor.addChild(root_0, sysFuncNames718.getTree());

                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1648:7: StringLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    StringLiteral719=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_descFuncNames11579); 
                    StringLiteral719_tree = (CommonTree)adaptor.create(StringLiteral719);
                    adaptor.addChild(root_0, StringLiteral719_tree);


                    }
                    break;
                case 3 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1649:7: Identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Identifier720=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_descFuncNames11587); 
                    Identifier720_tree = (CommonTree)adaptor.create(Identifier720);
                    adaptor.addChild(root_0, Identifier720_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end descFuncNames

    public static class grantStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start grantStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1654:1: grantStatement : KW_GRANT privilegeList KW_ON grantRevokeTarget KW_TO userList ( KW_WITH withOptionList )? -> ^( TOK_GRANT privilegeList grantRevokeTarget userList ( withOptionList )? ) ;
    public final grantStatement_return grantStatement() throws RecognitionException {
        grantStatement_return retval = new grantStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_GRANT721=null;
        Token KW_ON723=null;
        Token KW_TO725=null;
        Token KW_WITH727=null;
        privilegeList_return privilegeList722 = null;

        grantRevokeTarget_return grantRevokeTarget724 = null;

        userList_return userList726 = null;

        withOptionList_return withOptionList728 = null;


        CommonTree KW_GRANT721_tree=null;
        CommonTree KW_ON723_tree=null;
        CommonTree KW_TO725_tree=null;
        CommonTree KW_WITH727_tree=null;
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleSubtreeStream stream_grantRevokeTarget=new RewriteRuleSubtreeStream(adaptor,"rule grantRevokeTarget");
        RewriteRuleSubtreeStream stream_withOptionList=new RewriteRuleSubtreeStream(adaptor,"rule withOptionList");
        RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
        RewriteRuleSubtreeStream stream_userList=new RewriteRuleSubtreeStream(adaptor,"rule userList");
         msgs.push("grant statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1657:5: ( KW_GRANT privilegeList KW_ON grantRevokeTarget KW_TO userList ( KW_WITH withOptionList )? -> ^( TOK_GRANT privilegeList grantRevokeTarget userList ( withOptionList )? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1658:5: KW_GRANT privilegeList KW_ON grantRevokeTarget KW_TO userList ( KW_WITH withOptionList )?
            {
            KW_GRANT721=(Token)input.LT(1);
            match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantStatement11621); 
            stream_KW_GRANT.add(KW_GRANT721);

            pushFollow(FOLLOW_privilegeList_in_grantStatement11623);
            privilegeList722=privilegeList();
            _fsp--;

            stream_privilegeList.add(privilegeList722.getTree());
            KW_ON723=(Token)input.LT(1);
            match(input,KW_ON,FOLLOW_KW_ON_in_grantStatement11625); 
            stream_KW_ON.add(KW_ON723);

            pushFollow(FOLLOW_grantRevokeTarget_in_grantStatement11627);
            grantRevokeTarget724=grantRevokeTarget();
            _fsp--;

            stream_grantRevokeTarget.add(grantRevokeTarget724.getTree());
            KW_TO725=(Token)input.LT(1);
            match(input,KW_TO,FOLLOW_KW_TO_in_grantStatement11629); 
            stream_KW_TO.add(KW_TO725);

            pushFollow(FOLLOW_userList_in_grantStatement11631);
            userList726=userList();
            _fsp--;

            stream_userList.add(userList726.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1658:67: ( KW_WITH withOptionList )?
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==KW_WITH) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1658:68: KW_WITH withOptionList
                    {
                    KW_WITH727=(Token)input.LT(1);
                    match(input,KW_WITH,FOLLOW_KW_WITH_in_grantStatement11634); 
                    stream_KW_WITH.add(KW_WITH727);

                    pushFollow(FOLLOW_withOptionList_in_grantStatement11636);
                    withOptionList728=withOptionList();
                    _fsp--;

                    stream_withOptionList.add(withOptionList728.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: userList, privilegeList, grantRevokeTarget, withOptionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1659:5: -> ^( TOK_GRANT privilegeList grantRevokeTarget userList ( withOptionList )? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1659:8: ^( TOK_GRANT privilegeList grantRevokeTarget userList ( withOptionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_GRANT, "TOK_GRANT"), root_1);

                adaptor.addChild(root_1, stream_privilegeList.next());
                adaptor.addChild(root_1, stream_grantRevokeTarget.next());
                adaptor.addChild(root_1, stream_userList.next());
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1659:61: ( withOptionList )?
                if ( stream_withOptionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_withOptionList.next());

                }
                stream_withOptionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end grantStatement

    public static class privilegeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start privilegeList
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1662:1: privilegeList : privilegeType ( COMMA privilegeType )* -> ^( TOK_PRIVLIST ( privilegeType )+ ) ;
    public final privilegeList_return privilegeList() throws RecognitionException {
        privilegeList_return retval = new privilegeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA730=null;
        privilegeType_return privilegeType729 = null;

        privilegeType_return privilegeType731 = null;


        CommonTree COMMA730_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_privilegeType=new RewriteRuleSubtreeStream(adaptor,"rule privilegeType");
         msgs.push("privilege list"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1665:5: ( privilegeType ( COMMA privilegeType )* -> ^( TOK_PRIVLIST ( privilegeType )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1665:7: privilegeType ( COMMA privilegeType )*
            {
            pushFollow(FOLLOW_privilegeType_in_privilegeList11684);
            privilegeType729=privilegeType();
            _fsp--;

            stream_privilegeType.add(privilegeType729.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1665:21: ( COMMA privilegeType )*
            loop213:
            do {
                int alt213=2;
                int LA213_0 = input.LA(1);

                if ( (LA213_0==COMMA) ) {
                    alt213=1;
                }


                switch (alt213) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1665:22: COMMA privilegeType
            	    {
            	    COMMA730=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_privilegeList11687); 
            	    stream_COMMA.add(COMMA730);

            	    pushFollow(FOLLOW_privilegeType_in_privilegeList11689);
            	    privilegeType731=privilegeType();
            	    _fsp--;

            	    stream_privilegeType.add(privilegeType731.getTree());

            	    }
            	    break;

            	default :
            	    break loop213;
                }
            } while (true);


            // AST REWRITE
            // elements: privilegeType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1665:45: -> ^( TOK_PRIVLIST ( privilegeType )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1665:48: ^( TOK_PRIVLIST ( privilegeType )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIVLIST, "TOK_PRIVLIST"), root_1);

                if ( !(stream_privilegeType.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_privilegeType.hasNext() ) {
                    adaptor.addChild(root_1, stream_privilegeType.next());

                }
                stream_privilegeType.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end privilegeList

    public static class privilegeType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start privilegeType
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1668:1: privilegeType : ( KW_ALL ( kwPRIVILEGES )? -> TOK_PRIVALL | KW_SELECT -> TOK_PRIVSEL | KW_INSERT -> TOK_PRIVINS | KW_CREATE -> TOK_PRIVCRT | KW_ALTER -> TOK_PRIVALT | KW_DROP -> TOK_PRIVDROP | KW_CREATE kwUSER -> TOK_PRIVCREATEUSER | KW_GRANT KW_OPTION -> TOK_PRIVGRANT | kwSUPER -> TOK_PRIVSUPER );
    public final privilegeType_return privilegeType() throws RecognitionException {
        privilegeType_return retval = new privilegeType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ALL732=null;
        Token KW_SELECT734=null;
        Token KW_INSERT735=null;
        Token KW_CREATE736=null;
        Token KW_ALTER737=null;
        Token KW_DROP738=null;
        Token KW_CREATE739=null;
        Token KW_GRANT741=null;
        Token KW_OPTION742=null;
        kwPRIVILEGES_return kwPRIVILEGES733 = null;

        kwUSER_return kwUSER740 = null;

        kwSUPER_return kwSUPER743 = null;


        CommonTree KW_ALL732_tree=null;
        CommonTree KW_SELECT734_tree=null;
        CommonTree KW_INSERT735_tree=null;
        CommonTree KW_CREATE736_tree=null;
        CommonTree KW_ALTER737_tree=null;
        CommonTree KW_DROP738_tree=null;
        CommonTree KW_CREATE739_tree=null;
        CommonTree KW_GRANT741_tree=null;
        CommonTree KW_OPTION742_tree=null;
        RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");
        RewriteRuleTokenStream stream_KW_ALTER=new RewriteRuleTokenStream(adaptor,"token KW_ALTER");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
        RewriteRuleTokenStream stream_KW_SELECT=new RewriteRuleTokenStream(adaptor,"token KW_SELECT");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
        RewriteRuleSubtreeStream stream_kwPRIVILEGES=new RewriteRuleSubtreeStream(adaptor,"rule kwPRIVILEGES");
        RewriteRuleSubtreeStream stream_kwSUPER=new RewriteRuleSubtreeStream(adaptor,"rule kwSUPER");
        RewriteRuleSubtreeStream stream_kwUSER=new RewriteRuleSubtreeStream(adaptor,"rule kwUSER");
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1669:5: ( KW_ALL ( kwPRIVILEGES )? -> TOK_PRIVALL | KW_SELECT -> TOK_PRIVSEL | KW_INSERT -> TOK_PRIVINS | KW_CREATE -> TOK_PRIVCRT | KW_ALTER -> TOK_PRIVALT | KW_DROP -> TOK_PRIVDROP | KW_CREATE kwUSER -> TOK_PRIVCREATEUSER | KW_GRANT KW_OPTION -> TOK_PRIVGRANT | kwSUPER -> TOK_PRIVSUPER )
            int alt215=9;
            switch ( input.LA(1) ) {
            case KW_ALL:
                {
                alt215=1;
                }
                break;
            case KW_SELECT:
                {
                alt215=2;
                }
                break;
            case KW_INSERT:
                {
                alt215=3;
                }
                break;
            case KW_CREATE:
                {
                int LA215_4 = input.LA(2);

                if ( (LA215_4==COMMA||LA215_4==KW_ON) ) {
                    alt215=4;
                }
                else if ( (LA215_4==Identifier) ) {
                    alt215=7;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1668:1: privilegeType : ( KW_ALL ( kwPRIVILEGES )? -> TOK_PRIVALL | KW_SELECT -> TOK_PRIVSEL | KW_INSERT -> TOK_PRIVINS | KW_CREATE -> TOK_PRIVCRT | KW_ALTER -> TOK_PRIVALT | KW_DROP -> TOK_PRIVDROP | KW_CREATE kwUSER -> TOK_PRIVCREATEUSER | KW_GRANT KW_OPTION -> TOK_PRIVGRANT | kwSUPER -> TOK_PRIVSUPER );", 215, 4, input);

                    throw nvae;
                }
                }
                break;
            case KW_ALTER:
                {
                alt215=5;
                }
                break;
            case KW_DROP:
                {
                alt215=6;
                }
                break;
            case KW_GRANT:
                {
                alt215=8;
                }
                break;
            case Identifier:
                {
                alt215=9;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1668:1: privilegeType : ( KW_ALL ( kwPRIVILEGES )? -> TOK_PRIVALL | KW_SELECT -> TOK_PRIVSEL | KW_INSERT -> TOK_PRIVINS | KW_CREATE -> TOK_PRIVCRT | KW_ALTER -> TOK_PRIVALT | KW_DROP -> TOK_PRIVDROP | KW_CREATE kwUSER -> TOK_PRIVCREATEUSER | KW_GRANT KW_OPTION -> TOK_PRIVGRANT | kwSUPER -> TOK_PRIVSUPER );", 215, 0, input);

                throw nvae;
            }

            switch (alt215) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1669:7: KW_ALL ( kwPRIVILEGES )?
                    {
                    KW_ALL732=(Token)input.LT(1);
                    match(input,KW_ALL,FOLLOW_KW_ALL_in_privilegeType11718); 
                    stream_KW_ALL.add(KW_ALL732);

                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1669:14: ( kwPRIVILEGES )?
                    int alt214=2;
                    int LA214_0 = input.LA(1);

                    if ( (LA214_0==Identifier) ) {
                        alt214=1;
                    }
                    switch (alt214) {
                        case 1 :
                            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1669:14: kwPRIVILEGES
                            {
                            pushFollow(FOLLOW_kwPRIVILEGES_in_privilegeType11720);
                            kwPRIVILEGES733=kwPRIVILEGES();
                            _fsp--;

                            stream_kwPRIVILEGES.add(kwPRIVILEGES733.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1669:32: -> TOK_PRIVALL
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_PRIVALL, "TOK_PRIVALL"));

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1670:7: KW_SELECT
                    {
                    KW_SELECT734=(Token)input.LT(1);
                    match(input,KW_SELECT,FOLLOW_KW_SELECT_in_privilegeType11738); 
                    stream_KW_SELECT.add(KW_SELECT734);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1670:32: -> TOK_PRIVSEL
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_PRIVSEL, "TOK_PRIVSEL"));

                    }



                    }
                    break;
                case 3 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1671:7: KW_INSERT
                    {
                    KW_INSERT735=(Token)input.LT(1);
                    match(input,KW_INSERT,FOLLOW_KW_INSERT_in_privilegeType11765); 
                    stream_KW_INSERT.add(KW_INSERT735);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1671:32: -> TOK_PRIVINS
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_PRIVINS, "TOK_PRIVINS"));

                    }



                    }
                    break;
                case 4 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1672:7: KW_CREATE
                    {
                    KW_CREATE736=(Token)input.LT(1);
                    match(input,KW_CREATE,FOLLOW_KW_CREATE_in_privilegeType11792); 
                    stream_KW_CREATE.add(KW_CREATE736);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1672:32: -> TOK_PRIVCRT
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_PRIVCRT, "TOK_PRIVCRT"));

                    }



                    }
                    break;
                case 5 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1673:7: KW_ALTER
                    {
                    KW_ALTER737=(Token)input.LT(1);
                    match(input,KW_ALTER,FOLLOW_KW_ALTER_in_privilegeType11819); 
                    stream_KW_ALTER.add(KW_ALTER737);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1673:32: -> TOK_PRIVALT
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_PRIVALT, "TOK_PRIVALT"));

                    }



                    }
                    break;
                case 6 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1674:7: KW_DROP
                    {
                    KW_DROP738=(Token)input.LT(1);
                    match(input,KW_DROP,FOLLOW_KW_DROP_in_privilegeType11847); 
                    stream_KW_DROP.add(KW_DROP738);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1674:32: -> TOK_PRIVDROP
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_PRIVDROP, "TOK_PRIVDROP"));

                    }



                    }
                    break;
                case 7 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1675:7: KW_CREATE kwUSER
                    {
                    KW_CREATE739=(Token)input.LT(1);
                    match(input,KW_CREATE,FOLLOW_KW_CREATE_in_privilegeType11876); 
                    stream_KW_CREATE.add(KW_CREATE739);

                    pushFollow(FOLLOW_kwUSER_in_privilegeType11878);
                    kwUSER740=kwUSER();
                    _fsp--;

                    stream_kwUSER.add(kwUSER740.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1675:32: -> TOK_PRIVCREATEUSER
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_PRIVCREATEUSER, "TOK_PRIVCREATEUSER"));

                    }



                    }
                    break;
                case 8 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1676:7: KW_GRANT KW_OPTION
                    {
                    KW_GRANT741=(Token)input.LT(1);
                    match(input,KW_GRANT,FOLLOW_KW_GRANT_in_privilegeType11898); 
                    stream_KW_GRANT.add(KW_GRANT741);

                    KW_OPTION742=(Token)input.LT(1);
                    match(input,KW_OPTION,FOLLOW_KW_OPTION_in_privilegeType11900); 
                    stream_KW_OPTION.add(KW_OPTION742);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1676:32: -> TOK_PRIVGRANT
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_PRIVGRANT, "TOK_PRIVGRANT"));

                    }



                    }
                    break;
                case 9 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1677:7: kwSUPER
                    {
                    pushFollow(FOLLOW_kwSUPER_in_privilegeType11918);
                    kwSUPER743=kwSUPER();
                    _fsp--;

                    stream_kwSUPER.add(kwSUPER743.getTree());

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1677:32: -> TOK_PRIVSUPER
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_PRIVSUPER, "TOK_PRIVSUPER"));

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end privilegeType

    public static class userList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start userList
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1680:1: userList : userItem ( COMMA userItem )* -> ^( TOK_USRLIST ( userItem )+ ) ;
    public final userList_return userList() throws RecognitionException {
        userList_return retval = new userList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA745=null;
        userItem_return userItem744 = null;

        userItem_return userItem746 = null;


        CommonTree COMMA745_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_userItem=new RewriteRuleSubtreeStream(adaptor,"rule userItem");
         msgs.push("user list"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1683:5: ( userItem ( COMMA userItem )* -> ^( TOK_USRLIST ( userItem )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1683:7: userItem ( COMMA userItem )*
            {
            pushFollow(FOLLOW_userItem_in_userList11966);
            userItem744=userItem();
            _fsp--;

            stream_userItem.add(userItem744.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1683:16: ( COMMA userItem )*
            loop216:
            do {
                int alt216=2;
                int LA216_0 = input.LA(1);

                if ( (LA216_0==COMMA) ) {
                    alt216=1;
                }


                switch (alt216) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1683:17: COMMA userItem
            	    {
            	    COMMA745=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_userList11969); 
            	    stream_COMMA.add(COMMA745);

            	    pushFollow(FOLLOW_userItem_in_userList11971);
            	    userItem746=userItem();
            	    _fsp--;

            	    stream_userItem.add(userItem746.getTree());

            	    }
            	    break;

            	default :
            	    break loop216;
                }
            } while (true);


            // AST REWRITE
            // elements: userItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1683:35: -> ^( TOK_USRLIST ( userItem )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1683:38: ^( TOK_USRLIST ( userItem )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_USRLIST, "TOK_USRLIST"), root_1);

                if ( !(stream_userItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_userItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_userItem.next());

                }
                stream_userItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end userList

    public static class grantRevokeTarget_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start grantRevokeTarget
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1686:1: grantRevokeTarget : ( STAR -> ^( TOK_PRIV_DB ) | STAR DOT STAR -> ^( TOK_PRIV_GLOBAL ) | dbName= Identifier DOT STAR -> ^( TOK_PRIV_DB $dbName) | dbName= Identifier DOT tblName= Identifier -> ^( TOK_PRIV_TABLE $dbName $tblName) | tblName= Identifier -> ^( TOK_PRIV_TABLE $tblName) );
    public final grantRevokeTarget_return grantRevokeTarget() throws RecognitionException {
        grantRevokeTarget_return retval = new grantRevokeTarget_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token dbName=null;
        Token tblName=null;
        Token STAR747=null;
        Token STAR748=null;
        Token DOT749=null;
        Token STAR750=null;
        Token DOT751=null;
        Token STAR752=null;
        Token DOT753=null;

        CommonTree dbName_tree=null;
        CommonTree tblName_tree=null;
        CommonTree STAR747_tree=null;
        CommonTree STAR748_tree=null;
        CommonTree DOT749_tree=null;
        CommonTree STAR750_tree=null;
        CommonTree DOT751_tree=null;
        CommonTree STAR752_tree=null;
        CommonTree DOT753_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("grant/revoke target"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1689:5: ( STAR -> ^( TOK_PRIV_DB ) | STAR DOT STAR -> ^( TOK_PRIV_GLOBAL ) | dbName= Identifier DOT STAR -> ^( TOK_PRIV_DB $dbName) | dbName= Identifier DOT tblName= Identifier -> ^( TOK_PRIV_TABLE $dbName $tblName) | tblName= Identifier -> ^( TOK_PRIV_TABLE $tblName) )
            int alt217=5;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==STAR) ) {
                int LA217_1 = input.LA(2);

                if ( (LA217_1==DOT) ) {
                    alt217=2;
                }
                else if ( (LA217_1==KW_TO||LA217_1==KW_FROM) ) {
                    alt217=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1686:1: grantRevokeTarget : ( STAR -> ^( TOK_PRIV_DB ) | STAR DOT STAR -> ^( TOK_PRIV_GLOBAL ) | dbName= Identifier DOT STAR -> ^( TOK_PRIV_DB $dbName) | dbName= Identifier DOT tblName= Identifier -> ^( TOK_PRIV_TABLE $dbName $tblName) | tblName= Identifier -> ^( TOK_PRIV_TABLE $tblName) );", 217, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA217_0==Identifier) ) {
                int LA217_2 = input.LA(2);

                if ( (LA217_2==DOT) ) {
                    int LA217_6 = input.LA(3);

                    if ( (LA217_6==STAR) ) {
                        alt217=3;
                    }
                    else if ( (LA217_6==Identifier) ) {
                        alt217=4;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1686:1: grantRevokeTarget : ( STAR -> ^( TOK_PRIV_DB ) | STAR DOT STAR -> ^( TOK_PRIV_GLOBAL ) | dbName= Identifier DOT STAR -> ^( TOK_PRIV_DB $dbName) | dbName= Identifier DOT tblName= Identifier -> ^( TOK_PRIV_TABLE $dbName $tblName) | tblName= Identifier -> ^( TOK_PRIV_TABLE $tblName) );", 217, 6, input);

                        throw nvae;
                    }
                }
                else if ( (LA217_2==KW_TO||LA217_2==KW_FROM) ) {
                    alt217=5;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1686:1: grantRevokeTarget : ( STAR -> ^( TOK_PRIV_DB ) | STAR DOT STAR -> ^( TOK_PRIV_GLOBAL ) | dbName= Identifier DOT STAR -> ^( TOK_PRIV_DB $dbName) | dbName= Identifier DOT tblName= Identifier -> ^( TOK_PRIV_TABLE $dbName $tblName) | tblName= Identifier -> ^( TOK_PRIV_TABLE $tblName) );", 217, 2, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1686:1: grantRevokeTarget : ( STAR -> ^( TOK_PRIV_DB ) | STAR DOT STAR -> ^( TOK_PRIV_GLOBAL ) | dbName= Identifier DOT STAR -> ^( TOK_PRIV_DB $dbName) | dbName= Identifier DOT tblName= Identifier -> ^( TOK_PRIV_TABLE $dbName $tblName) | tblName= Identifier -> ^( TOK_PRIV_TABLE $tblName) );", 217, 0, input);

                throw nvae;
            }
            switch (alt217) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1689:7: STAR
                    {
                    STAR747=(Token)input.LT(1);
                    match(input,STAR,FOLLOW_STAR_in_grantRevokeTarget12010); 
                    stream_STAR.add(STAR747);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1689:50: -> ^( TOK_PRIV_DB )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1689:53: ^( TOK_PRIV_DB )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_DB, "TOK_PRIV_DB"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1690:7: STAR DOT STAR
                    {
                    STAR748=(Token)input.LT(1);
                    match(input,STAR,FOLLOW_STAR_in_grantRevokeTarget12062); 
                    stream_STAR.add(STAR748);

                    DOT749=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_grantRevokeTarget12064); 
                    stream_DOT.add(DOT749);

                    STAR750=(Token)input.LT(1);
                    match(input,STAR,FOLLOW_STAR_in_grantRevokeTarget12066); 
                    stream_STAR.add(STAR750);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1690:50: -> ^( TOK_PRIV_GLOBAL )
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1690:53: ^( TOK_PRIV_GLOBAL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_GLOBAL, "TOK_PRIV_GLOBAL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1691:7: dbName= Identifier DOT STAR
                    {
                    dbName=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_grantRevokeTarget12111); 
                    stream_Identifier.add(dbName);

                    DOT751=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_grantRevokeTarget12113); 
                    stream_DOT.add(DOT751);

                    STAR752=(Token)input.LT(1);
                    match(input,STAR,FOLLOW_STAR_in_grantRevokeTarget12115); 
                    stream_STAR.add(STAR752);


                    // AST REWRITE
                    // elements: dbName
                    // token labels: dbName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_dbName=new RewriteRuleTokenStream(adaptor,"token dbName",dbName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1691:50: -> ^( TOK_PRIV_DB $dbName)
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1691:53: ^( TOK_PRIV_DB $dbName)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_DB, "TOK_PRIV_DB"), root_1);

                        adaptor.addChild(root_1, stream_dbName.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 4 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1692:7: dbName= Identifier DOT tblName= Identifier
                    {
                    dbName=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_grantRevokeTarget12150); 
                    stream_Identifier.add(dbName);

                    DOT753=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_grantRevokeTarget12152); 
                    stream_DOT.add(DOT753);

                    tblName=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_grantRevokeTarget12156); 
                    stream_Identifier.add(tblName);


                    // AST REWRITE
                    // elements: tblName, dbName
                    // token labels: tblName, dbName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_tblName=new RewriteRuleTokenStream(adaptor,"token tblName",tblName);
                    RewriteRuleTokenStream stream_dbName=new RewriteRuleTokenStream(adaptor,"token dbName",dbName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1692:50: -> ^( TOK_PRIV_TABLE $dbName $tblName)
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1692:53: ^( TOK_PRIV_TABLE $dbName $tblName)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_TABLE, "TOK_PRIV_TABLE"), root_1);

                        adaptor.addChild(root_1, stream_dbName.next());
                        adaptor.addChild(root_1, stream_tblName.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 5 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1693:7: tblName= Identifier
                    {
                    tblName=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_grantRevokeTarget12180); 
                    stream_Identifier.add(tblName);


                    // AST REWRITE
                    // elements: tblName
                    // token labels: tblName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_tblName=new RewriteRuleTokenStream(adaptor,"token tblName",tblName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1693:50: -> ^( TOK_PRIV_TABLE $tblName)
                    {
                        // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1693:53: ^( TOK_PRIV_TABLE $tblName)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_TABLE, "TOK_PRIV_TABLE"), root_1);

                        adaptor.addChild(root_1, stream_tblName.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end grantRevokeTarget

    public static class withOptionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start withOptionList
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1696:1: withOptionList : withOption ( COMMA withOption )* -> ^( TOK_WITHOPTS ( withOption )+ ) ;
    public final withOptionList_return withOptionList() throws RecognitionException {
        withOptionList_return retval = new withOptionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA755=null;
        withOption_return withOption754 = null;

        withOption_return withOption756 = null;


        CommonTree COMMA755_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_withOption=new RewriteRuleSubtreeStream(adaptor,"rule withOption");
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1697:5: ( withOption ( COMMA withOption )* -> ^( TOK_WITHOPTS ( withOption )+ ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1697:7: withOption ( COMMA withOption )*
            {
            pushFollow(FOLLOW_withOption_in_withOptionList12230);
            withOption754=withOption();
            _fsp--;

            stream_withOption.add(withOption754.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1697:18: ( COMMA withOption )*
            loop218:
            do {
                int alt218=2;
                int LA218_0 = input.LA(1);

                if ( (LA218_0==COMMA) ) {
                    alt218=1;
                }


                switch (alt218) {
            	case 1 :
            	    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1697:19: COMMA withOption
            	    {
            	    COMMA755=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_withOptionList12233); 
            	    stream_COMMA.add(COMMA755);

            	    pushFollow(FOLLOW_withOption_in_withOptionList12235);
            	    withOption756=withOption();
            	    _fsp--;

            	    stream_withOption.add(withOption756.getTree());

            	    }
            	    break;

            	default :
            	    break loop218;
                }
            } while (true);


            // AST REWRITE
            // elements: withOption
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1697:38: -> ^( TOK_WITHOPTS ( withOption )+ )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1697:41: ^( TOK_WITHOPTS ( withOption )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_WITHOPTS, "TOK_WITHOPTS"), root_1);

                if ( !(stream_withOption.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_withOption.hasNext() ) {
                    adaptor.addChild(root_1, stream_withOption.next());

                }
                stream_withOption.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end withOptionList

    public static class withOption_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start withOption
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1700:1: withOption : KW_GRANT KW_OPTION -> TOK_PRIVGRANT ;
    public final withOption_return withOption() throws RecognitionException {
        withOption_return retval = new withOption_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_GRANT757=null;
        Token KW_OPTION758=null;

        CommonTree KW_GRANT757_tree=null;
        CommonTree KW_OPTION758_tree=null;
        RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1701:5: ( KW_GRANT KW_OPTION -> TOK_PRIVGRANT )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1701:7: KW_GRANT KW_OPTION
            {
            KW_GRANT757=(Token)input.LT(1);
            match(input,KW_GRANT,FOLLOW_KW_GRANT_in_withOption12263); 
            stream_KW_GRANT.add(KW_GRANT757);

            KW_OPTION758=(Token)input.LT(1);
            match(input,KW_OPTION,FOLLOW_KW_OPTION_in_withOption12265); 
            stream_KW_OPTION.add(KW_OPTION758);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1701:32: -> TOK_PRIVGRANT
            {
                adaptor.addChild(root_0, adaptor.create(TOK_PRIVGRANT, "TOK_PRIVGRANT"));

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end withOption

    public static class revokeStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start revokeStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1704:1: revokeStatement : KW_REVOKE privilegeList KW_ON grantRevokeTarget KW_FROM userList -> ^( TOK_REVOKE privilegeList grantRevokeTarget userList ) ;
    public final revokeStatement_return revokeStatement() throws RecognitionException {
        revokeStatement_return retval = new revokeStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_REVOKE759=null;
        Token KW_ON761=null;
        Token KW_FROM763=null;
        privilegeList_return privilegeList760 = null;

        grantRevokeTarget_return grantRevokeTarget762 = null;

        userList_return userList764 = null;


        CommonTree KW_REVOKE759_tree=null;
        CommonTree KW_ON761_tree=null;
        CommonTree KW_FROM763_tree=null;
        RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_grantRevokeTarget=new RewriteRuleSubtreeStream(adaptor,"rule grantRevokeTarget");
        RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
        RewriteRuleSubtreeStream stream_userList=new RewriteRuleSubtreeStream(adaptor,"rule userList");
         msgs.push("revoke statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1707:5: ( KW_REVOKE privilegeList KW_ON grantRevokeTarget KW_FROM userList -> ^( TOK_REVOKE privilegeList grantRevokeTarget userList ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1708:5: KW_REVOKE privilegeList KW_ON grantRevokeTarget KW_FROM userList
            {
            KW_REVOKE759=(Token)input.LT(1);
            match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokeStatement12306); 
            stream_KW_REVOKE.add(KW_REVOKE759);

            pushFollow(FOLLOW_privilegeList_in_revokeStatement12308);
            privilegeList760=privilegeList();
            _fsp--;

            stream_privilegeList.add(privilegeList760.getTree());
            KW_ON761=(Token)input.LT(1);
            match(input,KW_ON,FOLLOW_KW_ON_in_revokeStatement12310); 
            stream_KW_ON.add(KW_ON761);

            pushFollow(FOLLOW_grantRevokeTarget_in_revokeStatement12312);
            grantRevokeTarget762=grantRevokeTarget();
            _fsp--;

            stream_grantRevokeTarget.add(grantRevokeTarget762.getTree());
            KW_FROM763=(Token)input.LT(1);
            match(input,KW_FROM,FOLLOW_KW_FROM_in_revokeStatement12314); 
            stream_KW_FROM.add(KW_FROM763);

            pushFollow(FOLLOW_userList_in_revokeStatement12316);
            userList764=userList();
            _fsp--;

            stream_userList.add(userList764.getTree());

            // AST REWRITE
            // elements: privilegeList, grantRevokeTarget, userList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1709:5: -> ^( TOK_REVOKE privilegeList grantRevokeTarget userList )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1709:8: ^( TOK_REVOKE privilegeList grantRevokeTarget userList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_REVOKE, "TOK_REVOKE"), root_1);

                adaptor.addChild(root_1, stream_privilegeList.next());
                adaptor.addChild(root_1, stream_grantRevokeTarget.next());
                adaptor.addChild(root_1, stream_userList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end revokeStatement

    public static class showGrantsStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start showGrantsStatement
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1712:1: showGrantsStatement : KW_SHOW kwGrants ( KW_FOR Identifier )? -> ^( TOK_SHOWGRANTS ( Identifier )? ) ;
    public final showGrantsStatement_return showGrantsStatement() throws RecognitionException {
        showGrantsStatement_return retval = new showGrantsStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_SHOW765=null;
        Token KW_FOR767=null;
        Token Identifier768=null;
        kwGrants_return kwGrants766 = null;


        CommonTree KW_SHOW765_tree=null;
        CommonTree KW_FOR767_tree=null;
        CommonTree Identifier768_tree=null;
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_kwGrants=new RewriteRuleSubtreeStream(adaptor,"rule kwGrants");
         msgs.push("show grants statement"); 
        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1715:5: ( KW_SHOW kwGrants ( KW_FOR Identifier )? -> ^( TOK_SHOWGRANTS ( Identifier )? ) )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1715:7: KW_SHOW kwGrants ( KW_FOR Identifier )?
            {
            KW_SHOW765=(Token)input.LT(1);
            match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showGrantsStatement12359); 
            stream_KW_SHOW.add(KW_SHOW765);

            pushFollow(FOLLOW_kwGrants_in_showGrantsStatement12361);
            kwGrants766=kwGrants();
            _fsp--;

            stream_kwGrants.add(kwGrants766.getTree());
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1715:24: ( KW_FOR Identifier )?
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==KW_FOR) ) {
                alt219=1;
            }
            switch (alt219) {
                case 1 :
                    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1715:25: KW_FOR Identifier
                    {
                    KW_FOR767=(Token)input.LT(1);
                    match(input,KW_FOR,FOLLOW_KW_FOR_in_showGrantsStatement12364); 
                    stream_KW_FOR.add(KW_FOR767);

                    Identifier768=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_showGrantsStatement12366); 
                    stream_Identifier.add(Identifier768);


                    }
                    break;

            }


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1716:5: -> ^( TOK_SHOWGRANTS ( Identifier )? )
            {
                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1716:8: ^( TOK_SHOWGRANTS ( Identifier )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOWGRANTS, "TOK_SHOWGRANTS"), root_1);

                // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1716:25: ( Identifier )?
                if ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_Identifier.next());

                }
                stream_Identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end showGrantsStatement

    public static class kwUSER_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start kwUSER
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1719:1: kwUSER : {...}? Identifier ;
    public final kwUSER_return kwUSER() throws RecognitionException {
        kwUSER_return retval = new kwUSER_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier769=null;

        CommonTree Identifier769_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1720:5: ({...}? Identifier )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1720:7: {...}? Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !(input.LT(1).getText().equalsIgnoreCase("USER")) ) {
                throw new FailedPredicateException(input, "kwUSER", "input.LT(1).getText().equalsIgnoreCase(\"USER\")");
            }
            Identifier769=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_kwUSER12400); 
            Identifier769_tree = (CommonTree)adaptor.create(Identifier769);
            adaptor.addChild(root_0, Identifier769_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end kwUSER

    public static class kwPASSWORD_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start kwPASSWORD
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1723:1: kwPASSWORD : {...}? Identifier ;
    public final kwPASSWORD_return kwPASSWORD() throws RecognitionException {
        kwPASSWORD_return retval = new kwPASSWORD_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier770=null;

        CommonTree Identifier770_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1724:5: ({...}? Identifier )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1724:7: {...}? Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !(input.LT(1).getText().equalsIgnoreCase("PASSWORD")) ) {
                throw new FailedPredicateException(input, "kwPASSWORD", "input.LT(1).getText().equalsIgnoreCase(\"PASSWORD\")");
            }
            Identifier770=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_kwPASSWORD12419); 
            Identifier770_tree = (CommonTree)adaptor.create(Identifier770);
            adaptor.addChild(root_0, Identifier770_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end kwPASSWORD

    public static class kwSUPER_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start kwSUPER
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1727:1: kwSUPER : {...}? Identifier ;
    public final kwSUPER_return kwSUPER() throws RecognitionException {
        kwSUPER_return retval = new kwSUPER_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier771=null;

        CommonTree Identifier771_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1728:5: ({...}? Identifier )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1728:7: {...}? Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !(input.LT(1).getText().equalsIgnoreCase("SUPER")) ) {
                throw new FailedPredicateException(input, "kwSUPER", "input.LT(1).getText().equalsIgnoreCase(\"SUPER\")");
            }
            Identifier771=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_kwSUPER12438); 
            Identifier771_tree = (CommonTree)adaptor.create(Identifier771);
            adaptor.addChild(root_0, Identifier771_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end kwSUPER

    public static class kwPRIVILEGES_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start kwPRIVILEGES
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1731:1: kwPRIVILEGES : {...}? Identifier ;
    public final kwPRIVILEGES_return kwPRIVILEGES() throws RecognitionException {
        kwPRIVILEGES_return retval = new kwPRIVILEGES_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier772=null;

        CommonTree Identifier772_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1732:5: ({...}? Identifier )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1732:7: {...}? Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !(input.LT(1).getText().equalsIgnoreCase("PRIVILEGES")) ) {
                throw new FailedPredicateException(input, "kwPRIVILEGES", "input.LT(1).getText().equalsIgnoreCase(\"PRIVILEGES\")");
            }
            Identifier772=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_kwPRIVILEGES12457); 
            Identifier772_tree = (CommonTree)adaptor.create(Identifier772);
            adaptor.addChild(root_0, Identifier772_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end kwPRIVILEGES

    public static class kwGrants_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start kwGrants
    // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1735:1: kwGrants : {...}? Identifier ;
    public final kwGrants_return kwGrants() throws RecognitionException {
        kwGrants_return retval = new kwGrants_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier773=null;

        CommonTree Identifier773_tree=null;

        try {
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1736:5: ({...}? Identifier )
            // /home/yuanhang.ghj/dev/hive/hive_1.4/dev-1.4/dev_hive-1.1.4/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1736:7: {...}? Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !(input.LT(1).getText().equalsIgnoreCase("GRANTS")) ) {
                throw new FailedPredicateException(input, "kwGrants", "input.LT(1).getText().equalsIgnoreCase(\"GRANTS\")");
            }
            Identifier773=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_kwGrants12476); 
            Identifier773_tree = (CommonTree)adaptor.create(Identifier773);
            adaptor.addChild(root_0, Identifier773_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end kwGrants


 

    public static final BitSet FOLLOW_explainStatement_in_statement623 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_statement625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_execStatement_in_statement630 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_statement632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_EXPLAIN_in_explainStatement653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x6000000000000000L,0x4130000000206200L,0x0201200000200001L,0x0000500000000000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_explainStatement658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x4130000000206200L,0x0201200000200001L,0x0000500000000000L});
    public static final BitSet FOLLOW_execStatement_in_explainStatement662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_queryStatementExpression_in_execStatement698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loadStatement_in_execStatement706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ddlStatement_in_execStatement714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dclStatement_in_execStatement722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOAD_in_loadStatement749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_DATA_in_loadStatement751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_KW_LOCAL_in_loadStatement756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INPATH_in_loadStatement760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_loadStatement765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_KW_OVERWRITE_in_loadStatement771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_INTO_in_loadStatement775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_KW_TABLE_in_loadStatement777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_tabName_in_loadStatement782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createDatabaseStatement_in_ddlStatement834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchDatabaseStatement_in_ddlStatement842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropDatabaseStatement_in_ddlStatement850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createTableStatement_in_ddlStatement858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropTableStatement_in_ddlStatement866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatement_in_ddlStatement874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_descStatement_in_ddlStatement882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showStatement_in_ddlStatement890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metastoreCheck_in_ddlStatement898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createViewStatement_in_ddlStatement906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropViewStatement_in_ddlStatement914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createFunctionStatement_in_ddlStatement922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropFunctionStatement_in_ddlStatement930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createUserStatement_in_ddlStatement938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropUserStatement_in_ddlStatement946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterUserStatement_in_ddlStatement954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grantStatement_in_dclStatement981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_revokeStatement_in_dclStatement989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showGrantsStatement_in_dclStatement997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IF_in_ifExists1024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_EXISTS_in_ifExists1026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IF_in_ifNotExists1063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_KW_NOT_in_ifNotExists1065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_EXISTS_in_ifNotExists1067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createDatabaseStatement1104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_KW_DATABASE_in_createDatabaseStatement1107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_createDatabaseStatement1109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_ifNotExists_in_createDatabaseStatement1120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_createDatabaseStatement1133 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_databaseComment_in_createDatabaseStatement1143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_USE_in_switchDatabaseStatement1190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_switchDatabaseStatement1192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropDatabaseStatement1231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000C00L});
    public static final BitSet FOLLOW_KW_DATABASE_in_dropDatabaseStatement1234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_dropDatabaseStatement1236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_ifExists_in_dropDatabaseStatement1239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_dropDatabaseStatement1242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_databaseComment1284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_databaseComment1288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createTableStatement1328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010020L});
    public static final BitSet FOLLOW_KW_EXTERNAL_in_createTableStatement1333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_KW_TABLE_in_createTableStatement1337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_ifNotExists_in_createTableStatement1339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_createTableStatement1344 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004800168000L,0x0000000001001060L});
    public static final BitSet FOLLOW_KW_LIKE_in_createTableStatement1357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_createTableStatement1361 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_tableLocation_in_createTableStatement1372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createTableStatement1385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_createTableStatement1387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_createTableStatement1389 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004800108000L,0x0000000001001060L});
    public static final BitSet FOLLOW_tableComment_in_createTableStatement1402 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004800100000L,0x0000000001001060L});
    public static final BitSet FOLLOW_tablePartition_in_createTableStatement1414 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004800100000L,0x0000000001001040L});
    public static final BitSet FOLLOW_tableBuckets_in_createTableStatement1426 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004800100000L,0x0000000001001000L});
    public static final BitSet FOLLOW_tableRowFormat_in_createTableStatement1438 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004800100000L,0x0000000001000000L});
    public static final BitSet FOLLOW_tableFileFormat_in_createTableStatement1450 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004800100000L});
    public static final BitSet FOLLOW_tableLocation_in_createTableStatement1462 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000004000100000L});
    public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createTableStatement1474 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_AS_in_createTableStatement1487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0201000000200000L});
    public static final BitSet FOLLOW_selectStatement_in_createTableStatement1489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropTableStatement1680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_KW_TABLE_in_dropTableStatement1682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_dropTableStatement1684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALTER_in_alterStatement1720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400020L});
    public static final BitSet FOLLOW_KW_TABLE_in_alterStatement1745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_alterTableStatementSuffix_in_alterStatement1748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_VIEW_in_alterStatement1772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_alterViewStatementSuffix_in_alterStatement1775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix1812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixAddCol_in_alterTableStatementSuffix1820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixRenameCol_in_alterTableStatementSuffix1828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix1836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix1844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix1852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix1860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix1868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix1876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixSerdeProperties_in_alterTableStatementSuffix1884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterTblPartitionStatement_in_alterTableStatementSuffix1892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixClusterbySortby_in_alterTableStatementSuffix1900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix1927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRename1956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_KW_RENAME_in_alterStatementSuffixRename1958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_KW_TO_in_alterStatementSuffixRename1960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRename1964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixAddCol2007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddCol2012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol2018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol2021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_alterStatementSuffixAddCol2023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol2025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_alterStatementSuffixAddCol2027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRenameCol2100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol2102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020001000L});
    public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol2104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRenameCol2109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRenameCol2113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000067FF8200000L});
    public static final BitSet FOLLOW_colType_in_alterStatementSuffixRenameCol2115 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x00000000C0008000L});
    public static final BitSet FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol2118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol2122 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol2126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FIRST_in_alterStatementChangeColPosition2172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_AFTER_in_alterStatementChangeColPosition2174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementChangeColPosition2178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixAddPartitions2230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions2232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions2234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions2237 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions2239 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions2243 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions2245 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixTouch2298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch2300 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixTouch2303 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixArchive2349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive2351 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixArchive2354 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixUnArchive2400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive2402 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive2405 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_KW_LOCATION_in_partitionLocation2457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_partitionLocation2461 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixDropPartitions2497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions2499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixDropPartitions2501 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_alterStatementSuffixDropPartitions2504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixDropPartitions2506 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixProperties2552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixProperties2554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties2556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixProperties2558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterViewSuffixProperties2602 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_SET_in_alterViewSuffixProperties2604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties2606 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_tableProperties_in_alterViewSuffixProperties2608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixSerdeProperties2652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties2654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties2656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties2660 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties2663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties2665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties2667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixSerdeProperties2698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties2700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties2702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties2704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_tablePartitionPrefix2745 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_tablePartitionPrefix2747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tablePartitionPrefix_in_alterTblPartitionStatement2786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_alterTblPartitionStatementSuffix_in_alterTblPartitionStatement2788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix2823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix2829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixFileFormat2851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat2853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000780000000000L});
    public static final BitSet FOLLOW_fileFormat_in_alterStatementSuffixFileFormat2855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixLocation2886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation2888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixLocation2892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixClusterbySortby2925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby2927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SEQUENCEFILE_in_fileFormat2962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TEXTFILE_in_fileFormat2977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RCFILE_in_fileFormat2992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INPUTFORMAT_in_fileFormat3007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_fileFormat3011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_fileFormat3013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_fileFormat3017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_tabTypeExpr3062 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_DOT_in_tabTypeExpr3065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000E000000001000L});
    public static final BitSet FOLLOW_set_in_tabTypeExpr3068 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_tabTypeExpr_in_partTypeExpr3111 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_partTypeExpr3113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement3153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0040000000001000L});
    public static final BitSet FOLLOW_KW_DESC_in_descStatement3155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0040000000001000L});
    public static final BitSet FOLLOW_KW_FORMATTED_in_descStatement3161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement3165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_partTypeExpr_in_descStatement3172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement3195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_KW_DESC_in_descStatement3197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_descStatement3200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x8000000000021144L,0x007007E3F8208000L,0x000001FFEC030000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement3202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000021144L,0x007007E3F8208000L,0x000001FFEC030000L});
    public static final BitSet FOLLOW_descFuncNames_in_descStatement3208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement3248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0600000000000000L});
    public static final BitSet FOLLOW_KW_DATABASES_in_showStatement3251 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_SCHEMAS_in_showStatement3253 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement3257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement3259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement3278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_TABLES_in_showStatement3280 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement3282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement3301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_KW_FUNCTIONS_in_showStatement3303 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement3305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement3324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_PARTITIONS_in_showStatement3326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_showStatement3328 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_showStatement3330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement3350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_KW_TABLE_in_showStatement3352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement3354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC000000000020000L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement3358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement3360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_showStatement3365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement3369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001004L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement3371 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_showStatement3373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MSCK_in_metastoreCheck3420 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L,0x0000000000000002L});
    public static final BitSet FOLLOW_KW_REPAIR_in_metastoreCheck3425 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_KW_TABLE_in_metastoreCheck3430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_metastoreCheck3434 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_metastoreCheck3436 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_metastoreCheck3440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_metastoreCheck3442 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_CREATE_in_createFunctionStatement3496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KW_TEMPORARY_in_createFunctionStatement3498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_createFunctionStatement3500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_createFunctionStatement3502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_AS_in_createFunctionStatement3504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_createFunctionStatement3506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropFunctionStatement3547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KW_TEMPORARY_in_dropFunctionStatement3549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_dropFunctionStatement3551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_dropFunctionStatement3553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createViewStatement3592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_VIEW_in_createViewStatement3594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L});
    public static final BitSet FOLLOW_ifNotExists_in_createViewStatement3596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_createViewStatement3601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000148000L});
    public static final BitSet FOLLOW_LPAREN_in_createViewStatement3612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_columnNameCommentList_in_createViewStatement3614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_createViewStatement3616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000108000L});
    public static final BitSet FOLLOW_tableComment_in_createViewStatement3620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000100000L});
    public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createViewStatement3631 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_AS_in_createViewStatement3642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0201000000200000L});
    public static final BitSet FOLLOW_selectStatement_in_createViewStatement3652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropViewStatement3751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_VIEW_in_dropViewStatement3753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_dropViewStatement3755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createUserStatement3794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_kwUSER_in_createUserStatement3796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_userItem_in_createUserStatement3798 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_createUserStatement3801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_userItem_in_createUserStatement3803 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Identifier_in_userItem3846 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_KW_IDENTIFIED_in_userItem3849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_BY_in_userItem3851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_userItem3853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropUserStatement3899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_kwUSER_in_dropUserStatement3901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_dropUserStatement3903 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_dropUserStatement3906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_dropUserStatement3908 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_ALTER_in_alterUserStatement3950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_kwUSER_in_alterUserStatement3952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_alterUserStatement3954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_SET_in_alterUserStatement3956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_kwPASSWORD_in_alterUserStatement3958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_alterUserStatement3960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_showStmtIdentifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_tableComment4042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_tableComment4046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITIONED_in_tablePartition4083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_BY_in_tablePartition4085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_tablePartition4087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_tablePartition4089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_tablePartition4091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CLUSTERED_in_tableBuckets4136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_BY_in_tableBuckets4138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_tableBuckets4140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_columnNameList_in_tableBuckets4144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_tableBuckets4146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_SORTED_in_tableBuckets4149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_BY_in_tableBuckets4151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_tableBuckets4153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_columnNameOrderList_in_tableBuckets4157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_tableBuckets4159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_INTO_in_tableBuckets4163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_Number_in_tableBuckets4167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_KW_BUCKETS_in_tableBuckets4169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatSerde_in_rowFormat4216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatDelimited_in_rowFormat4232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RECORDREADER_in_recordReader4281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_recordReader4283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RECORDWRITER_in_recordWriter4332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_recordWriter4334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ROW_in_rowFormatSerde4383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatSerde4385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_KW_SERDE_in_rowFormatSerde4387 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_rowFormatSerde4391 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_KW_WITH_in_rowFormatSerde4394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde4396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_tableProperties_in_rowFormatSerde4400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ROW_in_rowFormatDelimited4452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatDelimited4454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_KW_DELIMITED_in_rowFormatDelimited4456 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000A90000L});
    public static final BitSet FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited4458 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000A80000L});
    public static final BitSet FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited4461 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000A00000L});
    public static final BitSet FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited4464 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited4467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatDelimited_in_tableRowFormat4523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatSerde_in_tableRowFormat4543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed4590 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_tableProperties_in_tablePropertiesPrefixed4593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_tableProperties4626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_propertiesList_in_tableProperties4628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_tableProperties4630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyValueProperty_in_propertiesList4671 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_propertiesList4674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_keyValueProperty_in_propertiesList4676 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty4722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_EQUAL_in_keyValueProperty4724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty4728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier4773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier4775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier4777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier4781 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier4784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier4786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier4790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier4842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier4844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier4846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier4848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier4852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier4898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier4900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier4902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier4904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier4908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier4954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier4956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier4958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier4962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat5008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat5010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_KW_SEQUENCEFILE_in_tableFileFormat5012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat5027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat5029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_TEXTFILE_in_tableFileFormat5031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat5046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat5048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_KW_RCFILE_in_tableFileFormat5050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat5065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat5067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_KW_INPUTFORMAT_in_tableFileFormat5069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat5073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat5075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat5079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat5107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_BY_in_tableFileFormat5109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat5113 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_KW_WITH_in_tableFileFormat5125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat5127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_tableProperties_in_tableFileFormat5131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCATION_in_tableLocation5185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_tableLocation5189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList5225 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_columnNameTypeList5228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList5230 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList5268 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_columnNameColonTypeList5271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList5273 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_columnName_in_columnNameList5311 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_columnNameList5314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_columnName_in_columnNameList5316 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Identifier_in_columnName5360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList5387 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_columnNameOrderList5390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList5392 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Identifier_in_columnNameOrder5430 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_ASC_in_columnNameOrder5435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESC_in_columnNameOrder5441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList5513 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_columnNameCommentList5516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList5518 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Identifier_in_columnNameComment5558 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_COMMENT_in_columnNameComment5561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_columnNameComment5565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_columnRefOrder5613 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_ASC_in_columnRefOrder5618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESC_in_columnRefOrder5624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_columnNameType5698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000067FF8200000L});
    public static final BitSet FOLLOW_colType_in_columnNameType5700 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_COMMENT_in_columnNameType5703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_columnNameType5707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_columnNameColonType5793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_COLON_in_columnNameColonType5795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000067FF8200000L});
    public static final BitSet FOLLOW_colType_in_columnNameColonType5797 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_COMMENT_in_columnNameColonType5800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_columnNameColonType5804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_colType5888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colType_in_colTypeList5915 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_colTypeList5918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000067FF8200000L});
    public static final BitSet FOLLOW_colType_in_colTypeList5920 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_primitiveType_in_type5948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_listType_in_type5956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_structType_in_type5964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mapType_in_type5972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unionType_in_type5981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TINYINT_in_primitiveType6003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SMALLINT_in_primitiveType6024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INT_in_primitiveType6044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_BIGINT_in_primitiveType6069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_BOOLEAN_in_primitiveType6091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FLOAT_in_primitiveType6112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DOUBLE_in_primitiveType6135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATE_in_primitiveType6157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATETIME_in_primitiveType6181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TIMESTAMP_in_primitiveType6201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STRING_in_primitiveType6220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ARRAY_in_listType6261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_listType6263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000067FF8200000L});
    public static final BitSet FOLLOW_type_in_listType6265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_listType6267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STRUCT_in_structType6304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_structType6306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_columnNameColonTypeList_in_structType6308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_structType6310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAP_in_mapType6345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_mapType6347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000003FF8000000L});
    public static final BitSet FOLLOW_primitiveType_in_mapType6351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_mapType6353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000067FF8200000L});
    public static final BitSet FOLLOW_type_in_mapType6357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_mapType6359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNIONTYPE_in_unionType6402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_unionType6404 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000067FF8200000L});
    public static final BitSet FOLLOW_colTypeList_in_unionType6406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_unionType6408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNION_in_queryOperator6443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_ALL_in_queryOperator6445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_queryStatement_in_queryStatementExpression6469 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_queryOperator_in_queryStatementExpression6472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0201200000200000L});
    public static final BitSet FOLLOW_queryStatement_in_queryStatementExpression6475 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_fromClause_in_queryStatement6498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0201200000200000L});
    public static final BitSet FOLLOW_body_in_queryStatement6508 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0201200000200000L});
    public static final BitSet FOLLOW_regular_body_in_queryStatement6530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insertClause_in_regular_body6549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0201000000200000L});
    public static final BitSet FOLLOW_selectClause_in_regular_body6554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_fromClause_in_regular_body6559 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007F00L});
    public static final BitSet FOLLOW_whereClause_in_regular_body6564 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007E00L});
    public static final BitSet FOLLOW_groupByClause_in_regular_body6570 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007C00L});
    public static final BitSet FOLLOW_havingClause_in_regular_body6576 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007800L});
    public static final BitSet FOLLOW_orderByClause_in_regular_body6582 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007000L});
    public static final BitSet FOLLOW_clusterByClause_in_regular_body6588 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000006000L});
    public static final BitSet FOLLOW_distributeByClause_in_regular_body6594 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_sortByClause_in_regular_body6600 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_limitClause_in_regular_body6606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectStatement_in_regular_body6699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_selectStatement6717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_fromClause_in_selectStatement6722 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007F00L});
    public static final BitSet FOLLOW_whereClause_in_selectStatement6727 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007E00L});
    public static final BitSet FOLLOW_groupByClause_in_selectStatement6733 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007C00L});
    public static final BitSet FOLLOW_havingClause_in_selectStatement6739 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007800L});
    public static final BitSet FOLLOW_orderByClause_in_selectStatement6745 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007000L});
    public static final BitSet FOLLOW_clusterByClause_in_selectStatement6751 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000006000L});
    public static final BitSet FOLLOW_distributeByClause_in_selectStatement6757 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_sortByClause_in_selectStatement6763 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_limitClause_in_selectStatement6769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insertClause_in_body6879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0201000000200000L});
    public static final BitSet FOLLOW_selectClause_in_body6884 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007F00L});
    public static final BitSet FOLLOW_whereClause_in_body6889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007E00L});
    public static final BitSet FOLLOW_groupByClause_in_body6895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007C00L});
    public static final BitSet FOLLOW_havingClause_in_body6901 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007800L});
    public static final BitSet FOLLOW_orderByClause_in_body6907 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007000L});
    public static final BitSet FOLLOW_clusterByClause_in_body6913 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000006000L});
    public static final BitSet FOLLOW_distributeByClause_in_body6919 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_sortByClause_in_body6925 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_limitClause_in_body6931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_body7019 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007F00L});
    public static final BitSet FOLLOW_whereClause_in_body7024 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007E00L});
    public static final BitSet FOLLOW_groupByClause_in_body7030 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007C00L});
    public static final BitSet FOLLOW_havingClause_in_body7036 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007800L});
    public static final BitSet FOLLOW_orderByClause_in_body7042 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000007000L});
    public static final BitSet FOLLOW_clusterByClause_in_body7048 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000006000L});
    public static final BitSet FOLLOW_distributeByClause_in_body7054 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_sortByClause_in_body7060 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_limitClause_in_body7066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INSERT_in_insertClause7179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_KW_OVERWRITE_in_insertClause7181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000021L,0x0000400000000000L});
    public static final BitSet FOLLOW_destination_in_insertClause7183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCAL_in_destination7221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_KW_DIRECTORY_in_destination7223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_destination7225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DIRECTORY_in_destination7240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_destination7242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TABLE_in_destination7257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_tabName_in_destination7259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LIMIT_in_limitClause7293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_Number_in_limitClause7297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SELECT_in_selectClause7338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0076164000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_hintClause_in_selectClause7340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0066164000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_KW_ALL_in_selectClause7346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0060064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_KW_DISTINCT_in_selectClause7352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0060064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_selectList_in_selectClause7356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TRANSFORM_in_selectClause7391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_selectTrfmClause_in_selectClause7393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_trfmClause_in_selectClause7464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectItem_in_selectList7507 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_selectList7511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0060064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_selectItem_in_selectList7514 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_LPAREN_in_selectTrfmClause7557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0060064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_selectExpressionList_in_selectTrfmClause7559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_selectTrfmClause7561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000001800L});
    public static final BitSet FOLLOW_rowFormat_in_selectTrfmClause7569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000800L});
    public static final BitSet FOLLOW_recordWriter_in_selectTrfmClause7573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_KW_USING_in_selectTrfmClause7579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_selectTrfmClause7581 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000001400L});
    public static final BitSet FOLLOW_KW_AS_in_selectTrfmClause7589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041000L});
    public static final BitSet FOLLOW_LPAREN_in_selectTrfmClause7593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_aliasList_in_selectTrfmClause7596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_selectTrfmClause7600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_selectTrfmClause7603 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_aliasList_in_selectTrfmClause7609 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_columnNameTypeList_in_selectTrfmClause7613 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_rowFormat_in_selectTrfmClause7625 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_recordReader_in_selectTrfmClause7629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIVIDE_in_hintClause7692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_STAR_in_hintClause7694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_PLUS_in_hintClause7696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0180000000000000L});
    public static final BitSet FOLLOW_hintList_in_hintClause7698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_STAR_in_hintClause7700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_DIVIDE_in_hintClause7702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hintItem_in_hintList7741 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_hintList7744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0180000000000000L});
    public static final BitSet FOLLOW_hintItem_in_hintList7746 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_hintName_in_hintItem7784 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_hintItem7787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_hintArgs_in_hintItem7789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_hintItem7791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAPJOIN_in_hintName7834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STREAMTABLE_in_hintName7846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hintArgName_in_hintArgs7881 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_hintArgs7884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_hintArgName_in_hintArgs7886 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Identifier_in_hintArgName7928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpression_in_selectItem7961 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000101000L});
    public static final BitSet FOLLOW_KW_AS_in_selectItem7966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_selectItem7969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_AS_in_selectItem7975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_selectItem7977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_selectItem7979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000080000L});
    public static final BitSet FOLLOW_COMMA_in_selectItem7982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_selectItem7984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000080000L});
    public static final BitSet FOLLOW_RPAREN_in_selectItem7988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAP_in_trfmClause8038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0060064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_selectExpressionList_in_trfmClause8043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000001800L});
    public static final BitSet FOLLOW_KW_REDUCE_in_trfmClause8053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0060064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_selectExpressionList_in_trfmClause8055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000001800L});
    public static final BitSet FOLLOW_rowFormat_in_trfmClause8065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000800L});
    public static final BitSet FOLLOW_recordWriter_in_trfmClause8069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_KW_USING_in_trfmClause8075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_StringLiteral_in_trfmClause8077 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000001400L});
    public static final BitSet FOLLOW_KW_AS_in_trfmClause8085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041000L});
    public static final BitSet FOLLOW_LPAREN_in_trfmClause8089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_aliasList_in_trfmClause8092 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_trfmClause8096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_trfmClause8099 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_aliasList_in_trfmClause8105 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_columnNameTypeList_in_trfmClause8109 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_rowFormat_in_trfmClause8121 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_recordReader_in_trfmClause8125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectExpression8188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableAllColumns_in_selectExpression8192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpression_in_selectExpressionList8223 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_selectExpressionList8226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0060064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_selectExpression_in_selectExpressionList8228 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_STAR_in_tableAllColumns8263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_tableAllColumns8277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_DOT_in_tableAllColumns8279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_STAR_in_tableAllColumns8281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_tableOrColumn8321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList8360 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList8363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_expressionList8365 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Identifier_in_aliasList8407 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_aliasList8410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_aliasList8412 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_FROM_in_fromClause8456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041000L,0x1000000000000000L});
    public static final BitSet FOLLOW_joinSource_in_fromClause8458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fromSource_in_joinSource8493 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_joinToken_in_joinSource8497 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041000L});
    public static final BitSet FOLLOW_fromSource_in_joinSource8500 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6400000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_KW_ON_in_joinSource8503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_joinSource8506 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x6000000000000000L,0x0000000000000003L});
    public static final BitSet FOLLOW_uniqueJoinToken_in_joinSource8519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041000L,0x0800000000000000L});
    public static final BitSet FOLLOW_uniqueJoinSource_in_joinSource8522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_joinSource8525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041000L,0x0800000000000000L});
    public static final BitSet FOLLOW_uniqueJoinSource_in_joinSource8528 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_PRESERVE_in_uniqueJoinSource8557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041000L});
    public static final BitSet FOLLOW_fromSource_in_uniqueJoinSource8560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_uniqueJoinExpr_in_uniqueJoinSource8562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_uniqueJoinExpr8589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_uniqueJoinExpr8593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000080000L});
    public static final BitSet FOLLOW_COMMA_in_uniqueJoinExpr8596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_uniqueJoinExpr8600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000080000L});
    public static final BitSet FOLLOW_RPAREN_in_uniqueJoinExpr8604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNIQUEJOIN_in_uniqueJoinToken8647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken8679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LEFT_in_joinToken8711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_OUTER_in_joinToken8714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken8716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RIGHT_in_joinToken8730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_OUTER_in_joinToken8732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken8734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FULL_in_joinToken8748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_OUTER_in_joinToken8751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken8753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LEFT_in_joinToken8767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KW_SEMI_in_joinToken8770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken8773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LATERAL_in_lateralView8804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_VIEW_in_lateralView8806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001040L,0x0000064000200000L});
    public static final BitSet FOLLOW_function_in_lateralView8808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_tableAlias_in_lateralView8810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_AS_in_lateralView8812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_lateralView8814 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_lateralView8817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_lateralView8819 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_Identifier_in_tableAlias8870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableSource_in_fromSource8910 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_subQuerySource_in_fromSource8914 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_lateralView_in_fromSource8918 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_KW_TABLESAMPLE_in_tableSample8952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_tableSample8954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_KW_BUCKET_in_tableSample8956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_Number_in_tableSample8961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_OUT_in_tableSample8964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_OF_in_tableSample8966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_Number_in_tableSample8971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L,0x0400000000000000L});
    public static final BitSet FOLLOW_KW_ON_in_tableSample8975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_tableSample8979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000080000L});
    public static final BitSet FOLLOW_COMMA_in_tableSample8982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_tableSample8986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000080000L});
    public static final BitSet FOLLOW_RPAREN_in_tableSample8992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_tableSource9041 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_tableSample_in_tableSource9046 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_tableSource9053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQuerySource9104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0201200000200000L});
    public static final BitSet FOLLOW_queryStatementExpression_in_subQuerySource9106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_subQuerySource9108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_subQuerySource9110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_WHERE_in_whereClause9153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_searchCondition_in_whereClause9155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_searchCondition9194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GROUP_in_groupByClause9228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_BY_in_groupByClause9230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_groupByExpression_in_groupByClause9236 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByClause9244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_groupByExpression_in_groupByClause9246 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_expression_in_groupByExpression9293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_HAVING_in_havingClause9324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_havingCondition_in_havingClause9326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_havingCondition9365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ORDER_in_orderByClause9397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_BY_in_orderByClause9399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_columnRefOrder_in_orderByClause9405 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByClause9413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_columnRefOrder_in_orderByClause9415 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_CLUSTER_in_clusterByClause9457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_BY_in_clusterByClause9459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_clusterByClause9465 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_clusterByClause9473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_clusterByClause9475 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_DISTRIBUTE_in_distributeByClause9518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_BY_in_distributeByClause9520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_distributeByClause9526 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_distributeByClause9529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_distributeByClause9531 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_SORT_in_sortByClause9573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_BY_in_sortByClause9575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_columnRefOrder_in_sortByClause9581 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_sortByClause9589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_columnRefOrder_in_sortByClause9591 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_functionName_in_function9634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_function9640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C1144L,0x0062064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_STAR_in_function9661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_DISTINCT_in_function9677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000000C1144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_function9682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000080000L});
    public static final BitSet FOLLOW_COMMA_in_function9685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_function9687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000080000L});
    public static final BitSet FOLLOW_RPAREN_in_function9705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_functionName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CAST_in_castExpression9867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_castExpression9873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_castExpression9885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_AS_in_castExpression9897 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000003FF8000000L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression9909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_castExpression9915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CASE_in_caseExpression9956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_caseExpression9958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_WHEN_in_caseExpression9965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_caseExpression9967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_KW_THEN_in_caseExpression9969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_caseExpression9971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000001A0000L});
    public static final BitSet FOLLOW_KW_ELSE_in_caseExpression9980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_caseExpression9982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_END_in_caseExpression9990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CASE_in_whenExpression10032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_KW_WHEN_in_whenExpression10041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_whenExpression10043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_KW_THEN_in_whenExpression10045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_whenExpression10047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000001A0000L});
    public static final BitSet FOLLOW_KW_ELSE_in_whenExpression10056 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_whenExpression10058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_END_in_whenExpression10066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Number_in_constant10108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_constant10116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_charSetStringLiteral_in_constant10124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanValue_in_constant10132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CharSetName_in_charSetStringLiteral10165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_CharSetLiteral_in_charSetStringLiteral10169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceOrExpression_in_expression10212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NULL_in_atomExpression10233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_atomExpression10245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_in_atomExpression10253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_atomExpression10261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_atomExpression10269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whenExpression_in_atomExpression10277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableOrColumn_in_atomExpression10285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_atomExpression10293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_atomExpression10296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_RPAREN_in_atomExpression10298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomExpression_in_precedenceFieldExpression10321 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_LSQUARE_in_precedenceFieldExpression10325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_precedenceFieldExpression10328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_RSQUARE_in_precedenceFieldExpression10330 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_DOT_in_precedenceFieldExpression10337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_precedenceFieldExpression10340 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_set_in_precedenceUnaryOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NULL_in_nullCondition10393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NOT_in_nullCondition10407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_KW_NULL_in_nullCondition10409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceUnaryOperator_in_precedenceUnaryPrefixExpression10437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041044L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_precedenceFieldExpression_in_precedenceUnaryPrefixExpression10442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceUnaryPrefixExpression_in_precedenceUnarySuffixExpression10459 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_IS_in_precedenceUnarySuffixExpression10464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_nullCondition_in_precedenceUnarySuffixExpression10466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISEXOR_in_precedenceBitwiseXorOperator10514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression10535 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_precedenceBitwiseXorOperator_in_precedenceBitwiseXorExpression10538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041044L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression10541 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_set_in_precedenceStarOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression10598 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0030000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_precedenceStarOperator_in_precedenceStarExpression10601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041044L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression10604 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0030000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_set_in_precedencePlusOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceStarExpression_in_precedencePlusExpression10653 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_precedencePlusOperator_in_precedencePlusExpression10656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041044L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_precedenceStarExpression_in_precedencePlusExpression10659 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_AMPERSAND_in_precedenceAmpersandOperator10683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression10704 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_precedenceAmpersandOperator_in_precedenceAmpersandExpression10707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041044L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression10710 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_BITWISEOR_in_precedenceBitwiseOrOperator10734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression10755 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_precedenceBitwiseOrOperator_in_precedenceBitwiseOrExpression10758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041044L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression10761 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_set_in_precedenceEqualOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression10842 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8000000000020000L,0x0000018000008000L,0x0000007C00000000L});
    public static final BitSet FOLLOW_precedenceEqualOperator_in_precedenceEqualExpression10847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041044L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression10850 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8000000000020000L,0x0000018000008000L,0x0000007C00000000L});
    public static final BitSet FOLLOW_inOperator_in_precedenceEqualExpression10856 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_expressions_in_precedenceEqualExpression10859 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x8000000000020000L,0x0000018000008000L,0x0000007C00000000L});
    public static final BitSet FOLLOW_KW_IN_in_inOperator10884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_expressions10913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_expressions10915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000080000L});
    public static final BitSet FOLLOW_COMMA_in_expressions10918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_expression_in_expressions10920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000080000L});
    public static final BitSet FOLLOW_RPAREN_in_expressions10924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NOT_in_precedenceNotOperator10950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceNotOperator_in_precedenceNotExpression10972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_precedenceEqualExpression_in_precedenceNotExpression10977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_AND_in_precedenceAndOperator10999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceNotExpression_in_precedenceAndExpression11020 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_precedenceAndOperator_in_precedenceAndExpression11023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_precedenceNotExpression_in_precedenceAndExpression11026 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_KW_OR_in_precedenceOrOperator11050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceAndExpression_in_precedenceOrExpression11071 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_precedenceOrOperator_in_precedenceOrExpression11074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000041144L,0x0040064000200100L,0x000006000CA18000L});
    public static final BitSet FOLLOW_precedenceAndExpression_in_precedenceOrExpression11077 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_KW_TRUE_in_booleanValue11101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FALSE_in_booleanValue11106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_tabName11126 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_tabName11128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITION_in_partitionSpec11160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_LPAREN_in_partitionSpec11167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_partitionVal_in_partitionSpec11169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000080000L});
    public static final BitSet FOLLOW_COMMA_in_partitionSpec11172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_partitionVal_in_partitionSpec11175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000080000L});
    public static final BitSet FOLLOW_RPAREN_in_partitionSpec11180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_partitionVal11211 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_EQUAL_in_partitionVal11214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000100L,0x0000060000200000L});
    public static final BitSet FOLLOW_constant_in_partitionVal11216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sysFuncNames0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sysFuncNames_in_descFuncNames11571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_descFuncNames11579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_descFuncNames11587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GRANT_in_grantStatement11621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000205200L,0x0001300000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_privilegeList_in_grantStatement11623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_KW_ON_in_grantStatement11625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L,0x0020000000000000L});
    public static final BitSet FOLLOW_grantRevokeTarget_in_grantStatement11627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_KW_TO_in_grantStatement11629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_userList_in_grantStatement11631 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_KW_WITH_in_grantStatement11634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_withOptionList_in_grantStatement11636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_privilegeType_in_privilegeList11684 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_privilegeList11687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000205200L,0x0001300000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_privilegeType_in_privilegeList11689 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_ALL_in_privilegeType11718 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_kwPRIVILEGES_in_privilegeType11720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SELECT_in_privilegeType11738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INSERT_in_privilegeType11765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_privilegeType11792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALTER_in_privilegeType11819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_privilegeType11847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_privilegeType11876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_kwUSER_in_privilegeType11878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GRANT_in_privilegeType11898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_KW_OPTION_in_privilegeType11900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kwSUPER_in_privilegeType11918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_userItem_in_userList11966 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_userList11969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_userItem_in_userList11971 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_STAR_in_grantRevokeTarget12010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_grantRevokeTarget12062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_DOT_in_grantRevokeTarget12064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_STAR_in_grantRevokeTarget12066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_grantRevokeTarget12111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_DOT_in_grantRevokeTarget12113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_STAR_in_grantRevokeTarget12115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_grantRevokeTarget12150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_DOT_in_grantRevokeTarget12152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_grantRevokeTarget12156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_grantRevokeTarget12180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_withOption_in_withOptionList12230 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COMMA_in_withOptionList12233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_withOption_in_withOptionList12235 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_GRANT_in_withOption12263 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_KW_OPTION_in_withOption12265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_REVOKE_in_revokeStatement12306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000205200L,0x0001300000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_privilegeList_in_revokeStatement12308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_KW_ON_in_revokeStatement12310 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L,0x0020000000000000L});
    public static final BitSet FOLLOW_grantRevokeTarget_in_revokeStatement12312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_FROM_in_revokeStatement12314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_userList_in_revokeStatement12316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showGrantsStatement12359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_kwGrants_in_showGrantsStatement12361 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_KW_FOR_in_showGrantsStatement12364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_Identifier_in_showGrantsStatement12366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_kwUSER12400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_kwPASSWORD12419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_kwSUPER12438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_kwPRIVILEGES12457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_kwGrants12476 = new BitSet(new long[]{0x0000000000000002L});

}